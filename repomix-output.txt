This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-08T22:02:02.332Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.editorconfig
.gitignore
amplify.yml
amplify/.config/project-config.json
amplify/backend/backend-config.json
amplify/backend/tags.json
amplify/backend/types/amplify-dependent-resources-ref.d.ts
amplify/cli.json
amplify/hooks/README.md
amplify/README.md
amplify/team-provider-info.json
angular.json
CHANGELOG.md
package.json
README.md
src/app/app-routing.module.ts
src/app/app.component.html
src/app/app.component.ts
src/app/app.module.ts
src/app/demo/api/blog.ts
src/app/demo/api/chat.ts
src/app/demo/api/customer.ts
src/app/demo/api/file.ts
src/app/demo/api/folder.ts
src/app/demo/api/image.ts
src/app/demo/api/kanban.ts
src/app/demo/api/mail.ts
src/app/demo/api/member.ts
src/app/demo/api/message.ts
src/app/demo/api/metric.ts
src/app/demo/api/product.ts
src/app/demo/api/task.ts
src/app/demo/api/user.ts
src/app/demo/components/apps/apps-routing.module.ts
src/app/demo/components/apps/apps.module.ts
src/app/demo/components/apps/blog/blog-detail/blog-comments/blog-comments.component.html
src/app/demo/components/apps/blog/blog-detail/blog-comments/blog-comments.component.ts
src/app/demo/components/apps/blog/blog-detail/blog-detail-routing.module.ts
src/app/demo/components/apps/blog/blog-detail/blog-detail.component.html
src/app/demo/components/apps/blog/blog-detail/blog-detail.component.ts
src/app/demo/components/apps/blog/blog-detail/blog-detail.module.ts
src/app/demo/components/apps/blog/blog-detail/new-comment/new-comment.component.html
src/app/demo/components/apps/blog/blog-detail/new-comment/new-comment.component.ts
src/app/demo/components/apps/blog/blog-edit/blog-edit-routing.module.ts
src/app/demo/components/apps/blog/blog-edit/blog-edit.component.html
src/app/demo/components/apps/blog/blog-edit/blog-edit.component.scss
src/app/demo/components/apps/blog/blog-edit/blog-edit.component.ts
src/app/demo/components/apps/blog/blog-edit/blog-edit.module.ts
src/app/demo/components/apps/blog/blog-list/blog-list-card/blog-list-card.component.html
src/app/demo/components/apps/blog/blog-list/blog-list-card/blog-list-card.component.ts
src/app/demo/components/apps/blog/blog-list/blog-list-routing.module.ts
src/app/demo/components/apps/blog/blog-list/blog-list.component.html
src/app/demo/components/apps/blog/blog-list/blog-list.component.ts
src/app/demo/components/apps/blog/blog-list/blog-list.module.ts
src/app/demo/components/apps/blog/blog.app-routing.module.ts
src/app/demo/components/apps/blog/blog.app.module.ts
src/app/demo/components/apps/calendar/calendar.app-routing.module.ts
src/app/demo/components/apps/calendar/calendar.app.component.html
src/app/demo/components/apps/calendar/calendar.app.component.scss
src/app/demo/components/apps/calendar/calendar.app.component.ts
src/app/demo/components/apps/calendar/calendar.app.module.ts
src/app/demo/components/apps/chat/chat-box/chat-box.component.html
src/app/demo/components/apps/chat/chat-box/chat-box.component.ts
src/app/demo/components/apps/chat/chat-sidebar/chat-sidebar.component.html
src/app/demo/components/apps/chat/chat-sidebar/chat-sidebar.component.ts
src/app/demo/components/apps/chat/chat.app-routing.module.ts
src/app/demo/components/apps/chat/chat.app.component.html
src/app/demo/components/apps/chat/chat.app.component.ts
src/app/demo/components/apps/chat/chat.app.module.ts
src/app/demo/components/apps/chat/service/chat.service.ts
src/app/demo/components/apps/chat/user-card/user-card.component.html
src/app/demo/components/apps/chat/user-card/user-card.component.ts
src/app/demo/components/apps/file/file.app-routing.module.ts
src/app/demo/components/apps/file/file.app.component.html
src/app/demo/components/apps/file/file.app.component.scss
src/app/demo/components/apps/file/file.app.component.ts
src/app/demo/components/apps/file/file.app.module.ts
src/app/demo/components/apps/file/service/file.app.service.ts
src/app/demo/components/apps/file/uploader/uploader.component.html
src/app/demo/components/apps/file/uploader/uploader.component.ts
src/app/demo/components/apps/kanban/kanban-card/kanban-card.component.html
src/app/demo/components/apps/kanban/kanban-card/kanban-card.component.ts
src/app/demo/components/apps/kanban/kanban-list/kanban-list.component.html
src/app/demo/components/apps/kanban/kanban-list/kanban-list.component.scss
src/app/demo/components/apps/kanban/kanban-list/kanban-list.component.ts
src/app/demo/components/apps/kanban/kanban-sidebar/kanban-sidebar.component.html
src/app/demo/components/apps/kanban/kanban-sidebar/kanban-sidebar.component.scss
src/app/demo/components/apps/kanban/kanban-sidebar/kanban-sidebar.component.ts
src/app/demo/components/apps/kanban/kanban.app-routing.module.ts
src/app/demo/components/apps/kanban/kanban.app.component.html
src/app/demo/components/apps/kanban/kanban.app.component.scss
src/app/demo/components/apps/kanban/kanban.app.component.ts
src/app/demo/components/apps/kanban/kanban.app.module.ts
src/app/demo/components/apps/kanban/service/kanban.service.ts
src/app/demo/components/apps/mail/mail-archive/mail-archive.component.html
src/app/demo/components/apps/mail/mail-archive/mail-archive.component.ts
src/app/demo/components/apps/mail/mail-compose/mail-compose.component.html
src/app/demo/components/apps/mail/mail-compose/mail-compose.component.ts
src/app/demo/components/apps/mail/mail-detail/mail-detail.component.html
src/app/demo/components/apps/mail/mail-detail/mail-detail.component.ts
src/app/demo/components/apps/mail/mail-important/mail-important.component.html
src/app/demo/components/apps/mail/mail-important/mail-important.component.ts
src/app/demo/components/apps/mail/mail-inbox/mail-inbox.component.html
src/app/demo/components/apps/mail/mail-inbox/mail-inbox.component.ts
src/app/demo/components/apps/mail/mail-reply/mail-reply.component.html
src/app/demo/components/apps/mail/mail-reply/mail-reply.component.ts
src/app/demo/components/apps/mail/mail-sent/mail-sent.component.html
src/app/demo/components/apps/mail/mail-sent/mail-sent.component.ts
src/app/demo/components/apps/mail/mail-sidebar/mail-sidebar.component.html
src/app/demo/components/apps/mail/mail-sidebar/mail-sidebar.component.ts
src/app/demo/components/apps/mail/mail-spam/mail-spam.component.html
src/app/demo/components/apps/mail/mail-spam/mail-spam.component.ts
src/app/demo/components/apps/mail/mail-starred/mail-starred.component.html
src/app/demo/components/apps/mail/mail-starred/mail-starred.component.ts
src/app/demo/components/apps/mail/mail-table/mail-table.component.html
src/app/demo/components/apps/mail/mail-table/mail-table.component.ts
src/app/demo/components/apps/mail/mail-trash/mail-trash.component.html
src/app/demo/components/apps/mail/mail-trash/mail-trash.component.ts
src/app/demo/components/apps/mail/mail.app-routing.module.ts
src/app/demo/components/apps/mail/mail.app.component.html
src/app/demo/components/apps/mail/mail.app.component.ts
src/app/demo/components/apps/mail/mail.app.module.ts
src/app/demo/components/apps/mail/service/mail.service.ts
src/app/demo/components/apps/tasklist/create-task/create-task.component.html
src/app/demo/components/apps/tasklist/create-task/create-task.component.ts
src/app/demo/components/apps/tasklist/service/task.service.ts
src/app/demo/components/apps/tasklist/task-list/task-list.component.html
src/app/demo/components/apps/tasklist/task-list/task-list.component.ts
src/app/demo/components/apps/tasklist/tasklist.app-routing.module.ts
src/app/demo/components/apps/tasklist/tasklist.app.component.html
src/app/demo/components/apps/tasklist/tasklist.app.component.ts
src/app/demo/components/apps/tasklist/tasklist.app.module.ts
src/app/demo/components/auth/accessdenied/accessdenied-routing.module.ts
src/app/demo/components/auth/accessdenied/accessdenied.component.html
src/app/demo/components/auth/accessdenied/accessdenied.component.ts
src/app/demo/components/auth/accessdenied/accessdenied.module.ts
src/app/demo/components/auth/auth-routing.module.ts
src/app/demo/components/auth/auth.guard.ts
src/app/demo/components/auth/auth.module.ts
src/app/demo/components/auth/error/error-routing.module.ts
src/app/demo/components/auth/error/error.component.html
src/app/demo/components/auth/error/error.component.ts
src/app/demo/components/auth/error/error.module.ts
src/app/demo/components/auth/forgotpassword/forgotpassword-routing.module.ts
src/app/demo/components/auth/forgotpassword/forgotpassword.component.html
src/app/demo/components/auth/forgotpassword/forgotpassword.component.ts
src/app/demo/components/auth/forgotpassword/forgotpassword.module.ts
src/app/demo/components/auth/lockscreen/lockscreen-routing.module.ts
src/app/demo/components/auth/lockscreen/lockscreen.component.html
src/app/demo/components/auth/lockscreen/lockscreen.component.ts
src/app/demo/components/auth/lockscreen/lockscreen.module.ts
src/app/demo/components/auth/login/login-routing.module.ts
src/app/demo/components/auth/login/login.component.html
src/app/demo/components/auth/login/login.component.ts
src/app/demo/components/auth/login/login.module.ts
src/app/demo/components/auth/newpassword/newpassword-routing.module.ts
src/app/demo/components/auth/newpassword/newpassword.component.html
src/app/demo/components/auth/newpassword/newpassword.component.ts
src/app/demo/components/auth/newpassword/newpassword.module.ts
src/app/demo/components/auth/register/register-routing.module.ts
src/app/demo/components/auth/register/register.component.html
src/app/demo/components/auth/register/register.component.ts
src/app/demo/components/auth/register/register.module.ts
src/app/demo/components/auth/verification/verification-routing.module.ts
src/app/demo/components/auth/verification/verification.component.html
src/app/demo/components/auth/verification/verification.component.ts
src/app/demo/components/auth/verification/verification.module.ts
src/app/demo/components/dashboards/dashboards-routing.module.ts
src/app/demo/components/dashboards/dashboards.module.ts
src/app/demo/components/dashboards/home/home-routing.module.ts
src/app/demo/components/dashboards/home/home.component.html
src/app/demo/components/dashboards/home/home.component.scss
src/app/demo/components/dashboards/home/home.component.spec.ts
src/app/demo/components/dashboards/home/home.component.ts
src/app/demo/components/dashboards/home/home.module.ts
src/app/demo/components/documentation/documentation-routing.module.ts
src/app/demo/components/documentation/documentation.component.html
src/app/demo/components/documentation/documentation.component.scss
src/app/demo/components/documentation/documentation.component.ts
src/app/demo/components/documentation/documentation.module.ts
src/app/demo/components/ecommerce/checkoutform/checkoutform-routing.module.ts
src/app/demo/components/ecommerce/checkoutform/checkoutform.component.html
src/app/demo/components/ecommerce/checkoutform/checkoutform.component.ts
src/app/demo/components/ecommerce/checkoutform/checkoutform.module.ts
src/app/demo/components/ecommerce/ecommerce-routing.module.ts
src/app/demo/components/ecommerce/ecommerce.module.ts
src/app/demo/components/ecommerce/newproduct/newproduct-routing.module.ts
src/app/demo/components/ecommerce/newproduct/newproduct.component.html
src/app/demo/components/ecommerce/newproduct/newproduct.component.scss
src/app/demo/components/ecommerce/newproduct/newproduct.component.ts
src/app/demo/components/ecommerce/newproduct/newproduct.module.ts
src/app/demo/components/ecommerce/orderhistory/orderhistory-routing.module.ts
src/app/demo/components/ecommerce/orderhistory/orderhistory.component.html
src/app/demo/components/ecommerce/orderhistory/orderhistory.component.ts
src/app/demo/components/ecommerce/orderhistory/orderhistory.module.ts
src/app/demo/components/ecommerce/ordersummary/ordersummary-routing.module.ts
src/app/demo/components/ecommerce/ordersummary/ordersummary.component.html
src/app/demo/components/ecommerce/ordersummary/ordersummary.component.ts
src/app/demo/components/ecommerce/ordersummary/ordersummary.module.ts
src/app/demo/components/ecommerce/productlist/productlist-routing.module.ts
src/app/demo/components/ecommerce/productlist/productlist.component.html
src/app/demo/components/ecommerce/productlist/productlist.component.ts
src/app/demo/components/ecommerce/productlist/productlist.module.ts
src/app/demo/components/ecommerce/productoverview/productoverview-routing.module.ts
src/app/demo/components/ecommerce/productoverview/productoverview.component.html
src/app/demo/components/ecommerce/productoverview/productoverview.component.ts
src/app/demo/components/ecommerce/productoverview/productoverview.module.ts
src/app/demo/components/ecommerce/shopping-cart/shopping-cart-routing.module.ts
src/app/demo/components/ecommerce/shopping-cart/shopping-cart.component.html
src/app/demo/components/ecommerce/shopping-cart/shopping-cart.component.ts
src/app/demo/components/ecommerce/shopping-cart/shopping-cart.module.ts
src/app/demo/components/landing/animateenter.directive.ts
src/app/demo/components/landing/landing-routing.module.ts
src/app/demo/components/landing/landing.component.html
src/app/demo/components/landing/landing.component.scss
src/app/demo/components/landing/landing.component.ts
src/app/demo/components/landing/landing.module.ts
src/app/demo/components/notfound/notfound-routing.module.ts
src/app/demo/components/notfound/notfound.component.html
src/app/demo/components/notfound/notfound.component.ts
src/app/demo/components/notfound/notfound.module.ts
src/app/demo/components/pages/aboutus/aboutus-routing.module.ts
src/app/demo/components/pages/aboutus/aboutus.component.html
src/app/demo/components/pages/aboutus/aboutus.component.ts
src/app/demo/components/pages/aboutus/aboutus.module.ts
src/app/demo/components/pages/contact/contact-routing.module.ts
src/app/demo/components/pages/contact/contact.component.html
src/app/demo/components/pages/contact/contact.component.ts
src/app/demo/components/pages/contact/contact.module.ts
src/app/demo/components/pages/crud/crud-routing.module.ts
src/app/demo/components/pages/crud/crud.component.html
src/app/demo/components/pages/crud/crud.component.ts
src/app/demo/components/pages/crud/crud.module.ts
src/app/demo/components/pages/empty/emptydemo-routing.module.ts
src/app/demo/components/pages/empty/emptydemo.component.html
src/app/demo/components/pages/empty/emptydemo.component.ts
src/app/demo/components/pages/empty/emptydemo.module.ts
src/app/demo/components/pages/faq/faq-routing.module.ts
src/app/demo/components/pages/faq/faq.component.html
src/app/demo/components/pages/faq/faq.component.ts
src/app/demo/components/pages/faq/faq.module.ts
src/app/demo/components/pages/help/help-routing.module.ts
src/app/demo/components/pages/help/help.component.html
src/app/demo/components/pages/help/help.component.ts
src/app/demo/components/pages/help/help.module.ts
src/app/demo/components/pages/invoice/invoice-routing.module.ts
src/app/demo/components/pages/invoice/invoice.component.html
src/app/demo/components/pages/invoice/invoice.component.ts
src/app/demo/components/pages/invoice/invoice.module.ts
src/app/demo/components/pages/pages-routing.module.ts
src/app/demo/components/pages/pages.module.ts
src/app/demo/components/pages/timeline/timelinedemo-routing.module.ts
src/app/demo/components/pages/timeline/timelinedemo.component.html
src/app/demo/components/pages/timeline/timelinedemo.component.ts
src/app/demo/components/pages/timeline/timelinedemo.module.ts
src/app/demo/components/pages/timeline/timelinedemo.scss
src/app/demo/components/primeblocks/blocks/blocks.component.html
src/app/demo/components/primeblocks/blocks/blocks.component.ts
src/app/demo/components/primeblocks/blockviewer/blockviewer.component.scss
src/app/demo/components/primeblocks/blockviewer/blockviewer.component.ts
src/app/demo/components/primeblocks/primeblocks-routing.module.ts
src/app/demo/components/primeblocks/primeblocks.module.ts
src/app/demo/components/profile/create/profilecreate-routing.module.ts
src/app/demo/components/profile/create/profilecreate.component.html
src/app/demo/components/profile/create/profilecreate.component.ts
src/app/demo/components/profile/create/profilecreate.module.ts
src/app/demo/components/profile/list/profilelist-routing.module.ts
src/app/demo/components/profile/list/profilelist.component.html
src/app/demo/components/profile/list/profilelist.component.ts
src/app/demo/components/profile/list/profilelist.module.ts
src/app/demo/components/profile/profile-routing.module.ts
src/app/demo/components/profile/profile.module.ts
src/app/demo/components/signalr/signalr.component.html
src/app/demo/components/signalr/signalr.component.spec.ts
src/app/demo/components/signalr/signalr.component.ts
src/app/demo/components/uikit/banner/banner.component.html
src/app/demo/components/uikit/banner/banner.component.scss
src/app/demo/components/uikit/banner/banner.component.spec.ts
src/app/demo/components/uikit/banner/banner.component.ts
src/app/demo/components/uikit/button/buttondemo-routing.module.ts
src/app/demo/components/uikit/button/buttondemo.component.html
src/app/demo/components/uikit/button/buttondemo.component.ts
src/app/demo/components/uikit/button/buttondemo.module.ts
src/app/demo/components/uikit/charts/chartsdemo-routing.module.ts
src/app/demo/components/uikit/charts/chartsdemo.component.html
src/app/demo/components/uikit/charts/chartsdemo.component.ts
src/app/demo/components/uikit/charts/chartsdemo.module.ts
src/app/demo/components/uikit/file/filedemo-routing.module.ts
src/app/demo/components/uikit/file/filedemo.component.html
src/app/demo/components/uikit/file/filedemo.component.ts
src/app/demo/components/uikit/file/filedemo.module.ts
src/app/demo/components/uikit/floatlabel/floatlabeldemo-routing.module.ts
src/app/demo/components/uikit/floatlabel/floatlabeldemo.component.html
src/app/demo/components/uikit/floatlabel/floatlabeldemo.component.ts
src/app/demo/components/uikit/floatlabel/floatlabeldemo.module.ts
src/app/demo/components/uikit/formlayout/formlayoutdemo-routing.module.ts
src/app/demo/components/uikit/formlayout/formlayoutdemo.component.html
src/app/demo/components/uikit/formlayout/formlayoutdemo.component.ts
src/app/demo/components/uikit/formlayout/formlayoutdemo.module.ts
src/app/demo/components/uikit/input/inputdemo-routing.module.ts
src/app/demo/components/uikit/input/inputdemo.component.html
src/app/demo/components/uikit/input/inputdemo.component.ts
src/app/demo/components/uikit/input/inputdemo.module.ts
src/app/demo/components/uikit/invalid/invalidstatedemo-routing.module.ts
src/app/demo/components/uikit/invalid/invalidstatedemo.component.html
src/app/demo/components/uikit/invalid/invalidstatedemo.component.ts
src/app/demo/components/uikit/invalid/invalidstatedemo.module.ts
src/app/demo/components/uikit/list/listdemo-routing.module.ts
src/app/demo/components/uikit/list/listdemo.component.html
src/app/demo/components/uikit/list/listdemo.component.ts
src/app/demo/components/uikit/list/listdemo.module.ts
src/app/demo/components/uikit/media/mediademo-routing.module.ts
src/app/demo/components/uikit/media/mediademo.component.html
src/app/demo/components/uikit/media/mediademo.component.ts
src/app/demo/components/uikit/media/mediademo.module.ts
src/app/demo/components/uikit/menus/confirmation.component.ts
src/app/demo/components/uikit/menus/menus.component.html
src/app/demo/components/uikit/menus/menus.component.ts
src/app/demo/components/uikit/menus/menus.module.ts
src/app/demo/components/uikit/menus/payment.component.ts
src/app/demo/components/uikit/menus/personal.component.ts
src/app/demo/components/uikit/menus/seat.component.ts
src/app/demo/components/uikit/messages/messagesdemo-routing.module.ts
src/app/demo/components/uikit/messages/messagesdemo.component.html
src/app/demo/components/uikit/messages/messagesdemo.component.ts
src/app/demo/components/uikit/messages/messagesdemo.module.ts
src/app/demo/components/uikit/misc/miscdemo-routing.module.ts
src/app/demo/components/uikit/misc/miscdemo.component.html
src/app/demo/components/uikit/misc/miscdemo.component.ts
src/app/demo/components/uikit/misc/miscdemo.module.ts
src/app/demo/components/uikit/overlays/overlaysdemo-routing.module.ts
src/app/demo/components/uikit/overlays/overlaysdemo.component.html
src/app/demo/components/uikit/overlays/overlaysdemo.component.ts
src/app/demo/components/uikit/overlays/overlaysdemo.module.ts
src/app/demo/components/uikit/panels/panelsdemo-routing.module.ts
src/app/demo/components/uikit/panels/panelsdemo.component.html
src/app/demo/components/uikit/panels/panelsdemo.component.ts
src/app/demo/components/uikit/panels/panelsdemo.module.ts
src/app/demo/components/uikit/placeholder-card/placeholder-card.component.html
src/app/demo/components/uikit/placeholder-card/placeholder-card.component.scss
src/app/demo/components/uikit/placeholder-card/placeholder-card.component.ts
src/app/demo/components/uikit/site-selector/site-selector.component.html
src/app/demo/components/uikit/site-selector/site-selector.component.scss
src/app/demo/components/uikit/site-selector/site-selector.component.spec.ts
src/app/demo/components/uikit/site-selector/site-selector.component.ts
src/app/demo/components/uikit/table/tabledemo-routing.module.ts
src/app/demo/components/uikit/table/tabledemo.component.html
src/app/demo/components/uikit/table/tabledemo.component.ts
src/app/demo/components/uikit/table/tabledemo.module.ts
src/app/demo/components/uikit/tree/treedemo-routing.module.ts
src/app/demo/components/uikit/tree/treedemo.component.html
src/app/demo/components/uikit/tree/treedemo.component.ts
src/app/demo/components/uikit/tree/treedemo.module.ts
src/app/demo/components/uikit/uikit-routing.module.ts
src/app/demo/components/uikit/uikit.module.ts
src/app/demo/components/utilities/colors/colors.component.html
src/app/demo/components/utilities/colors/colors.component.ts
src/app/demo/components/utilities/icons/icons.component.html
src/app/demo/components/utilities/icons/icons.component.ts
src/app/demo/components/utilities/utilities-routing.module.ts
src/app/demo/components/utilities/utilities.module.ts
src/app/demo/models/product.model.ts
src/app/demo/service/auth.service.spec.ts
src/app/demo/service/country.service.ts
src/app/demo/service/customer.service.ts
src/app/demo/service/event.service.ts
src/app/demo/service/graphql.service.ts
src/app/demo/service/icon.service.ts
src/app/demo/service/member.service.ts
src/app/demo/service/node.service.ts
src/app/demo/service/photo.service.ts
src/app/demo/service/repomix-output.txt
src/app/demo/service/urlparam.service.ts
src/app/environment.ts
src/app/graphql.module.ts
src/app/layout/api/menuchangeevent.ts
src/app/layout/app.breadcrumb.component.html
src/app/layout/app.breadcrumb.component.ts
src/app/layout/app.layout.component.html
src/app/layout/app.layout.component.ts
src/app/layout/app.layout.module.ts
src/app/layout/app.menu.component.html
src/app/layout/app.menu.component.ts
src/app/layout/app.menu.service.ts
src/app/layout/app.menuitem.component.ts
src/app/layout/app.profilesidebar.component.html
src/app/layout/app.profilesidebar.component.ts
src/app/layout/app.sidebar.component.html
src/app/layout/app.sidebar.component.ts
src/app/layout/app.topbar.component.html
src/app/layout/app.topbar.component.ts
src/app/layout/config/app.config.component.html
src/app/layout/config/app.config.component.ts
src/app/layout/config/app.config.module.ts
src/app/layout/service/app.layout.service.ts
src/index.html
src/main.ts
src/styles.scss
src/upload.php
tsconfig.app.json
tsconfig.json
tsconfig.spec.json
user-import-example.csv
user-import-template.csv

================================================================
Repository Files
================================================================

================
File: .editorconfig
================
# Editor configuration, see https://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 4
insert_final_newline = true
trim_trailing_whitespace = true

[*.ts]
quote_type = single

[*.md]
max_line_length = off
trim_trailing_whitespace = false

================
File: .gitignore
================
# === Repomix Exclusions ===
# Temporarily comment out or remove these exclusions before running repomix.
!src/assets/theme/*/*.css
!src/assets/layout/css/*.css
!src/assets/sass/theme/_vendor_extensions
!src/assets/demo/styles/badges.css
!src/assets/demo/styles/code.css
!src/assets/layout/styles/layout/preloading.css
!src/assets/layout/styles/theme/designer
!src/app/environment.ts
!src/app/environment.prod.ts
!src/app/environment.staging.ts
!src/app/environment.local.ts
# === Repomix Large File Exclusions ===
src/assets/demo/data/icons.json
src/assets/layout/styles/theme/
# === Repomix Just Nuke It All Exclusions ===
src/assets/


node_modules
node_modules

build
dist
node_modules
.DS_Store
.idea
sassdoc

# src/assets/theme/*/*.css
# src/assets/layout/css/*.css
# src/assets/sass/theme/_vendor_extensions

# compiled output
/dist
/tmp
/out-tsc

# dependencies
/node_modules

# profiling files
chrome-profiler-events.json
speed-measure-plugin.json

# IDEs and editors
/.idea
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# IDE - VSCode
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json

# misc
/.angular/cache
/.sass-cache
/connect.lock
/coverage
/libpeerconnection.log
npm-debug.log
yarn-error.log
testem.log
/typings

# System Files
.DS_Store
Thumbs.db

# Compiled files
# theme.css
# layout.css
# src/assets/demo/styles/badges.css
# src/assets/demo/styles/code.css
# src/assets/layout/styles/layout/preloading.css
# src/assets/layout/styles/theme/designer

# src/app/environment.ts
# src/app/environment.prod.ts
# src/app/environment.staging.ts
# src/app/environment.local.ts

#amplify-do-not-edit-begin
amplify/\#current-cloud-backend
amplify/.config/local-*
amplify/logs
amplify/mock-data
amplify/mock-api-resources
amplify/backend/amplify-meta.json
amplify/backend/.temp
build/
dist/
node_modules/
aws-exports.js
awsconfiguration.json
amplifyconfiguration.json
amplifyconfiguration.dart
amplify-build-config.json
amplify-gradle-config.json
amplifytools.xcconfig
.secret-*
**.sample
#amplify-do-not-edit-end

================
File: amplify.yml
================
version: 1
frontend:
  phases:
    preBuild:
      commands:
        - npm ci
    build:
      commands:
        - npm run build
  artifacts:
    baseDirectory: /dist/apollo-ng
    files:
      - '**/*'
  cache:
    paths: []

================
File: amplify/.config/project-config.json
================
{
  "whyContinueWithGen1": "Prefer not to answer",
  "projectName": "apollongcognito",
  "version": "3.1",
  "frontend": "javascript",
  "javascript": {
    "framework": "angular",
    "config": {
      "SourceDir": "src",
      "DistributionDir": "dist",
      "BuildCommand": "npm.cmd run-script build",
      "StartCommand": "ng serve"
    }
  },
  "providers": [
    "awscloudformation"
  ]
}

================
File: amplify/backend/backend-config.json
================
{}

================
File: amplify/backend/tags.json
================
[
  {
    "Key": "user:Stack",
    "Value": "{project-env}"
  },
  {
    "Key": "user:Application",
    "Value": "{project-name}"
  }
]

================
File: amplify/backend/types/amplify-dependent-resources-ref.d.ts
================
export type AmplifyDependentResourcesAttributes = {}

================
File: amplify/cli.json
================
{
  "features": {
    "graphqltransformer": {
      "addmissingownerfields": true,
      "improvepluralization": false,
      "validatetypenamereservedwords": true,
      "useexperimentalpipelinedtransformer": true,
      "enableiterativegsiupdates": true,
      "secondarykeyasgsi": true,
      "skipoverridemutationinputtypes": true,
      "transformerversion": 2,
      "suppressschemamigrationprompt": true,
      "securityenhancementnotification": false,
      "showfieldauthnotification": false,
      "usesubusernamefordefaultidentityclaim": true,
      "usefieldnameforprimarykeyconnectionfield": false,
      "enableautoindexquerynames": true,
      "respectprimarykeyattributesonconnectionfield": true,
      "shoulddeepmergedirectiveconfigdefaults": false,
      "populateownerfieldforstaticgroupauth": true,
      "subscriptionsinheritprimaryauth": false
    },
    "frontend-ios": {
      "enablexcodeintegration": true
    },
    "auth": {
      "enablecaseinsensitivity": true,
      "useinclusiveterminology": true,
      "breakcirculardependency": true,
      "forcealiasattributes": false,
      "useenabledmfas": true
    },
    "codegen": {
      "useappsyncmodelgenplugin": true,
      "usedocsgeneratorplugin": true,
      "usetypesgeneratorplugin": true,
      "cleangeneratedmodelsdirectory": true,
      "retaincasestyle": true,
      "addtimestampfields": true,
      "handlelistnullabilitytransparently": true,
      "emitauthprovider": true,
      "generateindexrules": true,
      "enabledartnullsafety": true,
      "generatemodelsforlazyloadandcustomselectionset": false
    },
    "appsync": {
      "generategraphqlpermissions": true
    },
    "latestregionsupport": {
      "pinpoint": 1,
      "translate": 1,
      "transcribe": 1,
      "rekognition": 1,
      "textract": 1,
      "comprehend": 1
    },
    "project": {
      "overrides": true
    }
  },
  "debug": {
    "shareProjectConfig": true
  }
}

================
File: amplify/hooks/README.md
================
# Command Hooks

Command hooks can be used to run custom scripts upon Amplify CLI lifecycle events like pre-push, post-add-function, etc.

To get started, add your script files based on the expected naming convention in this directory.

Learn more about the script file naming convention, hook parameters, third party dependencies, and advanced configurations at https://docs.amplify.aws/cli/usage/command-hooks

================
File: amplify/README.md
================
# Getting Started with Amplify CLI
This directory was generated by [Amplify CLI](https://docs.amplify.aws/cli).

Helpful resources:
- Amplify documentation: https://docs.amplify.aws.
- Amplify CLI documentation: https://docs.amplify.aws/cli.
- More details on this folder & generated files: https://docs.amplify.aws/cli/reference/files.
- Join Amplify's community: https://amplify.aws/community/.

================
File: amplify/team-provider-info.json
================
{
  "dev": {
    "awscloudformation": {
      "AuthRoleName": "amplify-apollongcognito-dev-babf7-authRole",
      "UnauthRoleArn": "arn:aws:iam::594648579241:role/amplify-apollongcognito-dev-babf7-unauthRole",
      "AuthRoleArn": "arn:aws:iam::594648579241:role/amplify-apollongcognito-dev-babf7-authRole",
      "Region": "us-east-1",
      "DeploymentBucketName": "amplify-apollongcognito-dev-babf7-deployment",
      "UnauthRoleName": "amplify-apollongcognito-dev-babf7-unauthRole",
      "StackName": "amplify-apollongcognito-dev-babf7",
      "StackId": "arn:aws:cloudformation:us-east-1:594648579241:stack/amplify-apollongcognito-dev-babf7/0582e8a0-e3f6-11ef-8edc-0affeffaa74f",
      "AmplifyAppId": "dkazn3y7o4jjs"
    }
  }
}

================
File: angular.json
================
{
    "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
    "version": 1,
    "newProjectRoot": "projects",
    "projects": {
        "apollo-ng": {
            "projectType": "application",
            "schematics": {
                "@schematics/angular:component": {
                    "style": "scss"
                }
            },
            "root": "",
            "sourceRoot": "src",
            "prefix": "app",
            "architect": {
                "build": {
                    "builder": "@angular-devkit/build-angular:browser",
                    "options": {
                        "outputPath": "dist/apollo-ng",
                        "index": "src/index.html",
                        "main": "src/main.ts",
                        "polyfills": [
                            "zone.js"
                        ],
                        "tsConfig": "tsconfig.app.json",
                        "inlineStyleLanguage": "scss",
                        "assets": [
                            "src/favicon.ico",
                            "src/assets"
                        ],
                        "styles": [
                            "src/styles.scss"
                        ],
                        "scripts": [],
                        "baseHref": "/"
                    },
                    "configurations": {
                        "production": {
                            "budgets": [
                                {
                                    "type": "initial",
                                    "maximumWarning": "1mb",
                                    "maximumError": "5mb"
                                },
                                {
                                    "type": "anyComponentStyle",
                                    "maximumWarning": "2kb",
                                    "maximumError": "4kb"
                                }
                            ],
                            "outputHashing": "none"
                        },
                        "development": {
                            "buildOptimizer": false,
                            "optimization": false,
                            "vendorChunk": true,
                            "extractLicenses": false,
                            "sourceMap": true,
                            "namedChunks": true
                        }
                    },
                    "defaultConfiguration": "production"
                },
                "serve": {
                    "builder": "@angular-devkit/build-angular:dev-server",
                    "configurations": {
                        "production": {
                            "buildTarget": "apollo-ng:build:production"
                        },
                        "development": {
                            "buildTarget": "apollo-ng:build:development"
                        }
                    },
                    "defaultConfiguration": "development"
                },
                "extract-i18n": {
                    "builder": "@angular-devkit/build-angular:extract-i18n",
                    "options": {
                        "buildTarget": "apollo-ng:build"
                    }
                },
                "test": {
                    "builder": "@angular-devkit/build-angular:karma",
                    "options": {
                        "polyfills": [
                            "zone.js",
                            "zone.js/testing"
                        ],
                        "tsConfig": "tsconfig.spec.json",
                        "karmaConfig": "karma.conf.js",
                        "inlineStyleLanguage": "scss",
                        "assets": [
                            "src/favicon.ico",
                            "src/assets"
                        ],
                        "styles": [
                            "src/styles.scss"
                        ],
                        "scripts": []
                    }
                }
            }
        }
    },
    "cli": {
      "analytics": false
    }
}

================
File: CHANGELOG.md
================
# Changelog

# 17.0.0
**Implemented New Features and Enhancements:**
- Upgrade to PrimeNG 17
- Upgrade to Angular 17

# 16.0.0
- Upgrade to PrimeNG 16
- Upgrade to Angular 16
- Update theme files

# 15.1.0

- General style adjustments

**Implemented New Features and Enhancements:**
- New Drawer menu
- Horizontal & Slim & SlimPlus menu scroll

# 15.0.1
**Fixed bugs:**
- Fixed an issue where checkbox does not reflect the actual value of task list in kanban sidebar.

## 15.0.0
**Migration Guide**
- Upgrade to PrimeNG 15
- Upgrade to Angular 15
  
**Implemented New Features and Enhancements:**
- Update to PrimeNG 15
- Update to Angular 15

## 14.0.3
- Tooltips for slim menu

## 14.0.2
- Updated UI kit demos
- Updated PrimeNG
- Enabled lint

## 14.0.1
- Refactored app.layout.component.ts
- Fixed issue where double click is necessary to hide a kanban card overlay menu.

## 14.0.0
**Migration Guide**
- Upgrade to PrimeNG 14
- Upgrade to Angular 14
  
**Implemented New Features and Enhancements:**
- Update to PrimeNG 14
- Update to Angular 14

## 13.2.0
- Remastered from the ground up with a new design

================
File: package.json
================
{
  "name": "apollo-ng",
  "version": "17.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test",
    "lint": "ng lint"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^17.0.5",
    "@angular/cdk": "^17.0.2",
    "@angular/common": "^17.0.5",
    "@angular/compiler": "^17.0.5",
    "@angular/core": "^17.0.5",
    "@angular/forms": "^17.0.5",
    "@angular/material": "^17.3.10",
    "@angular/platform-browser": "^17.0.5",
    "@angular/platform-browser-dynamic": "^17.0.5",
    "@angular/router": "^17.0.5",
    "@apollo/client": "^3.11.10",
    "@aws-amplify/auth": "^6.10.2",
    "@aws-amplify/ui-angular": "^5.0.36",
    "@fullcalendar/angular": "^6.0.3",
    "@fullcalendar/core": "^6.0.3",
    "@fullcalendar/daygrid": "^6.0.3",
    "@fullcalendar/interaction": "^6.0.3",
    "@fullcalendar/timegrid": "^6.0.3",
    "@microsoft/signalr": "^8.0.7",
    "apollo-angular": "^7.2.1",
    "apollo-link-ws": "^1.0.20",
    "aws-amplify": "^6.12.3",
    "chart.js": "^3.3.2",
    "graphql": "^16.9.0",
    "primeflex": "^3.3.1",
    "primeicons": "6.0.1",
    "primeng": "17.2.0",
    "quill": "^1.3.7",
    "rxjs": "~7.8.1",
    "tslib": "^2.5.0",
    "zone.js": "~0.14.0"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^17.0.5",
    "@angular/cli": "^17.0.5",
    "@angular/compiler-cli": "^17.0.5",
    "@types/jasmine": "~4.3.1",
    "jasmine-core": "~4.6.0",
    "karma": "~6.4.2",
    "karma-chrome-launcher": "~3.2.0",
    "karma-coverage": "~2.2.0",
    "karma-jasmine": "~5.1.0",
    "karma-jasmine-html-reporter": "~2.1.0",
    "typescript": "~5.2.2"
  }
}

================
File: README.md
================
# Apollo Angular Template with AWS Cognito

## Overview
This repository serves as a base template for an Angular application using the [Apollo Angular Template](https://www.primefaces.org/apollo-ng) integrated with AWS Cognito for authentication.

## Prerequisites
Before setting up the project, ensure you have the following installed:
- Node.js (Latest LTS version recommended)
- Angular CLI
- AWS CLI (For managing Cognito resources)

## Project Setup
1. Clone the repository and navigate to the project directory:
   
   ```sh
   git clone <repository-url>
   cd <repository-directory>
   ```

2. Install dependencies:
   
   ```sh
   npm install
   ```

3. Start the development server:
   
   ```sh
   ng serve
   ```

## AWS Cognito Setup
To use AWS Cognito for authentication, follow these steps:

### 1. Create a User Pool
1. Go to the [AWS Cognito Console](https://console.aws.amazon.com/cognito/).
2. Click **Create user pool**.
3. Configure the **Sign-in method** (e.g., email, username).
4. Set up **Password policies** and MFA (optional).
5. Create an **App client** without a secret.
6. Save the **User Pool ID** and **App Client ID** for later use.

### 2. Add a Custom Attribute
AWS Cognito does not allow custom attributes to be added from the web console after pool creation. Use the AWS CLI:

```sh
aws cognito-idp add-custom-attributes --user-pool-id <your-user-pool-id> --custom-attributes Name=license_key,AttributeDataType=String,Mutable=true
```

### 3. Update Authentication Flow
1. Configure the authentication settings in `src/environments/environment.ts`:

```typescript
export const environment = {
  production: false,
  cognito: {
    userPoolId: '<your-user-pool-id>',
    userPoolWebClientId: '<your-app-client-id>',
    region: 'us-east-1'
  }
};
```

2. Update your `main.ts` file to initialize AWS Amplify:

```typescript
import { Amplify } from 'aws-amplify';
import { environment } from './environments/environment';

Amplify.configure({
  Auth: {
    region: environment.cognito.region,
    userPoolId: environment.cognito.userPoolId,
    userPoolWebClientId: environment.cognito.userPoolWebClientId,
  }
});
```

## Importing Users via CSV
AWS Cognito allows importing users into a User Pool via a CSV file. Follow these steps:

1. **Download the CSV Template:**
   - Go to your Cognito User Pool in the AWS Console.
   - Navigate to **Users** > **Import users** > **Create an import job**.
   - Download the [user-import-template.csv](https://github.com/mwarnermatt-git/apollo-ng-cognito/blob/main/user-import-template.csv) file.

2. **Prepare the CSV File:**
   - Ensure the header remains unchanged.
   - Populate only the required fields: `cognito:username`, `email`, and `email_verified`.
   - Example:
     
     ```csv
     profile,address,birthdate,gender,preferred_username,updated_at,website,picture,phone_number,phone_number_verified,zoneinfo,custom:license_key,locale,email,email_verified,given_name,family_name,middle_name,name,nickname,cognito:mfa_enabled,cognito:username
     ,,,,,,,,,,,,user1@example.com,TRUE,,,,,,FALSE,user1
     ,,,,,,,,,,,,user2@example.com,TRUE,,,,,,FALSE,user2
     ```
   - Replace `<your-user-pool-id>` with the correct ID.

3. **Upload the CSV File:**
   - Go to **Users** > **Import users** > **Create an import job**.
   - Select your CSV file and submit the job.
   - Monitor the process in Amazon CloudWatch Logs.

[Download CSV Template](user-import-template.csv)

## Running the Application
After configuring Cognito, start the application:

```sh
ng serve
```

You can now sign up, sign in, and retrieve user attributes, including `license_key`.

## Additional Features
- User registration and login using Cognito
- Fetching user attributes dynamically, including custom attributes
- Integration with Apollo Angular theme for UI consistency

## Future Enhancements
- Implement password recovery flow
- Enable multi-factor authentication (MFA)
- Add role-based access control (RBAC) via Cognito Groups

## Troubleshooting
If you encounter issues with authentication, verify:
- Your Cognito configuration in `environment.ts`
- That your App Client **does not have a secret**
- The AWS CLI command syntax for adding attributes

For further details, refer to the [AWS Amplify Authentication Docs](https://docs.amplify.aws/gen1/angular/build-a-backend/auth/).

================
File: src/app/app-routing.module.ts
================
import { NgModule } from '@angular/core';
import { ExtraOptions, RouterModule, Routes } from '@angular/router';

const routerOptions: ExtraOptions = {
    anchorScrolling: 'enabled'
};

const routes: Routes = [
    // Redirect empty path to auth/login
    { path: '', redirectTo: 'auth/login', pathMatch: 'full' },

    // This is your dashboard route which will be loaded once the user is authenticated (TODO: add auth guards)
    {
        path: 'dashboard',  // note: changed from '' to 'dashboard'
        loadChildren: () => import('./demo/components/dashboards/dashboards.module').then(m => m.DashboardsModule)
    },

    // Lazy load the auth module.  The AuthModule should import AuthRoutingModule.
    { path: 'auth', data: { breadcrumb: 'Auth' }, loadChildren: () => import('./demo/components/auth/auth.module').then(m => m.AuthModule) },
    { path: 'landing', loadChildren: () => import('./demo/components/landing/landing.module').then(m => m.LandingModule) },
    { path: 'notfound', loadChildren: () => import('./demo/components/notfound/notfound.module').then(m => m.NotfoundModule) },
    { path: '**', redirectTo: '/notfound' }
];

@NgModule({
    imports: [RouterModule.forRoot(routes, routerOptions)],
    exports: [RouterModule]
})
export class AppRoutingModule { }

================
File: src/app/app.component.html
================
<router-outlet></router-outlet>

================
File: src/app/app.component.ts
================
import { Component, OnInit } from '@angular/core';
import { PrimeNGConfig } from 'primeng/api';

@Component({
    selector: 'app-root',
    templateUrl: './app.component.html',
})
export class AppComponent implements OnInit {
    constructor(private primengConfig: PrimeNGConfig) {}

    ngOnInit(): void {
        this.primengConfig.ripple = true;
    }
}

================
File: src/app/app.module.ts
================
// app.module.ts
import { NgModule } from '@angular/core';
import { LocationStrategy, PathLocationStrategy } from '@angular/common';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { AppLayoutModule } from './layout/app.layout.module';
import { GraphQLModule } from './graphql.module';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    AppRoutingModule,
    AppLayoutModule,
    GraphQLModule
  ],
  providers: [
    { provide: LocationStrategy, useClass: PathLocationStrategy }
  ],
  bootstrap: [AppComponent]
})
export class AppModule { }

================
File: src/app/demo/api/blog.ts
================
export interface Blog {
    name?: string;
    coverImage?: any;
    profile?: string;
    title?: string;
    description?: string;
    comment?: number;
    share?: number;
    day?: string;
    month?: string;
    code?: string;
    status?: string;
    tags?: string[];
}

export interface Comment {
    image?: string;
    name?: string;
    date?: string;
    description?: string;
}

================
File: src/app/demo/api/chat.ts
================
import { Message } from './message';

export interface Chat {
    userId: number;
    name: string;
    photoUrl?: string;
    messages: Message[];
    status: string;
}

================
File: src/app/demo/api/customer.ts
================
export interface Country {
    name?: string;
    code?: string;
}

export interface Representative {
    name?: string;
    image?: string;
}

export interface Customer {
    id?: number;
    name?: string;
    country?: Country;
    company?: string;
    date?: string;
    status?: string;
    activity?: number;
    representative?: Representative;
}

================
File: src/app/demo/api/file.ts
================
export interface File {
    name?: string;
    image?: string;
    date?: string;
    fileSize?: string;
}

================
File: src/app/demo/api/folder.ts
================
export interface Folder {
    name: string;
    icon: string;
    size: string;
}

================
File: src/app/demo/api/image.ts
================
export interface Image {
    previewImageSrc: string;
    thumbnailImageSrc: string;
    alt: string;
    title: string;
}

================
File: src/app/demo/api/kanban.ts
================
export interface KanbanCard {
    id: string;
    title?: string;
    description?: string;
    progress?: number;
    assignees?: Assignee[];
    attachments?: number;
    comments?: Comment[];
    startDate?: string;
    dueDate?: string;
    completed?: boolean;
    priority?: Object;
    taskList: TaskList;
}

export interface KanbanList {
    listId: string;
    title?: string;
    cards: KanbanCard[];
}

export interface Comment {
    id?: string;
    name: string;
    image?: string;
    text: string;
}

export interface ListName {
    listId?: string;
    title: string;
}

export interface TaskList {
    id?: string;
    title: string;
    tasks: Task[];
}

export interface Task {
    text: string;
    completed: boolean;
}

export interface Assignee {
    name: string;
    image: string;
}

================
File: src/app/demo/api/mail.ts
================
export interface Mail {
    id?: any;
    from?: string;
    to?: string;
    email?:string;
    image?: string;
    date?: string;
    message?: string;
    title?: string;
    important?: boolean;
    starred?: boolean;
    trash?: boolean;
    archived?: boolean;
    spam?: boolean;
    sent?: boolean;
}

================
File: src/app/demo/api/member.ts
================
export interface Member {
    id?: number;
    name?: string;
    image?: string;
}

================
File: src/app/demo/api/message.ts
================
export interface Message {
    text: string;
    ownerId: number,
    createdAt: number;
}

================
File: src/app/demo/api/metric.ts
================
export interface Metric {
    title: string;
    icon: string;
    fieldColor: string;
    color: string;
    files: string;
    fileSize: string;
    items: object;
}

================
File: src/app/demo/api/product.ts
================
interface InventoryStatus {
    label: string;
    value: string;
}
export interface Product {
    id?: string;
    code?: string;
    name?: string;
    description?: string;
    price?: number;
    quantity?: number;
    inventoryStatus?: InventoryStatus;
    category?: string;
    image?: string;
    rating?: number;
}

================
File: src/app/demo/api/task.ts
================
export interface Task {
    id: number;
    name?: string;
    description?: string;
    startDate?: Date;
    endDate?: Date;
    members?: Member[];
    completed?: boolean;
    status?: string;
    comments?: number;
    attachments?: number;
}

export interface Member {
    name?: string;
    image?: string;
}

export interface DialogConfig {
    visible: boolean;
    header?: string;
    newTask?: boolean;
}

================
File: src/app/demo/api/user.ts
================
import { Message } from './message';

export interface User {
    id: number;
    name: string;
    image: string;
    status: string;
    messages: Message[];
    lastSeen: string;
}

================
File: src/app/demo/components/apps/apps-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';

@NgModule({
    imports: [RouterModule.forChild([
        { path: 'calendar', data: { breadcrumb: 'Calendar' }, loadChildren: () => import('./calendar/calendar.app.module').then(m => m.CalendarAppModule) },
        { path: 'tasklist', data: { breadcrumb: 'Task List' }, loadChildren: () => import('./tasklist/tasklist.app.module').then(m => m.TaskListAppModule) },
        { path: 'chat', data: { breadcrumb: 'Chat' }, loadChildren: () => import('./chat/chat.app.module').then(m => m.ChatAppModule) },
        { path: 'files', data: { breadcrumb: 'Files' }, loadChildren: () => import('./file/file.app.module').then(m => m.FileAppModule) },
        { path: 'mail', data: { breadcrumb: 'Mail' }, loadChildren: () => import('./mail/mail.app.module').then(m => m.MailAppModule) },
        { path: 'kanban', data: { breadcrumb: 'Kanban' }, loadChildren: () => import('./kanban/kanban.app.module').then(m => m.KanbanAppModule) },
        { path: 'blog', data: { breadcrumb: 'Blog' }, loadChildren: () => import('./blog/blog.app.module').then(m => m.BlogAppModule) },
        { path: '**', redirectTo: '/notfound' }
    ])],
    exports: [RouterModule]
})
export class AppsRoutingModule { }

================
File: src/app/demo/components/apps/apps.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { AppsRoutingModule } from './apps-routing.module';

@NgModule({
  imports: [
    CommonModule,
    AppsRoutingModule
  ],
  declarations: []
})
export class AppsModule { }

================
File: src/app/demo/components/apps/blog/blog-detail/blog-comments/blog-comments.component.html
================
<div class="flex align-items-center mb-4 font-bold">
    <span class="text-xl text-900 mr-4">Comments</span>
    <span class="inline-flex align-items-center justify-content-center w-2rem h-2rem border-1 surface-border border-round">{{comments.length}}</span>
</div>
<ul class="list-none p-0 m-0">
    <li *ngFor="let comment of comments" class="flex p-3 mb-3 border-1 surface-border border-round">
        <img [src]="comment.image" class="w-3rem h-3rem mr-3 flex-shrink-0" />
        <div>
            <span class="font-semibold text-900">{{comment.name}}</span>
            <p class="font-semibold text-600 m-0 text-sm">{{comment.date}}</p>
            <p class="line-height-3 mb-0 my-3">{{comment.description}}</p>
        </div>
    </li>
</ul>

================
File: src/app/demo/components/apps/blog/blog-detail/blog-comments/blog-comments.component.ts
================
import { Component, Input } from '@angular/core';
import { Comment } from 'src/app/demo/api/blog';

@Component({
    selector: 'app-blog-comments',
    templateUrl: './blog-comments.component.html'
})
export class BlogCommentsComponent {

    @Input() comments: Comment[] = [];

    rowCount = 3;

}

================
File: src/app/demo/components/apps/blog/blog-detail/blog-detail-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { BlogDetailComponent } from './blog-detail.component';

@NgModule({
    imports: [RouterModule.forChild([
        { path: '', component: BlogDetailComponent }
    ])],
    exports: [RouterModule]
})
export class BlogDetailRoutingModule { }

================
File: src/app/demo/components/apps/blog/blog-detail/blog-detail.component.html
================
<div class="card">
    <div class="flex justify-content-between flex-column-reverse md:flex-row align-items-center">
        <div>
            <div class="text-xl text-900 mb-4 mt-4 md:mt-0 text-center md:text-left font-semibold md:pr-4">
                How To Get Started Tutorial
            </div>
            <div class="flex flex-wrap justify-content-center md:justify-content-start gap-3">
                <span class="inline-flex align-items-center py-2 px-3 font-medium border-1 surface-border border-round">
                    <i class="pi pi-clock text-primary mr-2"></i>
                    <span class="text-900">2d ago</span>
                </span>
                <span class="inline-flex align-items-center py-2 px-3 font-medium border-1 surface-border border-round">
                    <i class="pi pi-comments text-primary mr-2"></i>
                    <span class="text-900">24</span>
                </span>
                <span class="inline-flex align-items-center py-2 px-3 font-medium border-1 surface-border border-round">
                    <i class="pi pi-eye text-primary mr-2"></i>
                    <span class="text-900">124</span>
                </span>
            </div>
        </div>
        <div class="flex flex-column align-items-center justify-content-center">
            <img class="w-4rem h-4rem" src="assets/demo/images/avatar/circle/avatar-f-2@2x.png" />
            <span class="mt-3 font-bold text-900 text-center white-space-nowrap">Jane Cooper</span>
        </div>
    </div>
    <div class="text-center my-6">
        <img src="assets/demo/images/blog/blogdetail.png" alt="Image" class="w-full">
    </div>
    <div class="text-2xl text-900 mb-4 font-semibold">Sodales massa, morbi convallis</div>
    <p class="line-height-3 text-lg mb-4">
        First, a disclaimer - the entire process of writing a blog post often takes more than a couple of hours, even if
        you can type eighty words per minute and your writing skills are sharp. From the seed of the idea to finally
        hitting “Publish,” you might spend several days or maybe even a week “writing” a blog post, but it's important
        to spend those vital hours planning your post and even thinking about Your Post(yes, thinking counts as working
        if you're a blogger) before you actually write it.
    </p>
    <p class="line-height-3 text-lg mb-4">
        There's an old maxim that states, “No fun for the writer, no fun for the reader.”No matter what industry you're
        working in, as a blogger, you should live and die by this statement.
    </p>
    <p class="line-height-3 text-lg mb-4">
        Before you do any of the following steps, be sure to pick a topic that actually interests you. Nothing - and I
        mean NOTHING- will kill a blog post more effectively than a lack of enthusiasm from the writer. You can tell
        when a writer is bored by their subject, and it's so cringe-worthy it's a little embarrassing.
    </p>
    <p class="line-height-3 text-lg mb-4">
        I can hear your objections already. “But Dan, I have to blog for a cardboard box manufacturing company.” I feel
        your pain, I really do. During the course of my career, I've written content for dozens of clients in some
        less-than-thrilling industries (such as financial regulatory compliance and corporate housing), but the hallmark
        of a professional blogger is the ability to write well about any topic, no matter how dry it may be. Blogging is
        a lot easier, however, if you can muster at least a little enthusiasm for the topic at hand.</p>
    <div class="text-2xl text-900 mb-4 font-semibold">
        Commodo ultrices orci tempus et fermentum, pellentesque ultricies.
    </div>
    <ul class="text-xl p-0 my-0 ml-5">
        <li class="mb-3 line-height-3">Fermentum neque odio laoreet morbi sit. Venenatis in quam ut non.</li>
        <li class="mb-3 line-height-3">Enim in porta facilisi a vulputate fermentum, morbi. Consequat, id praesent tristique euismod pellentesque.</li>
        <li class="mb-3 line-height-3">Implements This is an external link</li>
        <li class="line-height-3">Scelerisque ultricies tincidunt lectus faucibus non morbi sed nibh varius. Quam a, habitasse egestaseleifend.</li>
    </ul>
    <div class="flex flex-column sm:flex-row my-8 w-full gap-3">
        <button pButton pRipple icon="pi pi-twitter" class="p-button-secondary" label="Twitter"></button>
        <button pButton pRipple icon="pi pi-facebook" class="p-button-secondary" label="Facebook"></button>
        <button [routerLink]="['/apps/blog/edit']" pButton pRipple icon="pi pi-pencil" class="sm:ml-auto" label="Edit Post"></button>
    </div>
    <app-blog-comments [comments]="comments"></app-blog-comments>
    <app-new-comment></app-new-comment>
</div>

================
File: src/app/demo/components/apps/blog/blog-detail/blog-detail.component.ts
================
import { Component } from '@angular/core';
import { Comment } from 'src/app/demo/api/blog';

@Component({
    templateUrl: './blog-detail.component.html'
})
export class BlogDetailComponent {

    comments: Comment[] = [
        {
            image: "assets/demo/images/avatar/circle/avatar-f-3@2x.png",
            name: "Courtney Henry",
            date: "03 February 2022",
            description: "Reprehenderit ut voluptas sapiente ratione nostrum est."
        },
        {
            image: "assets/demo/images/avatar/circle/avatar-f-1@2x.png",
            name: "Esther Howard",
            date: "03 February 2022",
            description: "How likely are you to recommend our company to your friends and family ?"
        },
        {
            image: "assets/demo/images/avatar/circle/avatar-f-4@2x.png",
            name: "Darlene Robertson",
            date: "03 February 2022",
            description: "Quo quia sit nihil nemo doloremque et."
        },
        {
            image: "assets/demo/images/avatar/circle/avatar-f-5@2x.png",
            name: "Esther Howard",
            date: "03 February 2022",
            description: "How likely are you to recommend our company to your friends and family ?"
        }
    ];

}

================
File: src/app/demo/components/apps/blog/blog-detail/blog-detail.module.ts
================
import { CommonModule } from "@angular/common";
import { NgModule } from "@angular/core";
import { ButtonModule } from "primeng/button";
import { InputTextModule } from "primeng/inputtext";
import { InputTextareaModule } from "primeng/inputtextarea";
import { BlogCommentsComponent } from "./blog-comments/blog-comments.component";
import { NewCommentComponent } from "./new-comment/new-comment.component";
import { BlogDetailComponent } from "./blog-detail.component";
import { BlogDetailRoutingModule } from "./blog-detail-routing.module";
import { RippleModule } from "primeng/ripple";

@NgModule({
    imports: [
        CommonModule,
        BlogDetailRoutingModule,
        ButtonModule,
        InputTextModule,
        InputTextareaModule,
        RippleModule
    ],
    declarations: [BlogCommentsComponent, NewCommentComponent, BlogDetailComponent]
})
export class BlogDetailModule { }

================
File: src/app/demo/components/apps/blog/blog-detail/new-comment/new-comment.component.html
================
<div class="text-xl text-900 mb-4 font-bold mt-8">Post a Comment</div>

<div class="mb-3 p-fluid">
    <span class="p-input-icon-left">
        <i class="pi pi-user"></i>
        <input type="text" pInputText placeholder="Name" />
    </span>
</div>
<div class="mb-3 p-fluid">
    <span class="p-input-icon-left">
        <i class="pi pi-envelope"></i>
        <input type="text" pInputText placeholder="Email" />
    </span>
</div>
<div class="mb-3 p-fluid">
    <textarea rows="6" pInputTextarea placeholder="Your comment"></textarea>
</div>
<div class="flex justify-content-end">
    <button pButton pRipple label="Post Comment"></button>
</div>

================
File: src/app/demo/components/apps/blog/blog-detail/new-comment/new-comment.component.ts
================
import { Component } from '@angular/core';

@Component({
    selector: 'app-new-comment',
    templateUrl: './new-comment.component.html'
})
export class NewCommentComponent { }

================
File: src/app/demo/components/apps/blog/blog-edit/blog-edit-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { BlogEditComponent } from './blog-edit.component';


@NgModule({
    imports: [RouterModule.forChild([
        { path: '', component: BlogEditComponent }
    ])],
    exports: [RouterModule]
})
export class BlogEditRoutingModule { }

================
File: src/app/demo/components/apps/blog/blog-edit/blog-edit.component.html
================
<div class="card">
    <span class="block text-900 font-bold text-xl mb-4">Create a new post</span>
    <div class="grid">
        <div class="col-12 lg:col-8">
            <p-fileUpload #fileUploader name="demo[]" url="./upload.php" (onUpload)="onUpload($event)" [customUpload]="true" [multiple]="true" (onSelect)="onUpload($event)" accept="image/*" [showUploadButton]="false" [showCancelButton]="false" [auto]="true" styleClass="border-1 surface-border surface-card p-0 border-round mb-4">
                <ng-template pTemplate="content">
                    <div class="h-20rem m-1 border-round">
                        <div *ngIf="!image" class="flex flex-column w-full h-full justify-content-center align-items-center cursor-pointer" (click)="fileUploader.advancedFileInput.nativeElement.click()">
                            <i class="pi pi-fw pi-file text-4xl text-primary"></i>
                            <span class="block font-semibold text-900 text-lg mt-3">Drop or select a cover image</span>
                        </div>
                        <div *ngIf="image" class="w-full h-full relative border-round p-0">
                            <img [src]="image.objectURL" class="w-full h-full border-round" alt="blog cover">
                            <button pButton pRipple type="button" icon="pi pi-times" class="p-button-rounded p-button-primary text-sm absolute justify-content-center align-items-center" style="top: -10px; right: -10px;" (click)="$event.stopPropagation(); removeImage()"></button>
                        </div>
                    </div>
                </ng-template>
            </p-fileUpload>
            <div class="flex flex-column p-fluid">
                <div class="mb-4">
                    <input type="text" pInputText placeholder="Title"/>
                </div>
                <div class="mb-4">
                    <textarea rows="6" pInputTextarea placeholder="Content" [autoResize]="true"></textarea>
                </div>
                <p-editor [style]="{'height':'250px'}"></p-editor>
            </div>
        </div>
        <div class="col-12 lg:col-4">
            <div class="border-1 surface-border border-round mb-4">
                <span class="text-900 font-bold block border-bottom-1 surface-border p-3">Publish</span>
                <div class="p-3">
                    <div class="surface-100 p-3 flex align-items-center border-round">
                        <span class="text-900 font-semibold mr-3">Status:</span>
                        <span class="font-medium">Draft</span>
                        <button pButton pRipple type="button" icon="pi pi-fw pi-pencil" class="p-button-rounded p-button-text ml-auto"></button>
                    </div>
                </div>
                <div class="p-3">
                    <div class="surface-100 p-3 flex align-items-center border-round">
                        <span class="text-900 font-semibold mr-3">Visibility:</span>
                        <span class="font-medium">Private</span>
                        <button pButton pRipple type="button" icon="pi pi-fw pi-pencil" class="p-button-rounded p-button-text ml-auto"></button>
                    </div>
                </div>
            </div>
            <div class="border-1 surface-border border-round mb-4">
                <span class="text-900 font-bold block border-bottom-1 surface-border p-3">Tags</span>
                <div class="p-3 flex gap-2">
                    <p-chip *ngFor="let tag of tags; let i = index;" [label]="tag"></p-chip>
                </div>
            </div>
            <div class="border-1 surface-border border-round p-fluid mb-4">
                <span class="text-900 font-bold block border-bottom-1 surface-border p-3">Meta</span>
                <div class="p-3">
                    <div class="mb-4">
                        <input type="text" pInputText placeholder="Title" />
                    </div>
                    <div>
                        <textarea rows="6" pInputTextarea placeholder="Description" [autoResize]="true"></textarea>
                    </div>
                </div>
            </div>
            <div class="flex justify-content-between gap-3">
                <button pButton pRipple class="p-button-danger flex-1 p-button-outlined" label="Discard" icon="pi pi-fw pi-trash"></button>
                <button pButton pRipple class="p-button-primary flex-1" label="Publish" icon="pi pi-fw pi-check"></button>
            </div>
        </div>
    </div>
</div>

================
File: src/app/demo/components/apps/blog/blog-edit/blog-edit.component.scss
================
:host ::ng-deep {
    .p-fileupload {
        padding: 0;

        .p-fileupload-buttonbar {
            display: none;
        }

        .p-fileupload-content {
            border: 0 none;
            padding: 0;
        }

        .p-fileupload-row {
            display: none;
        }

        .p-progressbar {
            display: none;
        }
    }
}

================
File: src/app/demo/components/apps/blog/blog-edit/blog-edit.component.ts
================
import { Component, ElementRef, QueryList, ViewChildren } from '@angular/core';
import { File } from 'src/app/demo/api/file';

@Component({
    templateUrl: './blog-edit.component.html',
    styleUrls: ['./blog-edit.component.scss']
})
export class BlogEditComponent {

    @ViewChildren('buttonEl') buttonEl!: QueryList<ElementRef>;

    image: any;

    objectURL: string = '';

    tags: string[] = ['Software', 'Web'];

    onUpload(event: any) {
        let file = event.files[0];
        file.objectURL = file.objectURL ? file.objectURL : this.objectURL;

        if (!file.objectURL) {
            return;
        }
        else {
            this.image = file;
            this.objectURL = file.objectURL;
        }
    }

    removeImage() {
        this.image = null;
    }

}

================
File: src/app/demo/components/apps/blog/blog-edit/blog-edit.module.ts
================
import { CommonModule } from "@angular/common";
import { NgModule } from "@angular/core";
import { ButtonModule } from "primeng/button";
import { ChipModule } from "primeng/chip";
import { EditorModule } from "primeng/editor";
import { FileUploadModule } from "primeng/fileupload";
import { InputTextModule } from "primeng/inputtext";
import { InputTextareaModule } from "primeng/inputtextarea";
import { RippleModule } from "primeng/ripple";
import { BlogEditRoutingModule } from "./blog-edit-routing.module";
import { BlogEditComponent } from "./blog-edit.component";

@NgModule({
    imports: [
        CommonModule,
        ButtonModule,
        InputTextModule,
        InputTextareaModule,
        FileUploadModule,
        RippleModule,
        ChipModule,
        EditorModule,
        BlogEditRoutingModule
    ],
    declarations: [BlogEditComponent]
})
export class BlogEditModule { }

================
File: src/app/demo/components/apps/blog/blog-list/blog-list-card/blog-list-card.component.html
================
<div class="p-3" *ngIf="blog">
    <div class="surface-100 cursor-pointer z-index border-round" (click)="navigateToDetail()">
        <div class="relative">
            <img [src]="blog.coverImage" class="w-full" />
            <img [src]="blog.profile" class="flex absolute w-4rem h-4rem" style="bottom: -1.5rem; right: 1.5rem">
        </div>
        <div class="p-3">
            <div class="text-900 font-semibold text-xl mb-3">{{blog.title}}</div>
            <p class="text-700 text-lg mt-0 mb-5">{{blog.description}}</p>

            <div class="flex flex-wrap gap-2 align-items-center justify-content-between">
                <span class="flex align-items-center text-900">
                    <i class="pi pi-comment mr-2"></i>
                    <span class="font-semibold">{{blog.comment}}</span>
                </span>
                <span class="flex align-items-center text-900">
                    <i class="pi pi-share-alt mr-2"></i>
                    <span class="font-semibold">{{blog.share}}</span>
                </span>
                <span class="flex align-items-center text-900">
                    <i class="pi pi-clock mr-2"></i>
                    <span class="font-semibold mr-1">{{blog.day}}</span>
                    <span class="font-semibold">{{blog.month}}</span>
                </span>
            </div>
        </div>
    </div>
</div>

================
File: src/app/demo/components/apps/blog/blog-list/blog-list-card/blog-list-card.component.ts
================
import { Component, Input } from '@angular/core';
import { Router } from '@angular/router';
import { Blog } from 'src/app/demo/api/blog';

@Component({
    selector: 'app-blog-list-card',
    templateUrl: './blog-list-card.component.html',
})
export class BlogListCardComponent {
    @Input() blog!: Blog;

    constructor(private router: Router) {}

    navigateToDetail(): void {
        this.router.navigateByUrl('/apps/blog/detail');
    }
}

================
File: src/app/demo/components/apps/blog/blog-list/blog-list-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { BlogListComponent } from './blog-list.component';

@NgModule({
    imports: [RouterModule.forChild([
        { path: '', component: BlogListComponent }
    ])],
    exports: [RouterModule]
})
export class BlogListRoutingModule { }

================
File: src/app/demo/components/apps/blog/blog-list/blog-list.component.html
================
<div class="card">
    <p-dataView [value]="totalBlogs" [paginator]="true" [rows]="3" filterBy="title" [sortField]="sortField" [sortOrder]="-1" layout="grid">
        <ng-template pTemplate="header">
            <div class="flex flex-column sm:flex-row sm:align-items-center sm:justify-content-between gap-3">
                <span class="text-xl text-900 font-semibold">Articles</span>
                <p-dropdown [options]="sortOptions" [(ngModel)]="sortField" placeholder="Sort by" styleClass="w-full md:w-15rem"></p-dropdown>
            </div>
        </ng-template>
        
        <ng-template let-blogs pTemplate="gridItem">
            <div class="grid grid-nogutter">
                <div class="col-12 md:col-4" *ngFor="let blog of blogs">
                    <app-blog-list-card [blog]="blog"></app-blog-list-card>
                </div>
            </div>
        </ng-template>
    </p-dataView>
</div>

<div class="card">
    <div class="surface-section px-4 py-8 md:px-6 lg:px-8">
        <div class="font-bold text-5xl text-900 mb-3">Recent Articles</div>
        <div class="text-700 text-xl line-height-3 mb-5">Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</div>
        <div class="grid nogutter">
            <div class="col-12 lg:col-4 p-4">
                <div class="border-top-3 border-blue-600"></div>
                <div class="text-blue-600 font-medium my-2">Animals</div>
                <div class="text-900 font-medium text-xl line-height-3 mb-4">Why Earth's most beloved creatures are headed toward extinction</div>
                <div class="font-sm text-700 line-height-3">
                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
                </div>
                <div class="flex mt-4">
                    <p-avatar image="assets/demo/images/avatar/circle/avatar-f-1.png" shape="circle"></p-avatar>
                    <div class="ml-2">
                        <div class="text-xs font-bold text-900 mb-1">Anna Miles</div>
                        <div class="text-xs flex align-items-center text-700">
                            <i class="pi pi-calendar mr-1 text-xs"></i>
                            <span>Apr 9, 2021</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-12 lg:col-4 p-4">
                <div class="border-top-3 border-pink-600"></div>
                <div class="text-pink-600 font-medium my-2">Oxygen</div>
                <div class="text-900 font-medium text-xl line-height-3 mb-4">Only one-third of tropical rainforests remain intact, study says </div>
                <div class="font-sm text-700 line-height-3">
                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
                </div>
                <div class="flex mt-4">
                    <p-avatar image="assets/demo/images/avatar/circle/avatar-f-2.png" shape="circle"></p-avatar>
                    <div class="ml-2">
                        <div class="text-xs font-bold text-900 mb-1">Arlene Miles</div>
                        <div class="text-xs flex align-items-center text-700">
                            <i class="pi pi-calendar mr-1 text-xs"></i>
                            <span>Apr 9, 2021</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-12 lg:col-4 p-4">
                <div class="border-top-3 border-orange-600"></div>
                <div class="text-orange-600 font-medium my-2">Nature</div>
                <div class="text-900 font-medium text-xl line-height-3 mb-4">Does planting a tree really offset your carbon footprint?</div>
                <div class="font-sm text-700 line-height-3">
                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
                </div>
                <div class="flex mt-4">
                    <p-avatar image="assets/demo/images/avatar/circle/avatar-f-3.png" shape="circle"></p-avatar>
                    <div class="ml-2">
                        <div class="text-xs font-bold text-900 mb-1">Diane Miles</div>
                        <div class="text-xs flex align-items-center text-700">
                            <i class="pi pi-calendar mr-1 text-xs"></i>
                            <span>Apr 9, 2021</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

================
File: src/app/demo/components/apps/blog/blog-list/blog-list.component.ts
================
import { Component } from '@angular/core';
import { SelectItem } from 'primeng/api';
import { Blog } from 'src/app/demo/api/blog';

@Component({
    templateUrl: './blog-list.component.html',
})
export class BlogListComponent {
    sortOptions: SelectItem[] = [
        { label: 'Most Shared', value: 'share' },
        { label: 'Most Commented', value: 'comment' },
    ];

    sortField: string = '';

    totalBlogs: Blog[] = [
        {
            coverImage: 'assets/demo/images/blog/blog-1.png',
            profile: 'assets/demo/images/avatar/circle/avatar-f-1.png',
            title: 'Blog',
            description:
                'Ornare egestas pellentesque facilisis in a ultrices erat diam metus integer sed',
            comment: 2,
            share: 7,
            day: '15',
            month: 'October',
        },
        {
            coverImage: 'assets/demo/images/blog/blog-2.png',
            profile: 'assets/demo/images/avatar/circle/avatar-f-2.png',
            title: 'Magazine',
            description:
                'Magna iaculis sagittis, amet faucibus scelerisque non ornare non in penatibus ',
            comment: 5,
            share: 1,
            day: '20',
            month: 'Nov',
        },
        {
            coverImage: 'assets/demo/images/blog/blog-3.png',
            profile: 'assets/demo/images/avatar/circle/avatar-m-1.png',
            title: 'Science',
            description:
                'Purus mattis mi, libero maecenas volutpat quis a morbi arcu pharetra, mollis',
            comment: 2,
            share: 6,
            day: '23',
            month: 'Oct',
        },
        {
            coverImage: 'assets/demo/images/blog/blog-4.png',
            profile: 'assets/demo/images/avatar/circle/avatar-m-1.png',
            title: 'Blog',
            description:
                'Curabitur vitae sit justo facilisi nec, sodales proin aliquet libero volutpat nunc',
            comment: 5,
            share: 5,
            day: '14',
            month: 'Dec',
        },
        {
            coverImage: 'assets/demo/images/blog/blog-5.png',
            profile: 'assets/demo/images/avatar/circle/avatar-f-3.png',
            title: 'Magazine',
            description:
                'Id eget arcu suspendisse ullamcorper dolor lobortis dui et morbi penatibus quam',
            comment: 4,
            share: 1,
            day: '05',
            month: 'Apr',
        },
        {
            coverImage: 'assets/demo/images/blog/blog-6.png',
            profile: 'assets/demo/images/avatar/circle/avatar-m-3.png',
            title: 'Science',
            description:
                'Sagittis hendrerit laoreet dignissim sed auctor sit pellentesque vel diam iaculis et',
            comment: 1,
            share: 3,
            day: '12',
            month: 'Nov',
        },
    ];
}

================
File: src/app/demo/components/apps/blog/blog-list/blog-list.module.ts
================
import { CommonModule } from "@angular/common";
import { NgModule } from "@angular/core";
import { FormsModule } from "@angular/forms";
import { AvatarModule } from 'primeng/avatar';
import { DataViewModule } from 'primeng/dataview';
import { DropdownModule } from 'primeng/dropdown';
import { BlogListCardComponent } from "./blog-list-card/blog-list-card.component";
import { BlogListComponent } from "./blog-list.component";
import { BlogListRoutingModule } from "./blog-list-routing.module";

@NgModule({
    imports: [
        CommonModule,
        FormsModule,
        AvatarModule,
        BlogListRoutingModule,
        DataViewModule,
        DropdownModule
    ],
    declarations: [BlogListComponent, BlogListCardComponent]
  })
  export class BlogListModule { }

================
File: src/app/demo/components/apps/blog/blog.app-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';

@NgModule({
    imports: [RouterModule.forChild([
        { path: 'list', data: { breadcrumb: 'List' }, loadChildren: () => import('./blog-list/blog-list.module').then(m => m.BlogListModule) },
        { path: 'detail', data: { breadcrumb: 'Detail' }, loadChildren: () => import('./blog-detail/blog-detail.module').then(m => m.BlogDetailModule) },
        { path: 'edit', data: { breadcrumb: 'Edit' }, loadChildren: () => import('./blog-edit/blog-edit.module').then(m => m.BlogEditModule) },
        { path: '**', redirectTo: '/notfound' }
    ])],
    exports: [RouterModule]
})
export class BlogAppRoutingModule { }

================
File: src/app/demo/components/apps/blog/blog.app.module.ts
================
import { CommonModule } from "@angular/common";
import { NgModule } from "@angular/core";
import { BlogAppRoutingModule } from "./blog.app-routing.module";

@NgModule({
    imports: [
        CommonModule,
        BlogAppRoutingModule
    ]
})
export class BlogAppModule { }

================
File: src/app/demo/components/apps/calendar/calendar.app-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { CalendarAppComponent } from './calendar.app.component';

@NgModule({
    imports: [RouterModule.forChild([
        { path: '', component: CalendarAppComponent }
    ])],
    exports: [RouterModule]
})
export class CalendarAppRoutingModule { }

================
File: src/app/demo/components/apps/calendar/calendar.app.component.html
================
<div class="card">
    <full-calendar [options]="calendarOptions"></full-calendar>

    <p-dialog #dd [(visible)]="showDialog" [breakpoints]="{'960px': '75vw', '640px': '90vw'}" [style]="{width: '36rem'}" [modal]="true" [closable]="true" (onHide)="view = ''">
        <ng-template pTemplate="header">
            <span class="text-900 font-semibold text-xl">{{view === 'display' ? changedEvent.title : view === 'new' ? 'New Event' : 'Edit Event'}}</span>
        </ng-template>
        <ng-template pTemplate="content">
            <div *ngIf="view === 'display'">
                <span class="text-900 font-semibold block mb-2">Description</span>
                <span class="block mb-3">{{changedEvent.description}}</span>

                <div class="grid">
                    <div class="col-6">
                        <div class="text-900 font-semibold mb-2">Start</div>
                        <p class="flex align-items-center m-0">
                            <i class="pi pi-fw pi-clock text-700 mr-2"></i>
                            <span>{{changedEvent.start.toISOString().slice(0,10)}}</span>
                        </p>
                    </div>
                    <div class="col-6">
                        <div class="text-900 font-semibold mb-2">End</div>
                        <p class="flex align-items-center m-0">
                            <i class="pi pi-fw pi-clock text-700 mr-2"></i>
                            <span>{{changedEvent.end.toISOString().slice(0,10)}}</span>
                        </p>
                    </div>
                    <div class="col-12">
                        <div class="text-900 font-semibold mb-2">Location</div>
                        <p class="flex align-items-center m-0">
                            <i class="pi pi-fw pi-clock text-700 mr-2"></i>
                            <span>{{changedEvent.location}}</span>
                        </p>
                    </div>
                    <div class="col-12">
                        <div class="text-900 font-semibold mb-2">Color</div>
                        <p class="flex align-items-center m-0">
                            <span class="inline-flex flex-shrink-0 w-1rem h-1rem mr-2 border-circle" [style.backgroundColor]="changedEvent.tag.color"></span>
                            <span>{{changedEvent.tag.name}}</span>
                        </p>
                    </div>
                </div>
            </div>
            <div *ngIf="view !== 'display'">
                <div class="grid p-fluid formgrid">
                    <div class="col-12 md:col-6 field">
                        <label for="title" class="text-900 font-semibold">Title</label>
                        <span class="p-input-icon-left">
                            <i class="pi pi-pencil"></i>
                            <input id="title" type="text" pInputText placeholder="Title" [(ngModel)]="changedEvent.title" />
                        </span>
                    </div>
                    <div class="col-12 md:col-6 field">
                        <label for="location" class="text-900 font-semibold">Location</label>
                        <span class="p-input-icon-left">
                            <i class="pi pi-map-marker"></i>
                            <input id="location" type="text" pInputText placeholder="Location" [(ngModel)]="changedEvent.location" />
                        </span>
                    </div>
                    <div class="col-12 field">
                        <label for="description" class="text-900 font-semibold">Event Description</label>
                        <textarea id="description" type="text" pInputTextarea [rows]="5" [(ngModel)]="changedEvent.description" style="resize: none"></textarea>
                    </div>

                    <div class="col-12 md:col-6 field">
                        <label for="start" class="text-900 font-semibold">Start Date</label>
                        <p-calendar [appendTo]="dd" dateFormat="mm-dd-yy" [maxDate]="changedEvent.end" [showTime]="true" [required]="true" inputId="start" [(ngModel)]="changedEvent.start"></p-calendar>
                    </div>
                    <div class="col-12 md:col-6 field">
                        <label for="start" class="text-900 font-semibold">End Date</label>
                        <p-calendar [appendTo]="dd" dateFormat="mm-dd-yy" [minDate]="changedEvent.start" [showTime]="true" [required]="true" inputId="end" [(ngModel)]="changedEvent.end"></p-calendar>
                    </div>
                    <div class="col-12 field">
                        <label for="company-color" class="text-900 font-semibold">Color</label>
                        <p-dropdown inputId="company-color" [appendTo]="dd" [options]="tags" [(ngModel)]="changedEvent.tag" optionLabel="name">
                            <ng-template pTemplate="selectedItem">
                                <div *ngIf="changedEvent.tag" class="flex align-items-center">
                                    <div class="flex-shrink-0 w-1rem h-1rem mr-2 border-circle" [style.backgroundColor]="changedEvent.tag.color"></div>
                                    <div>{{changedEvent.tag.name}}</div>
                                </div>
                            </ng-template>
                            <ng-template let-tag pTemplate="item">
                                <div class="flex align-items-center">
                                    <div class="flex-shrink-0 w-1rem h-1rem mr-2 border-circle" [style.backgroundColor]="tag.color"></div>
                                    <div>{{tag.name}}</div>
                                </div>
                            </ng-template>
                        </p-dropdown>
                    </div>
                </div>
            </div>
        </ng-template>

        <ng-template pTemplate="footer">
            <button pButton *ngIf="view === 'display'" label="Edit" icon="pi pi-pencil" (click)="onEditClick()"></button>
            <button pButton *ngIf="view === 'new' || view === 'edit'" label="Save" icon="pi pi-check" (click)="handleSave()" [disabled]="!changedEvent.start || !changedEvent.end"></button>
        </ng-template>
    </p-dialog>
</div>

================
File: src/app/demo/components/apps/calendar/calendar.app.component.scss
================
@media screen and (max-width: 768px) {
    :host ::ng-deep {
        .fc .fc-toolbar {
            justify-content: center;
        }

        .fc-header-toolbar {
            display: flex;
            align-items: center;
            gap: 1rem;
            justify-content: center;
            text-align: center;
            flex-wrap: wrap;

            .fc-toolbar-chunk:nth-child(2) {
                width: 100%;
                order: 0;
            }

            .fc-toolbar-chunk:nth-child(1) {
                order: 1;
            }

            .fc-toolbar-chunk:nth-child(3) {
                order: 2;
                
                .fc-button-group {
                    .fc-today-button {
                        margin-left: 2rem;
                    }
                }
            }
        }
    }
}

================
File: src/app/demo/components/apps/calendar/calendar.app.component.ts
================
import { Component, OnInit } from '@angular/core';
import { EventService } from 'src/app/demo/service/event.service';
// @fullcalendar plugins
import dayGridPlugin from '@fullcalendar/daygrid';
import interactionPlugin from '@fullcalendar/interaction';
import timeGridPlugin from '@fullcalendar/timegrid';

@Component({
    templateUrl: './calendar.app.component.html',
    styleUrls: ['./calendar.app.component.scss']
})
export class CalendarAppComponent implements OnInit {

    events: any[] = [];

    today: string = '';

    calendarOptions: any = {
        initialView: 'dayGridMonth'
    };

    showDialog: boolean = false;

    clickedEvent: any = null;

    dateClicked: boolean = false;

    edit: boolean = false;

    tags: any[] = [];

    view: string = '';

    changedEvent: any;

    constructor(private eventService: EventService) { }

    ngOnInit(): void {
        this.today = '2022-05-11';

        this.eventService.getEvents().then(events => {
            this.events = events;
            this.calendarOptions = { ...this.calendarOptions, ...{ events: events } };
            this.tags = this.events.map(item => item.tag);
        });

        this.calendarOptions = {
            plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],
            height: 720,
            initialDate: this.today,
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'dayGridMonth,timeGridWeek,timeGridDay'
            },
            editable: true,
            selectable: true,
            selectMirror: true,
            dayMaxEvents: true,
            eventClick: (e: MouseEvent) => this.onEventClick(e),
            select: (e: MouseEvent) => this.onDateSelect(e)
        };
    }

    onEventClick(e: any) {
        this.clickedEvent = e.event;
        let plainEvent = e.event.toPlainObject({ collapseExtendedProps: true, collapseColor: true });
        this.view = 'display';
        this.showDialog = true;

        this.changedEvent = { ...plainEvent, ...this.clickedEvent };
        this.changedEvent.start = this.clickedEvent.start;
        this.changedEvent.end = this.clickedEvent.end ? this.clickedEvent.end : this.clickedEvent.start;
    }

    onDateSelect(e: any) {
        this.view = 'new'
        this.showDialog = true;
        this.changedEvent = { ...e, title: null, description: null, location: null, backgroundColor: null, borderColor: null, textColor: null, tag: { color: null, name: null } };
    }

    handleSave() {
        if (!this.validate()) {
            return;
        }
        else {
            this.showDialog = false;
            this.clickedEvent = { ...this.changedEvent, backgroundColor: this.changedEvent.tag.color, borderColor: this.changedEvent.tag.color, textColor: '#212121' };

            if (this.clickedEvent.hasOwnProperty('id')) {
                this.events = this.events.map(i => i.id.toString() === this.clickedEvent.id.toString() ? i = this.clickedEvent : i);
            } else {
                this.events = [...this.events, { ...this.clickedEvent, id: Math.floor(Math.random() * 10000) }];
            }
            this.calendarOptions = { ...this.calendarOptions, ...{ events: this.events } };
            this.clickedEvent = null;
        }

    }

    onEditClick() {
        this.view = 'edit';
    }

    delete() {
        this.events = this.events.filter(i => i.id.toString() !== this.clickedEvent.id.toString());
        this.calendarOptions = { ...this.calendarOptions, ...{ events: this.events } };
        this.showDialog = false;
    }

    validate() {
        let { start, end } = this.changedEvent;
        return start && end;
    }

}

================
File: src/app/demo/components/apps/calendar/calendar.app.module.ts
================
import {  NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { CalendarAppRoutingModule } from './calendar.app-routing.module';
import { CalendarAppComponent } from './calendar.app.component';
import { CalendarModule } from 'primeng/calendar';
import { DialogModule } from 'primeng/dialog';
import { ButtonModule } from 'primeng/button';
import { RippleModule } from 'primeng/ripple';
import { InputTextModule } from 'primeng/inputtext';
import { InputTextareaModule } from 'primeng/inputtextarea';
import { DropdownModule } from 'primeng/dropdown';
import { ToastModule } from 'primeng/toast'
import { EventService } from 'src/app/demo/service/event.service';
import { FullCalendarModule } from '@fullcalendar/angular';
@NgModule({
    imports: [
        CommonModule,
        FormsModule,
        CalendarAppRoutingModule,
        FullCalendarModule,
        DialogModule,
        InputTextareaModule,
        ButtonModule,
        CalendarModule,
        InputTextModule,
        DropdownModule,
        ToastModule,
        RippleModule
    ],
    declarations: [CalendarAppComponent],
    providers: [EventService]
})
export class CalendarAppModule { }

================
File: src/app/demo/components/apps/chat/chat-box/chat-box.component.html
================
<div class="flex flex-column h-full">
    <div class="flex align-items-center border-bottom-1 surface-border p-3 lg:p-6">
        <div class="relative flex align-items-center mr-3">
            <img src="assets/demo/images/avatar/{{user.image}}" alt="user.name" class="w-4rem h-4rem border-circle shadow-4">
            <span class="w-1rem h-1rem border-circle border-2 surface-border absolute bottom-0 right-0" [ngClass]="{'bg-green-400': user.status === 'active', 'bg-red-400': user.status === 'busy', 'bg-yellow-400': user.status === 'away'}"></span>
        </div>
        <div class="mr-2">
            <span class="text-900 font-semibold block">{{user.name}}</span>
            <span class="text-700">Last active 1 hour ago</span>
        </div>
        <div class="flex align-items-center ml-auto">
            <button pButton pRipple type="button" icon="pi pi-phone" class="p-button-rounded p-button-outlined p-button-secondary mr-3"></button>
            <button pButton pRipple type="button" icon="pi pi-ellipsis-v" class="p-button-rounded p-button-outlined p-button-secondary"></button>
        </div>
    </div>
    <div class="p-3 md:px-4 lg:px-6 lg:py-4 mt-2 overflow-y-auto" style="max-height: 53vh;" #chatWindow [scrollTop]="chatWindow.scrollHeight">
        <div *ngFor="let message of user.messages">
            <div *ngIf="message.ownerId !== 123" class="grid grid-nogutter mb-4">
                <div class="mr-3 mt-1">
                    <img src="assets/demo/images/avatar/{{user.image}}" alt="user.name" class="w-3rem h-3rem border-circle shadow-4">
                </div>
                <div class="col mt-3">
                    <p class="text-900 font-semibold mb-3">{{user.name}}</p>
                    <span class="text-700 inline-block font-medium border-1 surface-border p-3 white-space-normal border-round" style="word-break: break-word; max-width:80%;">{{message.text}}</span>
                    <p class="text-700 mt-3">{{parseDate(message.createdAt)}}<i class="pi pi-check ml-2 text-green-400"></i></p>
                </div>
            </div>

            <div *ngIf="message.ownerId === defaultUserId" class="grid grid-nogutter mb-4">
                <div class="col mt-3 text-right">
                    <span class="inline-block text-left font-medium border-1 surface-border bg-primary-100 text-primary-900 p-3 white-space-normal border-round" style="word-break: break-word; max-width:80%;">{{message.text}}</span>
                    <p class="text-700 mt-3">{{parseDate(message.createdAt)}} <i class="pi pi-check ml-2 text-green-400"></i></p>
                </div>
            </div>
        </div>
    </div>
    <div class="p-3 md:p-4 lg:p-6 flex flex-column sm:flex-row align-items-center mt-auto border-top-1 surface-border gap-3">
        <input id="message" type="text" pInputText placeholder="Type a message" class="flex-1 w-full sm:w-auto border-round" [(ngModel)]="textContent" (keydown.enter)="sendMessage()"/>
        <div class="flex w-full sm:w-auto gap-3">
            <button pRipple class="p-button p-button-secondary w-full sm:w-auto justify-content-center text-xl" (click)="op.toggle($event)">😀</button>
            <button pButton pRipple label="Send" icon="pi pi-send" class="w-full sm:w-auto" (click)="sendMessage()"></button>
        </div>
    </div>
</div>

<p-overlayPanel #op styleClass="w-full sm:w-30rem">
    <ng-template pTemplate>
        <button *ngFor="let emoji of emojis;" pButton pRipple (click)="op.hide(); onEmojiSelect(emoji)" type="button" [label]="emoji" class="p-2 p-button-text text-2xl"></button>
    </ng-template>
</p-overlayPanel>

================
File: src/app/demo/components/apps/chat/chat-box/chat-box.component.ts
================
import { Component, OnInit, Input, ChangeDetectionStrategy } from '@angular/core';
import { Message } from 'src/app/demo/api/message';
import { User } from 'src/app/demo/api/user';
import { ChatService } from '../service/chat.service';

@Component({
    selector: 'app-chat-box',
    templateUrl: './chat-box.component.html',
    changeDetection: ChangeDetectionStrategy.OnPush
})
export class ChatBoxComponent implements OnInit {

    defaultUserId: number = 123;

    message!: Message;

    textContent: string = '';

    uploadedFiles: any[] = [];

    emojis = [
        '😀', '😃', '😄', '😁', '😆', '😅', '😂', '🤣', '😇', '😉', '😊', '🙂', '🙃', '😋', '😌', '😍', '🥰', '😘', '😗', '😙', '😚', '🤪', '😜', '😝', '😛',
        '🤑', '😎', '🤓', '🧐', '🤠', '🥳', '🤗', '🤡', '😏', '😶', '😐', '😑', '😒', '🙄', '🤨', '🤔', '🤫', '🤭', '🤥', '😳', '😞', '😟', '😠', '😡', '🤬', '😔',
        '😟', '😠', '😡', '🤬', '😔', '😕', '🙁', '😬', '🥺', '😣', '😖', '😫', '😩', '🥱', '😤', '😮', '😱', '😨', '😰', '😯', '😦', '😧', '😢', '😥', '😪', '🤤'
    ];

    @Input() user!: User;

    constructor(private chatService: ChatService) { }

    setMessage() {
        if (this.user) {
            let filteredMessages = this.user.messages.filter(m => m.ownerId !== this.defaultUserId);
            this.message = filteredMessages[filteredMessages.length - 1];
        }
    }

    ngOnInit(): void {
        this.setMessage();
    }

    sendMessage() {
        if (this.textContent == '' || this.textContent === ' ') {
            return;
        }
        else {
            let message = {
                text: this.textContent,
                ownerId: 123,
                createdAt: new Date().getTime(),
            }

            this.chatService.sendMessage(message)
            this.textContent = '';
        }
    }

    onEmojiSelect(emoji: string) {
        this.textContent += emoji;
    }

    parseDate(timestamp: number) {
        return new Date(timestamp).toTimeString().split(':').slice(0, 2).join(':');
    }
}

================
File: src/app/demo/components/apps/chat/chat-sidebar/chat-sidebar.component.html
================
<div class="flex flex-column align-items-center border-bottom-1 surface-border p-6">
    <img src="assets/demo/images/avatar/circle/avatar-f-1@2x.png" class="w-6rem h-6rem border-circle shadow-4" alt="Asiya Javayant">
    <span class="text-900 text-xl font-semibold mt-4">Asiya Javayant</span>
</div>
<div class="w-full flex row-gap-4 flex-column surface-border p-4">
    <span class="p-input-icon-left w-full">
        <i class="pi pi-search"></i>
        <input id="search" type="text" pInputText placeholder="Search" class="w-full" [(ngModel)]="searchValue" (input)="filter()"/>
    </span>
    <div class="flex flex-row gap-4 md:flex-column overflow-auto">
        <app-user-card *ngFor="let user of filteredUsers" [user]="user"></app-user-card>
    </div>
</div>

================
File: src/app/demo/components/apps/chat/chat-sidebar/chat-sidebar.component.ts
================
import { Component, OnInit } from '@angular/core';
import { User } from 'src/app/demo/api/user';
import { ChatService } from '../service/chat.service';

@Component({
    selector: 'app-chat-sidebar',
    templateUrl: './chat-sidebar.component.html'
})
export class ChatSidebarComponent implements OnInit {

    searchValue: string = '';

    users: User[] = [];

    filteredUsers: User[] = [];

    constructor(private chatService: ChatService) { }

    ngOnInit(): void {
        this.chatService.getChatData().then(data => {
            this.users = data;
            this.filteredUsers = this.users;
        });
    }

    filter() {
        let filtered: User[] = [];
        for (let i = 0; i < this.users.length; i++) {
            let user = this.users[i];
            if (user.name.toLowerCase().indexOf(this.searchValue.toLowerCase()) == 0) {
                filtered.push(user)
            }
        }

        this.filteredUsers = [...filtered];
    }

}

================
File: src/app/demo/components/apps/chat/chat.app-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { ChatAppComponent } from './chat.app.component';

@NgModule({
	imports: [RouterModule.forChild([
		{ path: '', component: ChatAppComponent }
	])],
	exports: [RouterModule]
})
export class ChatAppRoutingModule { }

================
File: src/app/demo/components/apps/chat/chat.app.component.html
================
<div class="flex flex-column md:flex-row gap-5" style="min-height: 81vh">
    <div class="md:w-25rem card p-0">
        <app-chat-sidebar></app-chat-sidebar>
    </div>
    <div class="flex-1 card p-0">
        <app-chat-box [user]="activeUser"></app-chat-box>
    </div>
</div>

================
File: src/app/demo/components/apps/chat/chat.app.component.ts
================
import { Component, OnDestroy } from '@angular/core';
import { Subscription } from 'rxjs';
import { User } from 'src/app/demo/api/user';
import { ChatService } from './service/chat.service';

@Component({
    templateUrl: './chat.app.component.html'
})
export class ChatAppComponent implements OnDestroy {

    subscription: Subscription;

    activeUser!: User;
    
    constructor(private chatService: ChatService) { 
        this.subscription = this.chatService.activeUser$.subscribe(data => this.activeUser = data);
    }

    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}

================
File: src/app/demo/components/apps/chat/chat.app.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ChatAppRoutingModule } from './chat.app-routing.module';
import { ChatAppComponent } from './chat.app.component';
import { ChatSidebarComponent } from './chat-sidebar/chat-sidebar.component';
import { AvatarModule } from 'primeng/avatar';
import { InputTextModule } from 'primeng/inputtext';
import { ButtonModule } from 'primeng/button';
import { OverlayPanelModule } from 'primeng/overlaypanel';
import { BadgeModule } from 'primeng/badge';
import { UserCardComponent } from './user-card/user-card.component';
import { ChatBoxComponent } from './chat-box/chat-box.component';
import { ChatService } from './service/chat.service';
import { RippleModule } from 'primeng/ripple';

@NgModule({
    imports: [
        CommonModule,
        FormsModule,
        ChatAppRoutingModule,
        AvatarModule,
        InputTextModule,
        ButtonModule,
        BadgeModule,
        OverlayPanelModule,
        RippleModule
    ],
    declarations: [
        ChatSidebarComponent,
        ChatAppComponent,
        UserCardComponent,
        ChatBoxComponent
    ],
    providers: [
        ChatService
    ]
})
export class ChatAppModule { }

================
File: src/app/demo/components/apps/chat/service/chat.service.ts
================
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { Message } from 'src/app/demo/api/message';
import { User } from 'src/app/demo/api/user';

@Injectable()
export class ChatService {

    _activeUser: User = {
        "id": 1,
        "name": "Ioni Bowcher",
        "image": "ionibowcher.png",
        "status": "active",
        "messages": [
            {
                "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit",
                "ownerId": 1,
                "createdAt": 1652646338240
            },
            {
                "text": "Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua",
                "ownerId": 1,
                "createdAt": 1652646368718
            },
            {
                "text": "Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua",
                "ownerId": 123,
                "createdAt": 1652646368718
            },
        ],
        "lastSeen": "2d"
    }

    private activeUser = new BehaviorSubject<User>(this._activeUser);

    activeUser$ = this.activeUser.asObservable();

    constructor(private http: HttpClient) { }

    getChatData() {
        return this.http.get<any>('assets/demo/data/chat.json')
            .toPromise()
            .then(res => res.data as any[])
            .then(data => data);
    }

    changeActiveChat(user: User) {
        this._activeUser = user;
        this.activeUser.next(user);
    }

    sendMessage(message: Message) {
        this._activeUser.messages.push(message);
        this.activeUser.next(this._activeUser);
    }
}

================
File: src/app/demo/components/apps/chat/user-card/user-card.component.html
================
<div class="flex flex-nowrap justify-content-between align-items-center border-1 surface-border border-round p-3 cursor-pointer select-none
    hover:surface-hover transition-colors transition-duration-150" 
    (keydown.enter)="changeView(user)" (click)="changeView(user)" tabindex="0">
    <div class="flex align-items-center">
        <div class="relative md:mr-3">
            <img src="assets/demo/images/avatar/{{user.image}}" alt="user" class="w-3rem h-3rem border-circle shadow-4">
            <span class="w-1rem h-1rem border-circle border-2 surface-border absolute" [ngClass]="{'bg-green-400': user.status === 'active', 'bg-red-400': user.status === 'busy', 'bg-yellow-400': 'away'}" style="bottom: 2px; right: 2px"></span>
        </div>
        <div class="flex-column hidden md:flex">
            <span class="text-900 font-semibold block">{{user.name}}</span>
            <span class="block text-600 text-overflow-ellipsis overflow-hidden white-space-nowrap w-10rem text-sm">{{lastMessage.text}}</span>
        </div>
    </div>
    <span class="text-700 font-semibold ml-auto hidden md:inline">{{user.lastSeen}}</span>
</div>

================
File: src/app/demo/components/apps/chat/user-card/user-card.component.ts
================
import { Component, OnInit, Input } from '@angular/core';
import { Message } from 'src/app/demo/api/message';
import { User } from 'src/app/demo/api/user';
import { ChatService } from '../service/chat.service';

@Component({
    selector: 'app-user-card',
    templateUrl: './user-card.component.html'
})
export class UserCardComponent implements OnInit {

    @Input() user!: User;

    lastMessage!: Message;

    constructor(private chatService: ChatService) { }

    ngOnInit(): void {
        let filtered = this.user.messages.filter(m => m.ownerId !== 123)
        this.lastMessage = filtered[filtered.length - 1];
    }

    changeView(user: User) {
        this.chatService.changeActiveChat(user);
    }
}

================
File: src/app/demo/components/apps/file/file.app-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { FileAppComponent } from './file.app.component';

@NgModule({
    imports: [RouterModule.forChild([
        { path: '', component: FileAppComponent }
    ])],
    exports: [RouterModule]
})
export class FileAppRoutingModule { }

================
File: src/app/demo/components/apps/file/file.app.component.html
================
<div class="grid">
    <div *ngFor="let metric of metrics" class="col-12 md:col-6 lg:col-3">
        <div class="card h-full">
            <div class="flex align-items-center justify-content-between mb-3">
                <span class="text-900 text-xl font-semibold">{{metric.title}}</span>
                <div>
                    <button pButton pRipple [icon]="metric.icon" class="p-button-text p-button-sm p-button-rounded" (click)="menu.toggle($event)"></button>
                    <p-menu #menu [popup]="true" appendTo="body" [model]="menuitems"></p-menu>
                </div>
            </div>
            <div>
                <div [ngClass]="metric.color" class="border-round" style="height: 6px">
                    <div [ngClass]="metric.fieldColor" class="h-full border-round" style="width:34%"></div>
                </div>
                <div class="flex align-item-center justify-content-between">
                    <span class="text-900 mt-3 text-md font-medium">{{metric.files}}</span>
                    <span class="text-900 mt-3 text-md font-medium">{{metric.fileSize}}</span>
                </div>
            </div>
        </div>
    </div>
    <div class="col-12 md:col-5 xl:col-3">
        <div class="card">
            <div class="text-900 text-xl font-semibold mb-3">Account Storage</div>
            <p-chart type="doughnut" [plugins]="chartPlugins" id="country-chart" [data]="fileChart" [options]="fileChartOptions" [style]="{'width': '75%'}"></p-chart>
            <div class="mt-5 flex gap-3">
                <button pButton pRipple icon="pi pi-search" class="p-button-outlined flex-1" label="Details"></button>
                <button pButton pRipple icon="pi pi-upload" class="flex-1" label="Upgrade"></button>
            </div>
        </div>

        <div class="card">
            <div class="text-900 text-xl font-semibold mb-3">Categories</div>
            <ul class="list-none p-0 m-0">
                <li class="p-3 mb-3 flex align-items-center justify-content-between cursor-pointer border-round bg-indigo-50 text-indigo-900">
                    <div class="flex align-items-center">
                        <i class="pi pi-image text-2xl mr-3"></i>
                        <span class="ext-lg font-medium">Images</span>
                    </div>
                    <span class="text-lg font-bold">85</span>
                </li>
                <li class="p-3 mb-3 flex align-items-center justify-content-between cursor-pointer border-round bg-purple-50 text-purple-900">
                    <div class="flex align-items-center">
                        <i class="pi pi-file text-2xl mr-3"></i>
                        <span class="ext-lg font-medium">Documents</span>
                    </div>
                    <span class="text-lg font-bold">231</span>
                </li>
                <li class="p-3 flex align-items-center justify-content-between cursor-pointer border-round bg-teal-50 text-teal-900">
                    <div class="flex align-items-center">
                        <i class="pi pi-video text-2xl mr-3"></i>
                        <span class="ext-lg font-medium">Videos</span>
                    </div>
                    <span class="text-lg font-bold">40</span>
                </li>
            </ul>
        </div>
        
        <div class="card p-0">
            <app-file-uploader></app-file-uploader>
        </div>
    </div>
    <div class="col-12 md:col-7 xl:col-9">
        <div class="card">
            <div class="text-900 text-xl font-semibold mb-3">Folders</div>
            <div class="grid">
                <div *ngFor="let folder of folders" class="col-12 md:col-6 xl:col-4">
                    <div class="p-3 border-1 surface-border flex align-items-center justify-content-between hover:surface-100 cursor-pointer border-round">
                        <div class="flex align-items-center">
                            <i [ngClass]="folder.icon" class="text-2xl mr-3"></i>
                            <span class="text-900 text-lg font-medium">{{folder.name}}</span>
                        </div>
                        <span class="text-600 text-lg font-semibold">{{folder.size}}</span>
                    </div>
                </div>
            </div>
        </div>
        <div class="card">
            <div class="text-900 text-xl font-semibold mb-3">Recent Uploads</div>
            <p-table responsiveLayout="scroll" #dt [value]="files" [rows]="8" [paginator]="true">
                <ng-template pTemplate="header">
                    <tr>
                        <th pSortableColumn="name" style="min-width:12rem" class="white-space-nowrap">Name <p-sortIcon field="name"></p-sortIcon></th>
                        <th pSortableColumn="date" style="min-width:12rem" class="white-space-nowrap">Date <p-sortIcon field="date"></p-sortIcon></th>
                        <th pSortableColumn="fileSize" style="min-width:12rem" class="white-space-nowrap">File Size <p-sortIcon field="name"></p-sortIcon></th>
                        <th style="width:10rem"></th>
                    </tr>
                </ng-template>
                <ng-template pTemplate="body" let-file>
                    <tr>
                        <td>
                            <div class="flex align-items-center">
                                <i [class]="'text-xl text-primary mr-2 ' + file.icon"></i>
                                <span>{{file.name}}</span>
                            </div>
                        </td>
                        <td>
                            <span>{{file.date}}</span>
                        </td>
                        <td>
                            <span>{{file.fileSize}}</span>
                        </td>
                        <td class="text-center">
                            <button pButton pRipple icon="pi pi-times" class="p-button-danger p-button-text p-button-rounded mr-2"></button>
                            <button pButton pRipple icon="pi pi-search" class="p-button-text p-button-rounded"></button>
                        </td>
                    </tr>
                </ng-template>
            </p-table>
        </div>
    </div>
</div>

================
File: src/app/demo/components/apps/file/file.app.component.scss
================
:host ::ng-deep {
    .p-fileupload-content {
        border: 0 none;
    }

    .p-fileupload-row {
        display: none;
    }

    .p-progressbar{
        display: none;
    }

    .p-fileupload {
        padding: 0;
    }

    .p-fileupload-buttonbar {
        display: none;
    }
}

================
File: src/app/demo/components/apps/file/file.app.component.ts
================
import { Component, OnInit } from '@angular/core';
import { Folder } from 'src/app/demo/api/folder';
import { File } from 'src/app/demo/api/file';
import { Metric } from 'src/app/demo/api/metric';
import { FileAppService } from './service/file.app.service';
import { MenuItem } from 'primeng/api';
import { LayoutService } from 'src/app/layout/service/app.layout.service';
import { Subscription } from 'rxjs';

@Component({
    templateUrl: './file.app.component.html',
    styleUrls: ['./file.app.component.scss']
})
export class FileAppComponent implements OnInit {

    fileChart: any;

    fileChartOptions: any;

    chartPlugins: any;

    files: File[] = [];

    metrics: Metric[] = [];

    folders: Folder[] = [];

    menuitems: MenuItem[] = [];

    subscription: Subscription;

    constructor(private fileService: FileAppService, private layoutService: LayoutService) { 
        this.subscription = this.layoutService.configUpdate$.subscribe(config => {
            this.initChart();
        });
    }

    ngOnInit() {
        this.fileService.getFiles().then(data => this.files = data);
        this.fileService.getMetrics().then(data => this.metrics = data);
        this.fileService.getFoldersLarge().then(data => this.folders = data);

        this.initChart();

        this.menuitems = [
            {label: 'View', icon: 'pi pi-search'},
            {label: 'Refresh', icon: 'pi pi-refresh'}
        ]
    }

    initChart() {
        const documentStyle = getComputedStyle(document.documentElement);
        const textColor = documentStyle.getPropertyValue('--text-color');

        this.chartPlugins = [{
            beforeDraw: function (chart: any) {
                let ctx = chart.ctx;
                let width = chart.width;
                let height = chart.height;
                let fontSize = 1.50;
                let oldFill = ctx.fillStyle;

                ctx.restore();
                ctx.font = fontSize + "rem sans-serif";
                ctx.textBaseline = "middle";

                let text = "Free Space";
                let text2 = 50 + "GB / " + 80 + "GB";
                let textX = Math.round((width - ctx.measureText(text).width) / 2);
                let textY = (height + chart.chartArea.top) / 2.25;

                let text2X = Math.round((width - ctx.measureText(text).width) / 2.10);
                let text2Y = (height + chart.chartArea.top) / 1.75;

                ctx.fillStyle = chart.config.data.datasets[0].backgroundColor[0];
                ctx.fillText(text, textX, textY);
                ctx.fillText(text2, text2X, text2Y);
                ctx.fillStyle = oldFill;
                ctx.save();
            }
        }]

        this.fileChart = {
            datasets: [
                {
                    data: [300, 100],
                    backgroundColor: [
                        documentStyle.getPropertyValue('--primary-600'),
                        documentStyle.getPropertyValue('--primary-100'),
                    ],
                    hoverBackgroundColor: [
                        documentStyle.getPropertyValue('--primary-700'),
                        documentStyle.getPropertyValue('--primary-200'),
                    ],
                    borderColor: 'transparent',
                    fill: true
                }
            ]
        };

        this.fileChartOptions = {
            animation: {
                duration: 0
            },
            cutout: '90%',
            plugins: {
                legend: {
                    labels: {
                        color: textColor
                    }
                }
            }
        };
    }
}

================
File: src/app/demo/components/apps/file/file.app.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ButtonModule } from 'primeng/button';
import { RippleModule } from 'primeng/ripple';
import { TableModule } from 'primeng/table';
import { MenuModule } from 'primeng/menu';
import { FileUploadModule } from 'primeng/fileupload';
import { ChartModule } from 'primeng/chart';
import { UploaderComponent } from './uploader/uploader.component';
import { FileAppService } from './service/file.app.service';
import { ToastModule } from 'primeng/toast';
import { FileAppRoutingModule } from './file.app-routing.module';
import { FileAppComponent } from './file.app.component';

@NgModule({
    imports: [
        CommonModule,
        FileAppRoutingModule,
        FormsModule,
        ButtonModule,
        RippleModule,
        ToastModule,
        TableModule,
        MenuModule,
        FileUploadModule,
        ChartModule
    ],
    declarations: [FileAppComponent, UploaderComponent],
    providers: [FileAppService]
})
export class FileAppModule { }

================
File: src/app/demo/components/apps/file/service/file.app.service.ts
================
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { File } from 'src/app/demo/api/file';
import { Metric } from 'src/app/demo/api/metric';
import { Folder } from 'src/app/demo/api/folder';

@Injectable()
export class FileAppService {

    constructor(private http: HttpClient) { }

    getFiles() {
        return this.http.get<any>('assets/demo/data/file-management.json')
            .toPromise()
            .then(res => res.files as File[])
            .then(data => data);
    }

    getMetrics() {
        return this.http.get<any>('assets/demo/data/file-management.json')
            .toPromise()
            .then(res => res.metrics as Metric[])
            .then(data => data);
    }

    getFoldersSmall() {
        return this.http.get<any>('assets/demo/data/file-management.json')
            .toPromise()
            .then(res => res.folders_small as Folder[])
            .then(data => data);
    }

    getFoldersLarge() {
        return this.http.get<any>('assets/demo/data/file-management.json')
            .toPromise()
            .then(res => res.folders_large as Folder[])
            .then(data => data);
    }

}

================
File: src/app/demo/components/apps/file/uploader/uploader.component.html
================
<p-toast key="fu"></p-toast>
<div class="card">
    <p-fileUpload #fileUploader name="demo[]" url="./upload.php" accept="image/*" (onUpload)="onUpload($event)" [customUpload]="true"
        [multiple]="true" (onSelect)="onUpload($event)" [showUploadButton]="true"
        [showCancelButton]="false" [auto]="true" class="w-full">
        <ng-template pTemplate="content">
            <div class="w-full py-3" style="cursor: copy" (click)="fileUploader.advancedFileInput.nativeElement.click()">
                <div *ngIf="!uploadedFiles.length" class="h-full flex flex-column justify-content-center align-items-center">
                    <i class="pi pi-upload text-900 text-2xl mb-3"></i>
                    <span class="font-bold text-900 text-xl mb-3">Upload Files</span>
                    <span class="font-medium text-600 text-md text-center">Drop or select files</span>
                </div>
                <div class="flex flex-wrap gap-5" *ngIf="uploadedFiles.length">
                    <div *ngFor="let file of uploadedFiles; let i = index;" class="h-full relative w-7rem h-7rem border-3 border-transparent border-round hover:bg-primary transition-duration-100 cursor-auto" (mouseenter)="onImageMouseOver(file)" (mouseleave)="onImageMouseLeave(file)" style="padding: 1px;">
                        <img [src]="file.objectURL" [alt]="file.name" class="w-full h-full border-round shadow-2">
                        <button [id]="file.name" #buttonEl pButton pRipple type="button" icon="pi pi-times" class="p-button-rounded p-button-primary text-sm absolute justify-content-center align-items-center cursor-pointer" style="top: -10px; right: -10px; display: none;" (click)="removeImage($event, file)"></button>
                    </div>
                </div>
            </div>
        </ng-template>
    </p-fileUpload>
</div>

================
File: src/app/demo/components/apps/file/uploader/uploader.component.ts
================
import { Component, ElementRef, QueryList, ViewChildren } from '@angular/core';
import { MessageService } from 'primeng/api';

interface Image {
    name: string;
    objectURL: string;
}

@Component({
    selector: 'app-file-uploader',
    templateUrl: './uploader.component.html',
    providers: [MessageService]
})
export class UploaderComponent {

    uploadedFiles: any[] = [];

    @ViewChildren('buttonEl') buttonEl!: QueryList<ElementRef>;

    constructor(private messageService: MessageService) { }

    onUpload(event: any) {
        for (let file of event.files) {
            this.uploadedFiles.push(file);
        }

        this.messageService.add({ severity: 'success', summary: 'Success', detail: 'File uploaded successfully' });
    }

    onImageMouseOver(file: Image) {
        this.buttonEl.toArray().forEach(el => {
            el.nativeElement.id === file.name ? el.nativeElement.style.display = 'flex' : null;
        })
    }

    onImageMouseLeave(file: Image) {
        this.buttonEl.toArray().forEach(el => {
            el.nativeElement.id === file.name ? el.nativeElement.style.display = 'none' : null;
        })
    }

    removeImage(event: Event, file: any) {
        event.stopPropagation();
        this.uploadedFiles = this.uploadedFiles.filter(i => i !== file);
    }

}

================
File: src/app/demo/components/apps/kanban/kanban-card/kanban-card.component.html
================
<div [id]="card.id" class="flex surface-card flex-column w-full border-1 surface-border p-3 gap-5 hover:surface-ground cursor-pointer border-round">
    <div class="flex justify-content-between align-items-center">
        <span class="text-900 font-semibold">{{card.title ? card.title : 'Untitled'}}</span>
        <div>
            <button pButton pRipple type="button" icon="pi pi-ellipsis-v" class="p-button-rounded p-button-text p-button-secondary p-trigger" (click)="menu.toggle($event)"></button>
            <p-tieredMenu #menu [model]="menuItems" appendTo="body" [popup]="true"></p-tieredMenu>
        </div>
    </div>
    <div *ngIf="card.description" style="word-break: break-word" class="text-700">{{card.description}}</div>
    <p-progressBar *ngIf="card.taskList.tasks.length" [value]="card.progress" [showValue]="false" [style]="{'height':'.5rem'}"></p-progressBar>
    
    <div class="flex align-items-center justify-content-between flex-column md:flex-row gap-4 md:gap-0">
        <p-avatarGroup>
            <p-avatar *ngFor="let assignee of card.assignees | slice:0:3" image="assets/demo/images/avatar/{{assignee.image}}" shape="circle" styleClass="border-2 surface-border"></p-avatar>
            <p-avatar *ngIf="card.assignees && card.assignees.length > 3" label="+ {{card.assignees.length - 3}}" shape="circle" styleClass="border-2 surface-border mb-1 surface-ground"></p-avatar>
        </p-avatarGroup>
        <div *ngIf="card.attachments || card.dueDate" class="flex align-items-center gap-3">
            <span class="text-900 font-semibold" *ngIf="card.taskList.tasks.length"><i class="pi pi-check-square text-700 mr-2"></i>{{generateTaskInfo()}}</span>
            <span class="text-900 font-semibold" *ngIf="card.attachments"><i class="pi pi-paperclip text-700 mr-2"></i>{{card.attachments}}</span>
            <span class="text-900 font-semibold" *ngIf="card.dueDate"><i class="pi pi-clock text-700 mr-2"></i>{{parseDate(card.dueDate)}}</span>
        </div>
    </div>
</div>

================
File: src/app/demo/components/apps/kanban/kanban-card/kanban-card.component.ts
================
import { Component, Input, OnDestroy } from '@angular/core';
import { MenuItem } from 'primeng/api';
import { KanbanCard } from 'src/app/demo/api/kanban';
import { KanbanService } from '../service/kanban.service';
import { Subscription } from 'rxjs';

@Component({
    selector: 'app-kanban-card',
    templateUrl: './kanban-card.component.html'
})
export class KanbanCardComponent implements OnDestroy {

    @Input() card!: KanbanCard;

    @Input() listId!: string;

    menuItems: MenuItem[] = [];

    subscription: Subscription;

    constructor(private kanbanService: KanbanService) {
        this.subscription = this.kanbanService.lists$.subscribe(data => {
            let subMenu = data.map(d => ({ id: d.listId, label: d.title, command: () => this.onMove(d.listId) }));
            this.generateMenu(subMenu);
        })
    }

    parseDate(dueDate: string) {
        return new Date(dueDate).toDateString().split(' ').slice(1, 3).join(' ');
    }

    onDelete() {
        this.kanbanService.deleteCard(this.card.id, this.listId);
    }

    onCopy() {
        this.kanbanService.copyCard(this.card, this.listId);
    }

    onMove(listId: string) {
        this.kanbanService.moveCard(this.card, listId, this.listId);
    }

    generateMenu(subMenu: any[]) {
        this.menuItems = [
            { label: 'Copy card', command: () => this.onCopy() },
            { label: 'Move card', items: subMenu },
            { label: 'Delete card', command: () => this.onDelete() }
        ];
    }

    generateTaskInfo() {
        let total = this.card.taskList.tasks.length;
        let completed = this.card.taskList.tasks.filter(t => t.completed).length;
        return `${completed} / ${total}`;
    }

    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}

================
File: src/app/demo/components/apps/kanban/kanban-list/kanban-list.component.html
================
<div class="card  md:w-25rem  overflow-hidden">
    <div class="flex justify-content-between align-items-center w-full  h-3rem">
        <p-inplace #inplace [closable]="true" closeIcon="pi pi-check" styleClass="h-auto" (onActivate)="focus()">
            <ng-template pTemplate="display">
                <span class="block text-900 font-semibold mt-4 pl-2 text-lg"  pTooltip="Click to edit" style="word-break: break-word;" tooltipPosition="top">{{list.title}}</span>
            </ng-template>
            <ng-template pTemplate="content">
                <input #inputEl type="text" [value]="list.title" [(ngModel)]="list.title" pInputText class="w-10rem sm:w-15rem h-3rem text-900 text-lg" (keydown.enter)="inplace.deactivate()">
            </ng-template>
        </p-inplace>
        <div>
            <button pButton pRipple type="button" icon="pi pi-ellipsis-h" class="p-button-rounded p-button-text p-button-secondary" (click)="menu.toggle($event)"></button>
            <p-menu #menu [model]="menuItems" [popup]="true"></p-menu>
        </div>
    </div>
    <div [id]="list.listId" class="flex flex-column gap-5 overflow-y-auto  mt-4 scrollable kanban-list" cdkDropList (cdkDropListDropped)="dropCard($event)" (cdkDropListEntered)="insertHeight($event)" (cdkDropListExited)="removeHeight($event)" [cdkDropListData]="list.cards" [cdkDropListConnectedTo]="listIds" #listEl style="min-height:2rem">
        <app-kanban-card *ngFor="let card of list.cards" [card]="card" [listId]="list.listId" (click)="onCardClick($event, card)" cdkDrag cdkDragHandle [cdkDragDisabled]="isMobileDevice"></app-kanban-card>
    </div>
    <div class="px-4 mb-3 w-full mt-4 flex">
        <button pButton pRipple label="New Card" icon="pi pi-plus font-semibold" class="py-3 justify-content-center font-semibold w-full border-round" (click)="insertCard()"></button>
    </div>
</div>

================
File: src/app/demo/components/apps/kanban/kanban-list/kanban-list.component.scss
================
:host ::ng-deep {
    .p-button-label {
        flex: 0;
        white-space: nowrap;
    }

    .scrollable {
        scroll-behavior: smooth;
        max-height: 70vh;
    }
}

:host {
    ::-webkit-scrollbar {
        width: 6px;              
    }
    
    ::-webkit-scrollbar-track {
        background: transparent;
    }
    
    ::-webkit-scrollbar-thumb {
        background-color: var(--gray-500);
        border-radius: 20px;
    }
}

.cdk-drag-preview {
    box-sizing: border-box;
    border-radius: 4px;
    box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2),
        0 8px 10px 1px rgba(0, 0, 0, 0.14),
        0 3px 14px 2px rgba(0, 0, 0, 0.12);
}
  
.cdk-drag-placeholder {
    opacity: 0.25;
}

.cdk-drag-animating {
    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);
}

================
File: src/app/demo/components/apps/kanban/kanban-list/kanban-list.component.ts
================
import { Component, OnInit, Input, ElementRef, ViewChild } from '@angular/core';
import { MenuItem } from 'primeng/api';
import { KanbanCard, KanbanList } from 'src/app/demo/api/kanban';
import { KanbanAppComponent } from '../kanban.app.component';
import { KanbanService } from '../service/kanban.service';
import { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';

@Component({
    selector: 'app-kanban-list',
    templateUrl: './kanban-list.component.html',
    styleUrls: ['./kanban-list.component.scss']
})
export class KanbanListComponent implements OnInit {

    @Input() list!: KanbanList;

    @Input() listIds!: string[];

    menuItems: MenuItem[] = [];

    title: string = '';

    timeout: any = null;

    isMobileDevice: boolean = false;

    @ViewChild('inputEl') inputEl!: ElementRef;

    @ViewChild('listEl') listEl!: ElementRef;

    constructor(public parent: KanbanAppComponent, private kanbanService: KanbanService) { }

    ngOnInit(): void {
        this.isMobileDevice = this.kanbanService.isMobileDevice();

        this.menuItems = [
            {
                label: 'List actions', items: [
                    { separator: true },
                    { label: 'Copy list', command: () => this.onCopy(this.list) },
                    { label: 'Remove list', command: () =>  {
                        if (this.list.listId) {
                            this.onDelete(this.list.listId)
                        }
                    }},
                ]
            }
        ];
    }

    toggleSidebar() {
        this.parent.sidebarVisible = true;
    }

    onDelete(id: string) {
        this.kanbanService.deleteList(id);
    }

    onCopy(list: KanbanList) {
        this.kanbanService.copyList(list);
    }

    onCardClick(event: Event, card: KanbanCard) {
        const eventTarget = event.target as HTMLElement;
        if (!(eventTarget.classList.contains('p-button-icon') || eventTarget.classList.contains('p-trigger'))) {
            if (this.list.listId) {
                this.kanbanService.onCardSelect(card, this.list.listId);
            }
            this.parent.sidebarVisible = true;
        }
    }

    insertCard() {
        if (this.list.listId) {
            this.kanbanService.addCard(this.list.listId);
        }
    }

    dropCard(event: CdkDragDrop<KanbanCard[]>): void {
        if (event.previousContainer === event.container) {
            moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);
        } else {
            transferArrayItem(event.previousContainer.data, event.container.data, event.previousIndex, event.currentIndex);
        }
    }

    focus() {
        this.timeout = setTimeout(() => this.inputEl.nativeElement.focus(), 1);
    }

    insertHeight(event: any) {
        event.container.element.nativeElement.style.minHeight = '10rem';
    }

    removeHeight(event: any) {
        event.container.element.nativeElement.style.minHeight = '2rem';
    }

}

================
File: src/app/demo/components/apps/kanban/kanban-sidebar/kanban-sidebar.component.html
================
<p-sidebar *ngIf="formValue" #sidebar [(visible)]="parent.sidebarVisible" position="right" [baseZIndex]="10000" styleClass="w-full md:w-8 lg:w-6 xl:w-5" [showCloseIcon]="false">
    <ng-template pTemplate="content">
        <form (submit)="onSave($event)">
            <div class="px-4 py-6 border-bottom-1 surface-border flex align-items-center justify-content-between h-4rem">
                <p-inplace #inplace [closable]="true" closeIcon="pi pi-check" styleClass="h-3rem" (onActivate)="focus(1)" styleClass="white-space-nowrap">
                    <ng-template pTemplate="display">
                        <span class="block text-900 font-semibold text-lg pl-2" pTooltip="Click to edit">{{formValue.title ? formValue.title : 'Untitled'}}</span>
                    </ng-template>
                    <ng-template pTemplate="content">
                        <input #inputTitle type="text" name="title" [(ngModel)]="formValue.title" pInputText class="w-13rem sm:w-18rem h-3rem text-900 text-lg" (keydown.enter)="inplace.deactivate()">
                    </ng-template>
                </p-inplace>
                <div class="flex">
                    <button pButton pRipple type="button" icon="pi pi-cog" class="p-button-rounded p-button-text p-button-secondary" pTooltip="card actions" tooltipPosition="left" (click)="op.toggle($event)"></button>
                    <button pButton pRipple type="button" icon="pi pi-times" class="p-button-rounded p-button-text p-button-secondary" (click)="close()"></button>
                    <p-overlayPanel #op>
                        <ng-template pTemplate>
                            <div class="grid grid-nogutter flex-column gap-5 w-15rem">
                                <div class="col-12 flex flex-column">
                                    <span class="text-900 font-semibold block w-full border-bottom-1 surface-border pb-3 mb-2">Move to...</span>
                                    <span pRipple class="text-700 block p-2 cursor-pointer hover:surface-ground select-none border-round" *ngFor="let list of listNames" (click)="onMove(list.listId || '')">{{list.title}}</span>
                                </div>
                                <div class="col-12 flex flex-column">
                                    <span class="text-900 font-semibold block w-full border-bottom-1 surface-border pb-3 mb-2">Tasks</span>
                                    <span pRipple class="text-700 block p-2 cursor-pointer hover:surface-ground select-none border-round" (click)="addTaskList()">Create a tasklist</span>
                                </div>
                            </div>
                        </ng-template>
                    </p-overlayPanel>
                </div>
            </div>
            <div class="grid grid-nogutter gap-5 pt-5 flex-wrap flex-1 flex flex-column">
                <div class="col-12 field px-5">
                    <label for="start" class="block text-900 font-semibold">Description</label>
                    <textarea id="description" name="description" type="text" pInputTextarea [rows]="5" [(ngModel)]="formValue.description" style="resize: none" class="w-full"></textarea>
                </div>
                <div class="col-12 px-5 flex gap-5">
                    <div class="flex flex-column field w-full">
                        <label for="start" class="block text-900 font-semibold">Start Date</label>
                        <span class="p-input-icon-left w-full" style="height: 3.5rem;">
                            <i class="pi pi-clock z-1" style="left: 1.5rem;"></i>
                            <p-calendar name="startDate" [appendTo]="sidebar" dateFormat="yy-mm-dd" [showTime]="false" [required]="true" inputId="start" inputStyleClass="w-full pl-7 text-900 font-semibold" styleClass="w-full" [inputStyle]="{'height':'3.5rem'}" [(ngModel)]="formValue.startDate"></p-calendar>
                        </span>
                    </div>
                    <div class="flex flex-column field w-full">
                        <label for="due" class="block text-900 font-semibold">Due Date</label>
                        <span class="p-input-icon-left w-full" style="height: 3.5rem;">
                            <i class="pi pi-clock z-1" style="left: 1.5rem;"></i>
                            <p-calendar name="endDate" [appendTo]="sidebar" dateFormat="yy-mm-dd"  [showTime]="false" [required]="true" inputId="due" inputStyleClass="w-full pl-7 text-900 font-semibold" styleClass="w-full" [inputStyle]="{'height':'3.5rem'}" [(ngModel)]="formValue.dueDate"></p-calendar>
                        </span>
                    </div>
                </div>
        
                <div *ngIf="formValue.taskList.tasks.length || showTaskContainer" class="col-12 flex flex-column px-5">
                    <div class="flex justify-content-between mb-3">
                        <span class="text-900 font-semibold">Progress</span>
                        <span class="text-900 font-semibold">{{formValue.progress}}%</span>
                    </div>
                    <p-progressBar name="progress" [value]="formValue.progress" [showValue]="false"></p-progressBar>
                </div>
        
                <div *ngIf="formValue.taskList.tasks.length || showTaskContainer" class="col-12 flex flex-column px-5">
                    <div class="h-4rem -mb-4">
                        <p-inplace #inplace2 [closable]="true" closeIcon="pi pi-check" styleClass="h-4rem" (onActivate)="focus(2)">
                            <ng-template pTemplate="display">
                                <span class="block text-900 font-semibold text-lg mt-3" pTooltip="Click to edit" tooltipPosition="left">{{formValue.taskList.title}}</span>
                            </ng-template>
                            <ng-template pTemplate="content">
                                <input #inputTaskListTitle type="text" name="title" [(ngModel)]="formValue.taskList.title" pInputText class="w-20rem h-3rem text-900 mt-2 text-lg" (keydown.enter)="inplace2.deactivate()">
                            </ng-template>
                        </p-inplace>
                    </div>
                    <textarea type="text" pInputTextarea name="taskContent" [(ngModel)]="taskContent" style="resize: none" class="w-full mt-4" placeholder="Add a task" (keydown.enter)="addTask($event)"></textarea>
        
                    <ul *ngIf="formValue.taskList?.tasks?.length !== 0" class="list-none p-4 flex flex-column gap-3 surface-ground surface-border border-1 border-round">
                        <li class="flex align-items-start gap-3" *ngFor="let task of formValue.taskList?.tasks;let i=index">
                            <p-checkbox [name]="task.text + i" [(ngModel)]="task.completed" [binary]="true" [inputId]="task.text" (onChange)="calculateProgress()"></p-checkbox>
                            <span style="word-break: break-all;" [ngClass]="{'text-600 line-through': task.completed, 'text-900': !task.completed}">
                                {{task.text}}
                            </span>
                        </li>
                    </ul>
                </div>
        
                <div class="col-12 flex flex-column field px-5">
                    <label for="assignees" class="block text-900 font-semibold mb-3">Assignees</label>
                    <p-autoComplete [appendTo]="sidebar" name="assignees" [(ngModel)]="formValue.assignees" [suggestions]="filteredAssignees" (completeMethod)="filterAssignees($event)" field="name" [multiple]="true" [showEmptyMessage]="true" emptyMessage="No results found" placeholder="Choose assignees" [inputStyle]="{'height': '2.5rem'}">
                        <ng-template let-assignee pTemplate="selectedItem">
                            <div class="flex align-items-center gap-3 border-round">
                                <img src="assets/demo/images/avatar/{{assignee.image}}" [alt]="assignee.name" class="h-2rem w-2rem border-2 border-circle surface-border mr-2">
                                <span class="text-900">{{assignee.name}}</span>
                            </div>
                        </ng-template>
                        <ng-template let-assignee pTemplate="item">
                            <div class="flex align-items-center border-round">
                                <img src="assets/demo/images/avatar/{{assignee.image}}" [alt]="assignee.name" class="h-2rem w-2rem border-2 border-circle surface-border mr-2">
                                <span class="text-900">{{assignee.name}}</span>
                            </div>
                        </ng-template>
                    </p-autoComplete>
                </div>
        
                <div class="col-12 flex flex-column row-gap-4 px-5 mb-6">
                    <span class="block text-900 font-semibold">Comments</span>
                    <div class="flex align-items-center">
                        <p-avatar icon="pi pi-user" class="mr-3" shape="circle" size="large"></p-avatar>
                        <textarea type="text" pInputTextarea name="comment" [(ngModel)]="comment" style="resize: none" class="w-full" placeholder="Write a comment..." (keydown.enter)="onComment($event)"></textarea>
                    </div>
                    <div *ngFor="let comment of formValue.comments" class="flex align-items-center border-round">
                        <p-avatar *ngIf="comment.image" image="assets/demo/images/avatar/{{comment.image}}" class="mb-4" shape="circle" size="large"></p-avatar>
                        <p-avatar *ngIf="!comment.image" icon="pi pi-user" class="mb-4" shape="circle" size="large"></p-avatar>
                        <div class="ml-3 w-full">
                            <div class="flex justify-content-between mb-2">
                                <span class="block text-900">{{comment.name}}</span>
                                <span class="block text-700">1 Jun 17:58 pm</span>
                            </div>
                            <span class="block text-900 border-1 surface-ground surface-border p-2 border-round" style="word-break: break-all;">{{comment?.text}}</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="flex w-full justify-content-end border-top-1 surface-border py-5 px-5 gap-3">
                <button pButton pRipple type="button" icon="pi pi-paperclip" class="p-button-outlined p-button-secondary surface-border text-900 w-3rem h-3rem"></button>
                <button pButton pRipple type="button" icon="pi pi-trash" class="p-button-outlined p-button-secondary surface-border text-900 w-3rem h-3rem" (click)="onDelete()"></button>
                <button pButton pRipple type="submit" icon="pi pi-check" label="Save" class="p-button-primary h-3rem"></button>
            </div>
        </form>
    </ng-template>
</p-sidebar>

================
File: src/app/demo/components/apps/kanban/kanban-sidebar/kanban-sidebar.component.scss
================
:host ::ng-deep {
    .p-autocomplete {
        display: block;

        .p-autocomplete-multiple-container {
            gap: 0.5rem;

            .p-autocomplete-token {
                background: var(--surface-ground);
                border: 1px solid var(--surface-border);
            }
        }
    }

    .p-sidebar {
        .p-sidebar-header {
            display: none;
        }
        
        .p-sidebar-content {
            padding: 0;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            height: 100%;
            overflow: auto;
        }
    }
}

================
File: src/app/demo/components/apps/kanban/kanban-sidebar/kanban-sidebar.component.ts
================
import { Component, OnDestroy, ViewChild, ElementRef } from '@angular/core';
import { KanbanCard, Comment, ListName, Task } from 'src/app/demo/api/kanban';
import { Member } from 'src/app/demo/api/member';
import { KanbanAppComponent } from '../kanban.app.component';
import { MemberService } from 'src/app/demo/service/member.service';
import { Subscription } from 'rxjs';
import { MenuItem } from 'primeng/api';
import { KanbanService } from '../service/kanban.service';

@Component({
    selector: 'app-kanban-sidebar',
    templateUrl: './kanban-sidebar.component.html',
    styleUrls: ['./kanban-sidebar.component.scss']
})
export class KanbanSidebarComponent implements OnDestroy {

    card: KanbanCard = {id:'' ,taskList: {title: 'Untitled Task List', tasks: []}};

    formValue!: KanbanCard;

    listId: string = '';

    filteredAssignees: Member[] = [];

    assignees: Member[] = [];

    newComment: Comment = { id: '123', name: 'Jane Cooper', text: '' };

    newTask: Task = { text: '', completed: false };

    comment: string = '';

    taskContent: string = '';

    timeout: any = null;

    showTaskContainer: boolean = false;

    menuItems: MenuItem[] = [];

    listNames: ListName[] = [];

    cardSubscription: Subscription;

    listSubscription: Subscription;

    listNameSubscription: Subscription;

    @ViewChild('inputTitle') inputTitle!: ElementRef;

    @ViewChild('inputTaskListTitle') inputTaskListTitle!: ElementRef;

    constructor(public parent: KanbanAppComponent, private memberService: MemberService, private kanbanService: KanbanService) {
        this.memberService.getMembers().then(members => this.assignees = members);

        this.cardSubscription = this.kanbanService.selectedCard$.subscribe(data => {
            this.card = data;
            this.formValue = {...data};

        });
        this.listSubscription = this.kanbanService.selectedListId$.subscribe(data => this.listId = data);
        this.listNameSubscription = this.kanbanService.listNames$.subscribe(data => this.listNames = data);
    }

    ngOnDestroy() {
        this.cardSubscription.unsubscribe();
        this.listSubscription.unsubscribe();
        this.listNameSubscription.unsubscribe();
        clearTimeout(this.timeout);
    }

    close() {
        this.parent.sidebarVisible = false;
        this.resetForm();
    }

    filterAssignees(event: any) {
        let filtered: Member[] = [];
        let query = event.query;

        for (let i = 0; i < this.assignees.length; i++) {
            let assignee = this.assignees[i];
            if (assignee.name && assignee.name.toLowerCase().indexOf(query.toLowerCase()) == 0) {
                filtered.push(assignee);
            }
        }

        this.filteredAssignees = filtered;
    }

    onComment(event: Event) {
        event.preventDefault();
        if (this.comment.trim().length > 0) {
            this.newComment = { ...this.newComment, text: this.comment }
            this.formValue?.comments?.unshift(this.newComment);
            this.comment = '';
        }
    }

    onSave(event: any) {
        event.preventDefault();
        this.card = {...this.formValue};
        this.kanbanService.updateCard(this.card, this.listId);
        this.close();
    }

    onMove(listId: string) {
        this.kanbanService.moveCard(this.formValue, listId, this.listId);
    }

    onDelete() {
        this.kanbanService.deleteCard(this.formValue?.id || '', this.listId);
        this.parent.sidebarVisible = false;
        this.resetForm();
    }

    resetForm() {
        this.formValue =  {id:'' ,taskList: {title: 'Untitled Task List', tasks: []}};
    }

    addTaskList() {
        this.showTaskContainer = !this.showTaskContainer;

        if (!this.showTaskContainer) {
            return;
        }
        else if (!this.formValue.taskList) {
            let id = this.kanbanService.generateId();
            this.formValue = { ...this.formValue, taskList: { id: id, title: 'Untitled Task List', tasks: []  } };
        }
    }

    addTask(event: Event) {
        event.preventDefault();
        if (this.taskContent.trim().length > 0) {
            this.newTask = { text: this.taskContent, completed: false };
            this.formValue.taskList?.tasks.unshift(this.newTask);
            this.taskContent = '';
            this.calculateProgress();
        }
    }

    focus(arg: number) {
        if (arg == 1) {
            this.timeout = setTimeout(() => this.inputTitle.nativeElement.focus(), 1);
        }
        if (arg == 2) {
            this.timeout = setTimeout(() => this.inputTaskListTitle.nativeElement.focus(), 1);
        }
    }

    calculateProgress() {
        if(this.formValue.taskList) {
            let completed = this.formValue.taskList.tasks.filter(t => t.completed).length;
            this.formValue.progress = Math.round(100 * (completed / this.formValue.taskList.tasks.length));
        }
    }

}

================
File: src/app/demo/components/apps/kanban/kanban.app-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { KanbanAppComponent } from './kanban.app.component';

@NgModule({
    imports: [RouterModule.forChild([
        { path: '', data: { breadcrumb: 'Board' }, component: KanbanAppComponent }
    ])],
    exports: [RouterModule]
})
export class KanbanAppRoutingModule { }

================
File: src/app/demo/components/apps/kanban/kanban.app.component.html
================
<div id="kanban-wrapper" cdkDropList cdkDropListOrientation="horizontal" (cdkDropListDropped)="dropList($event)" [cdkDropListData]="lists" class="grid grid-nogutter w-full flex-column md:flex-row flex-nowrap gap-5 lg:overflow-y-hidden overflow-x-auto">
    <app-kanban-list *ngFor="let list of lists; let i = index;" [list]="list" [listIds]="listIds" cdkDrag cdkDragHandle [cdkDragDisabled]="isMobileDevice" class="p-kanban-list"></app-kanban-list>
    <div class="px-3 py-1 mb-3 md:w-25rem flex-shrink-0">
        <button pButton pRipple label="New List" icon="pi pi-plus font-semibold" class="py-3 justify-content-center font-semibold w-full border-round" (click)="addList()"></button>
    </div>
    <app-kanban-sidebar></app-kanban-sidebar>
</div>

================
File: src/app/demo/components/apps/kanban/kanban.app.component.scss
================
:host {
    ::-webkit-scrollbar {
        height: 6px;              
    }
    
    ::-webkit-scrollbar-track {
        background: transparent;
    }
    
    ::-webkit-scrollbar-thumb {
        background-color: var(--gray-500);
        border-radius: 20px;
    }
}

:host ::ng-deep {
    .p-button-label {
        flex: 0;
        white-space: nowrap;
    }

    .p-inplace {
        .p-inplace-content {
            .p-inputtext {
                border-top-right-radius: 0;
                border-bottom-right-radius: 0;
            }
    
            .p-button {
                border-top-left-radius: 0px;
                border-bottom-left-radius: 0px;
                width: 3rem;
                height: 3rem;
            }
        }

        .p-inplace-display {
            padding: 0;
        }    
    }
}

.p-kanban-list {
    cursor: pointer;
    height: min-content;
}

.cdk-drag-preview {
    box-sizing: border-box;
    border-radius: 4px;
    box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2),
        0 8px 10px 1px rgba(0, 0, 0, 0.14),
        0 3px 14px 2px rgba(0, 0, 0, 0.12);
}
  
.cdk-drag-placeholder {
    opacity: 0.25;
}

.cdk-drag-animating {
    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);
}

================
File: src/app/demo/components/apps/kanban/kanban.app.component.ts
================
import { Component, OnInit, OnDestroy } from '@angular/core';
import { KanbanList } from 'src/app/demo/api/kanban';
import { Subscription } from 'rxjs';
import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';
import { KanbanService } from './service/kanban.service';

@Component({
    templateUrl: './kanban.app.component.html',
    styleUrls: ['./kanban.app.component.scss']
})
export class KanbanAppComponent implements OnInit, OnDestroy {

    sidebarVisible: boolean = false;

    lists: KanbanList[] = [];

    listIds: string[] = [];

    subscription = new Subscription();

    style!: HTMLStyleElement;

    isMobileDevice: boolean = false;

    constructor(private kanbanService: KanbanService) {
        this.subscription = this.kanbanService.lists$.subscribe(data => {
            this.lists = data;
            this.listIds = this.lists.map(l => l.listId || '');
        });
    }

    ngOnInit() {
        this.removeLayoutResponsive();
        this.isMobileDevice = this.kanbanService.isMobileDevice();
    }

    toggleSidebar() {
        this.sidebarVisible = true;
    }

    addList() {
        this.kanbanService.addList();
    }

    dropList(event: CdkDragDrop<KanbanList[]>) {
        moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);
    }

    removeLayoutResponsive() {
        this.style = document.createElement('style');
        this.style.innerHTML = `
                .layout-content {
                    width: 100%;
                }
                
                .layout-topbar {
                    width: 100%;
                }
            `;
        document.head.appendChild(this.style);
    }

    ngOnDestroy(): void {
        this.subscription.unsubscribe();
        document.head.removeChild(this.style)
    }
}

================
File: src/app/demo/components/apps/kanban/kanban.app.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { KanbanAppRoutingModule } from './kanban.app-routing.module';
import { KanbanAppComponent } from './kanban.app.component';
import { KanbanListComponent } from './kanban-list/kanban-list.component';
import { KanbanSidebarComponent } from './kanban-sidebar/kanban-sidebar.component';
import { KanbanCardComponent } from './kanban-card/kanban-card.component';
import { ButtonModule } from 'primeng/button';
import { RippleModule } from 'primeng/ripple';
import { FormsModule } from '@angular/forms';
import { ProgressBarModule } from 'primeng/progressbar';
import { AvatarModule } from 'primeng/avatar';
import { AvatarGroupModule } from 'primeng/avatargroup';
import { InputTextModule } from 'primeng/inputtext';
import { ChipsModule } from 'primeng/chips';
import { CalendarModule } from 'primeng/calendar';
import { DropdownModule } from 'primeng/dropdown';
import { InputTextareaModule } from 'primeng/inputtextarea';
import { SidebarModule } from 'primeng/sidebar';
import { MenuModule } from 'primeng/menu';
import { InplaceModule } from 'primeng/inplace';
import { AutoCompleteModule } from 'primeng/autocomplete';
import { TooltipModule } from 'primeng/tooltip';
import { TieredMenuModule } from 'primeng/tieredmenu';
import { OverlayPanelModule } from 'primeng/overlaypanel';
import { CheckboxModule } from 'primeng/checkbox';
import { KanbanService } from './service/kanban.service';

@NgModule({
    imports: [
        CommonModule,
        FormsModule,
        DragDropModule,
        KanbanAppRoutingModule,
        ButtonModule,
        RippleModule,
        ProgressBarModule,
        AvatarModule,
        AvatarGroupModule,
        InputTextModule,
        ChipsModule,
        CalendarModule,
        DropdownModule,
        InputTextareaModule,
        SidebarModule,
        MenuModule,
        InplaceModule,
        AutoCompleteModule,
        TooltipModule,
        TieredMenuModule,
        OverlayPanelModule,
        CheckboxModule
    ],
    declarations: [
        KanbanAppComponent,
        KanbanListComponent,
        KanbanSidebarComponent,
        KanbanCardComponent
    ],
    providers: [KanbanService]
})
export class KanbanAppModule { }

================
File: src/app/demo/components/apps/kanban/service/kanban.service.ts
================
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { KanbanCard, KanbanList } from 'src/app/demo/api/kanban';

@Injectable()
export class KanbanService {

    private _lists: KanbanList[] = [];

    private selectedCard = new Subject<KanbanCard>();

    private selectedListId = new Subject<string>();

    private lists = new BehaviorSubject<KanbanList[]>(this._lists);

    private listNames = new Subject<any[]>();

    lists$ = this.lists.asObservable();

    selectedCard$ = this.selectedCard.asObservable();

    selectedListId$ = this.selectedListId.asObservable();

    listNames$ = this.listNames.asObservable();

    constructor(private http: HttpClient) {
        this.http.get<any>('assets/demo/data/kanban.json')
        .toPromise()
        .then(res => res.data as KanbanList[])
        .then(data => {
            this.updateLists(data);
        });
    }

    private updateLists(data: any[]) {
        this._lists = data;
        let small = data.map(l => ({listId: l.listId, title: l.title}));

        this.listNames.next(small)
        this.lists.next(data);
    }

    addList() {
        const listId = this.generateId();
        const title = "Untitled List";
        const newList = {
            listId: listId,
            title: title,
            cards:[]
        };

        this._lists.push(newList);
        this.lists.next(this._lists);
    }

    addCard(listId: string) {
        const cardId = this.generateId();
        const title = "Untitled card";
        const newCard = {id: cardId, title: title, description: '', progress: '', assignees: [], attachments: 0, comments: [], startDate: '', dueDate: '', completed: false, taskList: {title:'Untitled Task List', tasks: []}};

        let lists = [];
        lists = this._lists.map(l => l.listId === listId ? ({...l, cards: [...l.cards || [], newCard]}) : l);
        this.updateLists(lists);
    }

    updateCard(card: KanbanCard, listId: string) {
        let lists = this._lists.map(l => l.listId === listId ? ({...l, cards: l.cards.map(c => c.id === card.id ? {...card} : c)}) : l);
        this.updateLists(lists);
    }

    deleteList(id: string) {
        this._lists = this._lists.filter(l => l.listId !== id);
        this.lists.next(this._lists);
    }

    copyList(list: KanbanList) {
        let newId = this.generateId();
        let newList = {...list, listId: newId};

        this._lists.push(newList);
        this.lists.next(this._lists);
    }

    deleteCard(cardId: string, listId: string) {
        let lists = [];

        for (let i = 0; i < this._lists.length; i++) {
            let list = this._lists[i];

            if (list.listId === listId && list.cards) {
                list.cards = list.cards.filter(c => c.id !== cardId);
            }

            lists.push(list);
        }

        this.updateLists(lists);
    }

    copyCard(card: KanbanCard, listId: string) {
        let lists = [];

        for (let i = 0; i < this._lists.length; i++) {
            let list = this._lists[i];

            if (list.listId === listId && list.cards) {
                let cardIndex = list.cards.indexOf(card);
                let newId = this.generateId();
                let newCard = {...card, id: newId};
                list.cards.splice(cardIndex, 0, newCard);
            }

            lists.push(list);
        }

        this.updateLists(lists);
    }

    moveCard(card: KanbanCard, targetListId: string, sourceListId: string) {
        if (card.id) {
            this.deleteCard(card.id, sourceListId);
            let lists = this._lists.map(l => l.listId === targetListId ? ({...l, cards: [...l.cards || [], card]}) : l);
            this.updateLists(lists);
        }
    }

    onCardSelect(card: KanbanCard, listId: string) {
        this.selectedCard.next(card);
        this.selectedListId.next(listId);
    }

    generateId() {
        let text = "";
        let possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

        for (var i = 0; i < 5; i++) {
            text += possible.charAt(Math.floor(Math.random() * possible.length));
        }

        return text;
    }

    isMobileDevice() {
        return (/iPad|iPhone|iPod/.test(navigator.userAgent)) || (/(android)/i.test(navigator.userAgent));
    }

}

================
File: src/app/demo/components/apps/mail/mail-archive/mail-archive.component.html
================
<app-mail-table [mails]="archivedMails"></app-mail-table>

================
File: src/app/demo/components/apps/mail/mail-archive/mail-archive.component.ts
================
import { Component, OnDestroy } from '@angular/core';
import { Subscription } from 'rxjs';
import { Mail } from 'src/app/demo/api/mail';
import { MailService } from 'src/app/demo/components/apps/mail/service/mail.service';

@Component({
    selector: 'app-mail-archive',
    templateUrl: './mail-archive.component.html',
})
export class MailArchiveComponent implements OnDestroy {
    archivedMails: Mail[] = [];

    subscription: Subscription;

    constructor(private mailService: MailService) {
        this.subscription = this.mailService.mails$.subscribe((data) => {
            this.archivedMails = data.filter((d) => d.archived);
        });
    }

    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}

================
File: src/app/demo/components/apps/mail/mail-compose/mail-compose.component.html
================
<div class="flex align-items-center px-4 md:px-0 border-top-1 surface-border md:border-none pt-4 md:pt-0">
    <button pButton pRipple type="button" icon="pi pi-chevron-left" class="p-button-outlined p-button-secondary surface-border text-900 w-3rem h-3rem mr-3" (click)="goBack()"></button>
    <span class="block text-900 font-bold text-xl">Compose Message</span>
</div>
<div class="surface-section grid mt-4 grid-nogutter formgrid p-4 gap-3 md:surface-border md:border-1 border-round">
    <div class="col-12 field">
        <label for="to" class="text-900 font-semibold">To</label>
        <span class="p-input-icon-left w-full" style="height: 3.5rem;">
            <i class="pi pi-user" style="left: 1.5rem;"></i>
            <input id="to" type="text" pInputText [(ngModel)]="newMail.to" class="w-full pl-7 text-900 font-semibold" style="height: 3.5rem"/>
        </span>
    </div>
    <div class="col-12 field">
        <label for="Subject" class="text-900 font-semibold">Subject</label>
        <span class="p-input-icon-left w-full" style="height: 3.5rem;">
            <i class="pi pi-pencil" style="left: 1.5rem;"></i>
            <input id="subject" type="text" pInputText [(ngModel)]="newMail.title" placeholder="Subject" class="w-full pl-7 text-900 font-semibold" style="height: 3.5rem"/>
        </span>
    </div>
    <div class="col-12 field">
        <p-editor [style]="{'height':'250px'}" [(ngModel)]="newMail.message"></p-editor>
    </div>
    <div class="col-12 flex column-gap-3 justify-content-end">
        <button pButton pRipple type="button" class="p-button-primary h-3rem w-full sm:w-auto" icon="pi pi-send" label="Send Message" (click)="sendMail()"></button>
    </div>
</div>

================
File: src/app/demo/components/apps/mail/mail-compose/mail-compose.component.ts
================
import { Component } from '@angular/core';
import { Location } from '@angular/common';
import { MessageService } from 'primeng/api';
import { Router } from '@angular/router';
import { Mail } from 'src/app/demo/api/mail';
import { MailService } from '../service/mail.service';

@Component({
    templateUrl: './mail-compose.component.html'
})
export class MailComposeComponent {

    newMail: Mail = {
        id: '',
        to: '',
        email: '',
        image: '',
        title: '',
        message: '',
        date: '',
        important: false,
        starred: false,
        trash: false,
        spam: false,
        archived: false,
        sent: true
    };

    constructor(private messageService: MessageService, private location: Location, private router: Router, private mailService: MailService) { }

    sendMail() {
        if (this.newMail.message) {
            this.newMail.id = Math.floor(Math.random() * 1000);
            this.mailService.onSend(this.newMail);
            this.messageService.add({ severity: 'success', summary: 'Success', detail: 'Mail sent' });
            this.router.navigate(['apps/mail/inbox']);
        }
    }

    goBack() {
        this.location.back();
    }
    
}

================
File: src/app/demo/components/apps/mail/mail-detail/mail-detail.component.html
================
<div *ngIf="mail">
    <div class="flex flex-column md:flex-row md:align-items-center md:justify-content-between mb-5 pt-5 md:pt-0 gap-4 md:border-top-none border-top-1 surface-border">
        <div class="flex align-items-center md:justify-content-start">
            <button pButton pRipple type="button" icon="pi pi-chevron-left" class="p-button-text p-button-plain md:mr-3" (click)="goBack()"></button>
            <p-avatar *ngIf="mail && mail.image" [image]="'assets/demo/images/avatar/' + mail.image" size="large" shape="circle" styleClass="border-2 surface-border"></p-avatar>
            <div class="flex flex-column mx-3">
                <span class="block text-900 font-bold text-lg">{{mail.from}}</span>
                <span class="block text-900 font-semibold">To: {{mail.email || mail.to}}</span>
            </div>
        </div>
        <div class="flex align-items-center justify-content-end column-gap-3 px-4 md:px-0">
            <span class="text-900 font-semibold white-space-nowrap mr-auto">{{mail.date}}</span>
            <button pButton pRipple type="button" icon="pi pi-reply" class="p-button-text p-button-plain flex-shrink-0"></button>
            <button pButton pRipple type="button" icon="pi pi-ellipsis-v" class="p-button-text p-button-plain flex-shrink-0"></button>
        </div>
    </div>
    <div class="surface-border border-1 border-round p-4">
            <div class="text-900 font-semibold text-lg mb-3">{{mail.title}}</div>
            <p class="line-height-3 mt-0 mb-3" [innerHTML]="mail.message"></p>
            <p-editor [style]="{'height':'250px'}" [(ngModel)]="newMail.message"></p-editor>
            <div class="flex column-gap-3 justify-content-end mt-3">
                <button pButton pRipple type="button" class="p-button-outlined" icon="pi pi-image"></button>
                <button pButton pRipple type="button" class="p-button-outlined" icon="pi pi-paperclip"></button>
                <button pButton pRipple type="button" class="p-button-primary" icon="pi pi-send" label="Send" (click)="sendMail()"></button>
            </div>
    </div>
</div>

================
File: src/app/demo/components/apps/mail/mail-detail/mail-detail.component.ts
================
import { Component, OnDestroy } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Location } from '@angular/common';
import { Subscription } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { Mail } from 'src/app/demo/api/mail';
import { MailService } from '../service/mail.service';
import { MessageService } from 'primeng/api';

@Component({
    templateUrl: './mail-detail.component.html'
})
export class MailDetailComponent implements OnDestroy {

    newMail: Mail = {
        id: '',
        to: '',
        email: '',
        image: '',
        title: '',
        message: '',
        date: '',
        important: false,
        starred: false,
        trash: false,
        spam: false,
        archived: false,
        sent: true
    };

    subscription: Subscription;

    mail: Mail = {};

    id: any;

    constructor(private route: ActivatedRoute, private mailService: MailService, private location: Location, private router: Router, private messageService: MessageService) {
        this.subscription = this.route.params.pipe(
            switchMap(params => {
                this.id = params['id'];
                return this.mailService.mails$
            })
        ).subscribe(data => {
            this.mail = data.filter(d => d.id == this.id)[0];

        });
    }

    goBack() {
        this.location.back();
    }

    sendMail() {
        if (this.newMail.message) {
            this.newMail.to = this.mail.from ? this.mail.from : this.mail.to;
            this.newMail.image = this.mail.image;
            
            this.mailService.onSend(this.newMail);
            this.messageService.add({ severity: 'success', summary: 'Success', detail: 'Mail sent' });
            this.router.navigate(['apps/mail/inbox']);
        }
    }

    ngOnDestroy() {
        this.subscription.unsubscribe();
    }

}

================
File: src/app/demo/components/apps/mail/mail-important/mail-important.component.html
================
<app-mail-table [mails]="importantMails"></app-mail-table>

================
File: src/app/demo/components/apps/mail/mail-important/mail-important.component.ts
================
import { Component, OnDestroy } from '@angular/core';
import { Subscription } from 'rxjs';
import { Mail } from 'src/app/demo/api/mail';
import { MailService } from 'src/app/demo/components/apps/mail/service/mail.service';

@Component({
    selector: 'app-mail-important',
    templateUrl: './mail-important.component.html',
})
export class MailImportantComponent implements OnDestroy {
    importantMails: Mail[] = [];

    subscription: Subscription;

    constructor(private mailService: MailService) {
        this.subscription = this.mailService.mails$.subscribe((data) => {
            this.importantMails = data.filter(
                (d) => d.important && !d.spam && !d.trash && !d.archived
            );
        });
    }

    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}

================
File: src/app/demo/components/apps/mail/mail-inbox/mail-inbox.component.html
================
<app-mail-table [mails]="mails"></app-mail-table>

================
File: src/app/demo/components/apps/mail/mail-inbox/mail-inbox.component.ts
================
import { Component, OnDestroy } from '@angular/core';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { Mail } from 'src/app/demo/api/mail';
import { MailService } from 'src/app/demo/components/apps/mail/service/mail.service';

@Component({
    selector: 'app-mail-inbox',
    templateUrl: './mail-inbox.component.html',
})
export class MailInboxComponent implements OnDestroy {
    mails: Mail[] = [];

    subscription: Subscription;

    constructor(private mailService: MailService, private router: Router) {
        this.subscription = this.mailService.mails$.subscribe((data) => {
            this.mails = data.filter(
                (d) =>
                    !d.archived &&
                    !d.spam &&
                    !d.trash &&
                    !d.hasOwnProperty('sent')
            );
        });
    }

    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}

================
File: src/app/demo/components/apps/mail/mail-reply/mail-reply.component.html
================
<div *ngIf="content" class="p-0 m-0">
    <div class="surface-section grid grid-nogutter formgrid flex-column md:flex-row gap-6 p-5 border-round">
        <div class="col">
            <label for="to" class="block text-900 font-semibold mb-3">To</label>
            <span class="p-input-icon-left w-full" style="height: 3.5rem;">
                <i class="pi pi-user" style="left: 1.5rem;"></i>
                <input id="to" type="text" pInputText class="w-full pl-7 text-900 font-semibold" style="height: 3.5rem" [(ngModel)]="content.from"/>
            </span>
        </div>
        <div class="col">
            <label for="Subject" class="block text-900 font-semibold mb-3">Subject</label>
            <span class="p-input-icon-left w-full" style="height: 3.5rem;">
                <i class="pi pi-pencil" style="left: 1.5rem;"></i>
                <input id="subject" type="text" pInputText placeholder="Subject" class="w-full pl-7 text-900 font-semibold" style="height: 3.5rem" [(ngModel)]="content.title" />
            </span>
        </div>
        <div *ngIf="displayMessage" class="border-1 surface-border border-round p-4" [innerHTML]="content.message"></div>
        <div class="col-12 field">
            <span class="surface-ground cursor-pointer border-round px-2" (click)="toggleMessage()" [pTooltip]="displayMessage ? 'Hide content' : 'Show content'"><i class="pi pi-ellipsis-h"></i></span>
            <p-editor [style]="{'height':'250px'}" styleClass="mt-3" [(ngModel)]="newMail.message"></p-editor>
        </div>
    </div>
    <div class="flex column-gap-3 justify-content-end p-5 border-top-1 surface-border">
        <button pButton pRipple type="button" class="p-button-outlined" icon="pi pi-image"></button>
        <button pButton pRipple type="button" class="p-button-outlined" icon="pi pi-paperclip"></button>
        <button pButton pRipple type="button" class="p-button-primary h-3rem" icon="pi pi-send" label="Send" (click)="sendMail()"></button>
    </div>
</div>

================
File: src/app/demo/components/apps/mail/mail-reply/mail-reply.component.ts
================
import { Component, Input, EventEmitter, Output } from '@angular/core';
import { MessageService } from 'primeng/api';
import { Mail } from 'src/app/demo/api/mail';
import { MailService } from '../service/mail.service';

@Component({
    selector: 'app-mail-reply',
    templateUrl: './mail-reply.component.html',
})
export class MailReplyComponent {

    newMail: Mail = {
        id: '',
        to: '',
        email: '',
        image: '',
        title: '',
        message: '',
        date: '',
        important: false,
        starred: false,
        trash: false,
        spam: false,
        archived: false,
        sent: true
    }

    displayMessage: boolean = false;

    @Input() content: Mail = {};

    @Output() hide: EventEmitter<any> = new EventEmitter();

    constructor(private messageService: MessageService, private mailService: MailService) { }

    sendMail() {
        let { image, from, title } = this.content
        this.newMail = { ...this.newMail, to: from, title: title, image: image };
        this.mailService.onSend(this.newMail);
        this.messageService.add({ severity: 'success', summary: 'Success', detail: 'Mail sent' });
        this.hide.emit();
    }

    toggleMessage() {
        this.displayMessage = !this.displayMessage;
    }
}

================
File: src/app/demo/components/apps/mail/mail-sent/mail-sent.component.html
================
<app-mail-table [mails]="sentMails"></app-mail-table>

================
File: src/app/demo/components/apps/mail/mail-sent/mail-sent.component.ts
================
import { Component } from '@angular/core';
import { Subscription } from 'rxjs';
import { Mail } from 'src/app/demo/api/mail';
import { MailService } from 'src/app/demo/components/apps/mail/service/mail.service';

@Component({
    templateUrl: './mail-sent.component.html'
})
export class MailSentComponent {

    sentMails: Mail[] = [];

    subscription: Subscription;

    constructor(private mailService: MailService) {
        this.subscription = this.mailService.mails$.subscribe(data => {
            this.sentMails = data.filter(d => d.sent && !d.trash && !d.archived);
        });
    }

}

================
File: src/app/demo/components/apps/mail/mail-sidebar/mail-sidebar.component.html
================
<div>
    <button pButton pRipple label="Compose New" class="mb-5 w-full p-button-outlined" routerLink="/apps/mail/compose"></button>
    <div class="overflow-auto">
        <ul class="flex flex-row md:flex-column gap-1 md:gap-2 list-none m-0 p-0 overflow-auto">
            <li pRipple *ngFor="let item of items; let i = index" class="cursor-pointer select-none p-3 transition-duration-150 border-round flex align-items-center justify-content-center md:justify-content-start md:flex-1 flex-auto"  
                [ngClass]="{'bg-primary' : url === item.routerLink, 'hover:surface-hover': url !== item.routerLink}" (click)="navigate(item)">
                <i [class]="item.icon || ''" class="md:mr-3 text-600 transition-duration-150 text-lg" [ngClass]="{'text-primary-50' : url === item.routerLink}"></i>
                <span class="text-900 font-medium hidden md:inline" [ngClass]="{'text-primary-50' : url === item.routerLink}">{{item.label}}</span>
                <span *ngIf="item.badge" class="ml-auto text-sm font-semibold bg-primary-50 text-primary-900 px-2 py-1 hidden md:inline" style="border-radius: 2rem">{{item.badge}}</span>
            </li>
        </ul>
    </div>
</div>

================
File: src/app/demo/components/apps/mail/mail-sidebar/mail-sidebar.component.ts
================
import { Component, OnDestroy } from '@angular/core';
import { MenuItem } from 'primeng/api';
import { NavigationEnd, Router } from '@angular/router';
import { Mail } from 'src/app/demo/api/mail';
import { MailService } from 'src/app/demo/components/apps/mail/service/mail.service';
import { filter, Subscription } from 'rxjs';

@Component({
    selector: 'app-mail-sidebar',
    templateUrl: './mail-sidebar.component.html'
})
export class MailSidebarComponent implements OnDestroy {

    items: MenuItem[] = [];

    badgeValues: any;

    mailSubscription: Subscription;

    routeSubscription: Subscription;

    url: string = '';

    constructor(private router: Router, private mailService: MailService) {
        this.mailSubscription = this.mailService.mails$.subscribe(data => this.getBadgeValues(data));

        this.routeSubscription = this.router.events.pipe(filter((event) => event instanceof NavigationEnd)).subscribe((params: any) => {
            this.url = params.url;
        });
    }

    navigate(item: MenuItem) {
        if (item.routerLink) {
            this.router.navigate([item.routerLink]);
        }
    }

    getBadgeValues(data: Mail[]) {
        let inbox = [],
            starred = [],
            spam = [],
            important = [],
            archived = [],
            trash = [],
            sent = []

        for (let i = 0; i < data.length; i++) {
            let mail = data[i];

            if (!mail.archived && !mail.trash && !mail.spam && !mail.hasOwnProperty('sent')) {
                inbox.push(mail);
            }
            if (mail.starred && !mail.archived && !mail.trash) {
                starred.push(mail);
            }
            if (mail.spam && !mail.archived && !mail.trash) {
                spam.push(mail);
            }
            if (mail.important && !mail.archived && !mail.trash) {
                important.push(mail);
            }
            if (mail.archived && !mail.trash ) {
                archived.push(mail);
            }
            if (mail.trash) {
                trash.push(mail);
            }
            if (mail.sent && !mail.archived && !mail.trash) {
                sent.push(mail);
            }
        }

        this.badgeValues = {
            inbox: inbox.length,
            starred: starred.length,
            spam: spam.length,
            important: important.length,
            archived: archived.length,
            trash: trash.length,
            sent: sent.length
        };

        this.updateSidebar();
    }

    updateSidebar() {
        this.items = [
            { label: 'Inbox', icon: 'pi pi-inbox', badge: this.badgeValues.inbox, routerLink: '/apps/mail/inbox' },
            { label: 'Starred', icon: 'pi pi-star', badge: this.badgeValues.starred, routerLink: '/apps/mail/starred' },
            { label: 'Spam', icon: 'pi pi-ban', badge: this.badgeValues.spam, routerLink: '/apps/mail/spam' },
            { label: 'Important', icon: 'pi pi-bookmark', badge: this.badgeValues.important, routerLink: '/apps/mail/important' },
            { label: 'Sent', icon: 'pi pi-send', badge: this.badgeValues.sent, routerLink: '/apps/mail/sent' },
            { label: 'Archived', icon: 'pi pi-book', badge: this.badgeValues.archived, routerLink: '/apps/mail/archived' },
            { label: 'Trash', icon: 'pi pi-trash', badge: this.badgeValues.trash, routerLink: '/apps/mail/trash' }
        ];
    }

    ngOnDestroy() {
        this.mailSubscription.unsubscribe();
        this.routeSubscription.unsubscribe();
    }
}

================
File: src/app/demo/components/apps/mail/mail-spam/mail-spam.component.html
================
<app-mail-table [mails]="spamMails"></app-mail-table>

================
File: src/app/demo/components/apps/mail/mail-spam/mail-spam.component.ts
================
import { Component, OnDestroy } from '@angular/core';
import { Subscription } from 'rxjs';
import { Mail } from 'src/app/demo/api/mail';
import { MailService } from 'src/app/demo/components/apps/mail/service/mail.service';

@Component({
    selector: 'app-mail-spam',
    templateUrl: './mail-spam.component.html',
})
export class MailSpamComponent implements OnDestroy {
    spamMails: Mail[] = [];

    subscription: Subscription;

    constructor(private mailService: MailService) {
        this.subscription = this.mailService.mails$.subscribe((data) => {
            this.spamMails = data.filter(
                (d) =>
                    d.spam &&
                    !d.archived &&
                    !d.trash &&
                    !d.hasOwnProperty('sent')
            );
        });
    }

    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}

================
File: src/app/demo/components/apps/mail/mail-starred/mail-starred.component.html
================
<app-mail-table [mails]="starredMails"></app-mail-table>

================
File: src/app/demo/components/apps/mail/mail-starred/mail-starred.component.ts
================
import { Component, OnDestroy } from '@angular/core';
import { Subscription } from 'rxjs';
import { Mail } from 'src/app/demo/api/mail';
import { MailService } from 'src/app/demo/components/apps/mail/service/mail.service';

@Component({
    selector: 'app-mail-starred',
    templateUrl: './mail-starred.component.html',
})
export class MailStarredComponent implements OnDestroy {
    starredMails: Mail[] = [];

    subscription: Subscription;

    constructor(private mailService: MailService) {
        this.subscription = this.mailService.mails$.subscribe((data) => {
            this.starredMails = data.filter(
                (d) => d.starred && !d.archived && !d.trash
            );
        });
    }

    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}

================
File: src/app/demo/components/apps/mail/mail-table/mail-table.component.html
================
<p-table #dt [value]="mails" responsiveLayout="scroll" [rows]="10" [globalFilterFields]="['from','title','message']" [paginator]="true" [rowsPerPageOptions]="[10,20,30]" [(selection)]="selectedMails" selectionMode="multiple" [rowHover]="true" dataKey="id">
    <ng-template pTemplate="caption">
        <div class="flex flex-wrap align-items-center justify-content-between gap-3">
            <div class="flex gap-2 align-items-center">
                <p-tableHeaderCheckbox></p-tableHeaderCheckbox>
                <button pButton pRipple type="button" icon="pi pi-refresh" class="p-button-rounded p-button-text p-button-plain ml-4"></button>
                <button pButton pRipple type="button" icon="pi pi-ellipsis-v" class="p-button-rounded p-button-text p-button-plain ml-3" (click)="menu.toggle($event)"></button>
                <p-menu #menu [model]="menuItems" [appendTo]="dt" [popup]="true"></p-menu>
            </div>
            
            <span class="p-input-icon-left">
                <i class="pi pi-search"></i>
                <input pInputText type="text" (input)="onGlobalFilter(dt, $event)" placeholder="Search Mail" class="w-full sm:w-auto"/>
            </span>
        </div>
    </ng-template>
    <ng-template pTemplate="body" let-mail>
        <tr (mouseenter)="toggleOptions($event, options, date)" (mouseleave)="toggleOptions($event, options, date)" (click)="onRowSelect(mail.id)" class="cursor-pointer">
            <td style="width: 4rem" class="pl-3">
                <p-tableCheckbox [value]="mail" (click)="$event.stopPropagation()" (touchend)="$event.stopPropagation()"></p-tableCheckbox>
            </td>
            <td *ngIf="!mail.trash && !mail.spam" style="width: 4rem">
                <span (click)="onStar($event, mail.id)" (touchend)="onStar($event, mail.id)" class="cursor-pointer">
                    <i class="pi pi-fw text-xl" [ngClass]="{'pi-star-fill': mail.starred, 'pi-star': !mail.starred}"></i>
                </span>
            </td>
            <td *ngIf="!mail.trash && !mail.spam" style="width: 4rem">
                <span (click)="onBookmark($event, mail.id)" (touchend)="onBookmark($event, mail.id)" class="cursor-pointer">
                    <i class="pi pi-fw text-xl" [ngClass]="{'pi-bookmark-fill': mail.important, 'pi-bookmark': !mail.important}"></i>
                </span>
            </td>
            <td style="min-width: 4rem">
                <p-avatar [image]="mail.image ? 'assets/demo/images/avatar/' + mail.image : 'assets/layout/images/avatar.png'"></p-avatar>
            </td>
            <td style="min-width: 12rem" class="text-900 font-semibold">
                {{mail.from || mail.to}}
            </td>
            <td style="min-width: 12rem">
                <span class="font-medium white-space-nowrap overflow-hidden text-overflow-ellipsis block" style="max-width: 30rem">
                    {{mail.title}}
                </span>
            </td>
            <td style="min-width: 10rem;">
                <div class="flex justify-content-end w-full px-0">
                    <span #date class="text-700 font-semibold white-space-nowrap">
                        {{mail.date}}
                    </span>
                    <div style="display: none" #options>
                        <button pButton pRipple icon="pi pi-inbox" class="h-2rem w-2rem mr-2" (click)="onArchive($event, mail.id)" pTooltip="Archive" tooltipPosition="top" type="button"></button>
                        <button pButton pRipple icon="pi pi-reply" class="p-button-secondary h-2rem w-2rem mr-2" (click)="onReply($event, mail)" pTooltip="Reply" tooltipPosition="top" type="button"></button>
                        <button pButton pRipple icon="pi pi-trash" class="p-button-danger h-2rem w-2rem" (click)="onTrash($event, mail)" pTooltip="Trash" tooltipPosition="top" type="button"></button>
                    </div>
                </div>
            </td>
        </tr>
    </ng-template>
</p-table>

<p-dialog [(visible)]="dialogVisible" (onHide)="dialogVisible = false" [closable]="true" header="New Message" [modal]="true" styleClass="mx-3 sm:mx-0 sm:w-full md:w-8 lg:w-6" contentStyleClass="border-round-bottom border-top-1 surface-border p-0">
    <app-mail-reply [content]="mail" (hide)="dialogVisible = false"></app-mail-reply>
</p-dialog>

================
File: src/app/demo/components/apps/mail/mail-table/mail-table.component.ts
================
import { Component, OnInit, Input } from '@angular/core';
import { Router } from '@angular/router';
import { MenuItem, MessageService } from 'primeng/api';
import { Table } from 'primeng/table';
import { Mail } from 'src/app/demo/api/mail';
import { MailService } from 'src/app/demo/components/apps/mail/service/mail.service';

@Component({
    selector: 'app-mail-table',
    templateUrl: './mail-table.component.html'
})
export class MailTableComponent implements OnInit {

    @Input() mails!: Mail[];

    menuItems: MenuItem[] = [];

    selectedMails: Mail[] = [];

    mail: Mail = {};

    dialogVisible: boolean = false;

    constructor(private router: Router, private mailService: MailService, private messageService: MessageService) { }

    ngOnInit(): void {

        this.menuItems = [
            { label: 'Archive', icon: 'pi pi-fw pi-file', command: () => this.onArchiveMultiple() },
            { label: 'Spam', icon: 'pi pi-fw pi-ban', command: () => this.onSpamMultiple() },
            { label: 'Delete', icon: 'pi pi-fw pi-trash', command: () => this.onDeleteMultiple() },
        ];
    }

    toggleOptions(event: Event, opt: HTMLElement, date: HTMLElement) {
        if (event.type === 'mouseenter') {
            opt.style.display = 'flex';
            date.style.display = 'none';
        } else {
            opt.style.display = 'none';
            date.style.display = 'flex';
        }
    }

    onRowSelect(id: number) {
        this.router.navigate(['/apps/mail/detail/', id]);
    }

    onStar(event: Event, id: number) {
        event.stopPropagation();
        this.mailService.onStar(id);
    }

    onArchive(event: Event, id: number) {
        event.stopPropagation();
        this.mailService.onArchive(id);
        this.messageService.add({ severity: 'info', summary: 'Info', detail: 'Mail archived', life: 3000 });
    }

    onBookmark(event: Event, id: number) {
        event.stopPropagation();
        this.mailService.onBookmark(id);
    }

    onDelete(id: number) {
        this.mailService.onDelete(id);
        this.messageService.add({ severity: 'info', summary: 'Info', detail: 'Mail deleted', life: 3000 });
    }

    onDeleteMultiple() {
        if (this.selectedMails && this.selectedMails.length > 0) {
            this.mailService.onDeleteMultiple(this.selectedMails);
            this.messageService.add({ severity: 'info', summary: 'Info', detail: 'Mails deleted', life: 3000 });
        }
    }

    onSpamMultiple() {
        if (this.selectedMails && this.selectedMails.length > 0) {
            this.mailService.onSpamMultiple(this.selectedMails);
            this.messageService.add({ severity: 'info', summary: 'Info', detail: 'Moved to spam', life: 3000 });
        }
    }

    onArchiveMultiple() {
        if (this.selectedMails && this.selectedMails.length > 0) {
            this.mailService.onArchiveMultiple(this.selectedMails);
            this.messageService.add({ severity: 'info', summary: 'Info', detail: 'Moved to archive', life: 3000 });
        }
    }

    onTrash(event: Event, mail: Mail) {
        event.stopPropagation();
        if (mail.trash) {
            this.onDelete(mail.id)
        }
        this.mailService.onTrash(mail.id);
    }

    onReply(event: Event, mail: Mail) {
        event.stopPropagation();
        this.mail = mail;
        this.dialogVisible = true;
    }
    
    onGlobalFilter(table: Table, event: Event) {
        table.filterGlobal((event.target as HTMLInputElement).value, 'contains');
    }

}

================
File: src/app/demo/components/apps/mail/mail-trash/mail-trash.component.html
================
<app-mail-table [mails]="trashMails"></app-mail-table>

================
File: src/app/demo/components/apps/mail/mail-trash/mail-trash.component.ts
================
import { Component, OnDestroy } from '@angular/core';
import { Subscription } from 'rxjs';
import { Mail } from 'src/app/demo/api/mail';
import { MailService } from 'src/app/demo/components/apps/mail/service/mail.service';

@Component({
    templateUrl: './mail-trash.component.html'
})
export class MailTrashComponent implements OnDestroy {

    trashMails: Mail[] = [];

    subscription: Subscription;

    constructor(private mailService: MailService) {
        this.subscription = this.mailService.mails$.subscribe(data => {
            this.trashMails = data.filter(d => d.trash);
        });
    }

    ngOnDestroy() {
        this.subscription.unsubscribe();
    }

}

================
File: src/app/demo/components/apps/mail/mail.app-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { MailAppComponent } from './mail.app.component';
import { MailInboxComponent } from './mail-inbox/mail-inbox.component';
import { MailComposeComponent } from './mail-compose/mail-compose.component';
import { MailDetailComponent } from './mail-detail/mail-detail.component';
import { MailArchiveComponent } from './mail-archive/mail-archive.component';
import { MailImportantComponent } from './mail-important/mail-important.component';
import { MailSentComponent } from './mail-sent/mail-sent.component';
import { MailSpamComponent } from './mail-spam/mail-spam.component';
import { MailStarredComponent } from './mail-starred/mail-starred.component';
import { MailTrashComponent } from './mail-trash/mail-trash.component';

@NgModule({
    imports: [RouterModule.forChild([
        {
            path: '', component: MailAppComponent, children: [
                { path: '', redirectTo: 'inbox', pathMatch: 'full' },
                { path: 'inbox', data: { breadcrumb: 'Inbox' }, component: MailInboxComponent },
                { path: 'detail/:id', data: { breadcrumb: 'Detail' }, component: MailDetailComponent },
                { path: 'compose', data: { breadcrumb: 'Compose' }, component: MailComposeComponent },
                { path: 'archived', data: { breadcrumb: 'Archived' }, component: MailArchiveComponent },
                { path: 'important', data: { breadcrumb: 'Important' }, component: MailImportantComponent },
                { path: 'sent', data: { breadcrumb: 'Sent' }, component: MailSentComponent },
                { path: 'spam', data: { breadcrumb: 'Spam' }, component: MailSpamComponent },
                { path: 'starred', data: { breadcrumb: 'Starred' }, component: MailStarredComponent },
                { path: 'trash', data: { breadcrumb: 'Trash' }, component: MailTrashComponent }
            ]
        }
    ])],
    exports: [RouterModule]
})
export class MailAppRoutingModule { }

================
File: src/app/demo/components/apps/mail/mail.app.component.html
================
<p-toast></p-toast>
<div class="card">
    <div class="flex flex-column md:flex-row gap-4">
        <div class="w-full md:w-3 xl:w-2 xl:p-3">
            <app-mail-sidebar></app-mail-sidebar>
        </div>
        <div class="md:w-9 xl:w-10 xl:p-3">
            <router-outlet></router-outlet>
        </div>
    </div>
</div>

================
File: src/app/demo/components/apps/mail/mail.app.component.ts
================
import { Component } from '@angular/core';

@Component({
    templateUrl: './mail.app.component.html',
})
export class MailAppComponent {}

================
File: src/app/demo/components/apps/mail/mail.app.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { MailAppRoutingModule } from './mail.app-routing.module';
import { MailAppComponent } from './mail.app.component';
import { MailInboxComponent } from './mail-inbox/mail-inbox.component';
import { MailComposeComponent } from './mail-compose/mail-compose.component';
import { MailDetailComponent } from './mail-detail/mail-detail.component';
import { MailReplyComponent } from './mail-reply/mail-reply.component';
import { MailSidebarComponent } from './mail-sidebar/mail-sidebar.component';
import { MailTableComponent } from './mail-table/mail-table.component';
import { MailArchiveComponent } from './mail-archive/mail-archive.component';
import { MailImportantComponent } from './mail-important/mail-important.component';
import { MailSentComponent } from './mail-sent/mail-sent.component';
import { MailSpamComponent } from './mail-spam/mail-spam.component';
import { MailStarredComponent } from './mail-starred/mail-starred.component';
import { MailTrashComponent } from './mail-trash/mail-trash.component';
import { MenuModule } from 'primeng/menu';
import { ButtonModule } from 'primeng/button'
import { RippleModule } from 'primeng/ripple';
import { TableModule } from 'primeng/table';
import { InputTextModule } from 'primeng/inputtext';
import { CheckboxModule } from 'primeng/checkbox';
import { AvatarModule } from 'primeng/avatar';
import { EditorModule } from 'primeng/editor';
import { FileUploadModule } from 'primeng/fileupload';
import { ToastModule } from 'primeng/toast';
import { DialogModule } from 'primeng/dialog';
import { MessageService } from 'primeng/api';
import { MailService } from './service/mail.service';

@NgModule({
    imports: [
        CommonModule,
        FormsModule,
        MailAppRoutingModule,
        MenuModule,
        ButtonModule,
        RippleModule,
        TableModule,
        InputTextModule,
        CheckboxModule,
        AvatarModule,
        EditorModule,
        ToastModule,
        FileUploadModule,
        DialogModule
    ],
    declarations: [
        MailAppComponent,
        MailInboxComponent,
        MailComposeComponent,
        MailDetailComponent,
        MailSidebarComponent,
        MailReplyComponent,
        MailTableComponent,
        MailArchiveComponent,
        MailImportantComponent,
        MailSentComponent,
        MailSpamComponent,
        MailStarredComponent,
        MailTrashComponent
    ],
    providers: [MessageService, MailService]
})
export class MailAppModule { }

================
File: src/app/demo/components/apps/mail/service/mail.service.ts
================
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Mail } from 'src/app/demo/api/mail';
import { BehaviorSubject } from 'rxjs';

@Injectable()
export class MailService {

    private _mails: Mail[] = [];

    private mails = new BehaviorSubject<Mail[]>(this._mails);

    mails$ = this.mails.asObservable();

    constructor(private http: HttpClient) {
        this.http.get<any>('assets/demo/data/mail.json')
            .toPromise()
            .then(res => res.data as Mail[])
            .then(data => {
                this.updateMails(data);
            });
    }

    updateMails(data: Mail[]) {
        this._mails = data;
        this.mails.next(data);
    }

    onStar(id: number) {
        this._mails = this._mails.map(m => m.id === id ? ({ ...m, starred: !m.starred }) : m);
        this.mails.next(this._mails);
    }

    onArchive(id: number) {
        this._mails = this._mails.map(m => m.id === id ? ({ ...m, archived: !m.archived }) : m);
        this.mails.next(this._mails);
    }

    onBookmark(id: number) {
        this._mails = this._mails.map(m => m.id === id ? ({ ...m, important: !m.important }) : m);
        this.mails.next(this._mails);
    }

    onDelete(id: number) {
        this._mails = this._mails.filter(m => m.id !== id);
        this.mails.next(this._mails);
    }

    onDeleteMultiple(mails: Mail[]) {
        let idArray = mails.map(m => Number(m.id));
        this._mails = this._mails.filter(m => idArray.indexOf(m.id) == -1);
        this.mails.next(this._mails);
    }

    onArchiveMultiple(mails: Mail[]) {
        let idArray = mails.map(m => m.id);

        for (let i = 0; i < this._mails.length; i++) {
            let mail = this._mails[i];

            if (idArray.indexOf(mail.id) !== -1) {
                mail.archived = true;
                this._mails[i] = mail;
            }
        }

        this.mails.next(this._mails);
    }

    onSpamMultiple(mails: Mail[]) {
        let idArray = mails.map(m => m.id);

        for (let i = 0; i < this._mails.length; i++) {
            let mail = this._mails[i];

            if (idArray.indexOf(mail.id) !== -1) {
                mail = { ...mail, spam: true, important: false, starred: false, archived: false };
                this._mails[i] = mail;
            }
        }

        this.mails.next(this._mails);
    }

    onTrash(id: number) {
        this._mails = this._mails.map(m => m.id === id ? ({ ...m, trash: true }) : m);
        this.mails.next(this._mails);
    }

    onSend(mail: Mail) {
        if (!mail.id) {
            mail.id = this.generateId();
        }
        if (!mail.title) {
            mail.title = 'Untitled';
        }

        mail.date = this.generateDate();
        this._mails.push(mail);
        this.mails.next(this._mails);
    }


    generateId() {
        let text = "";
        let possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

        for (var i = 0; i < 5; i++) {
            text += possible.charAt(Math.floor(Math.random() * possible.length));
        }

        return text;
    }

    generateDate() {
        return new Date().toDateString().split(' ').slice(1, 4).join(' ');
    }
}

================
File: src/app/demo/components/apps/tasklist/create-task/create-task.component.html
================
<p-toast></p-toast>
<p-dialog [header]="dialogConfig.header || ''" [(visible)]="dialogConfig.visible" [modal]="true" [dismissableMask]="true" styleClass="mx-3 sm:mx-0 sm:w-full md:w-8 lg:w-6" contentStyleClass="border-round-bottom border-top-1 surface-border p-0">
    <div class="p-4">
        <div class="grid p-fluid formgrid">
            <div class="col-12 field">
                <label for="name" class="text-900 font-semibold">Task Name</label>
                <input id="name" type="text" placeholder="Title" pInputText [(ngModel)]="task.name" />
            </div>
            <div class="col-12 field">
                <label for="description" class="text-900 font-semibold">Description</label>
                <p-editor [(ngModel)]="task.description" [style]="{'height':'150px'}"></p-editor>
            </div>
            <div class="col-6 field mt-0">
                <label for="start" class="text-900 font-semibold">Start Date</label>
                <p-calendar appendTo="body" dateFormat="yy-mm-dd" [showTime]="false" inputId="start" placeholder="Start Date" [(ngModel)]="task.startDate"></p-calendar>
            </div>
            <div class="col-6 field mt-0">
                <label for="end" class="text-900 font-semibold">Due Date</label>
                <p-calendar appendTo="body" dateFormat="yy-mm-dd" [showTime]="false" inputId="end" placeholder="Due Date" [(ngModel)]="task.endDate"></p-calendar>
            </div>
            <div class="col-12 field">
                <label for="members" class="text-900 font-semibold">Add Team Member</label>
                <p-autoComplete appendTo="body" inputId="members" [(ngModel)]="task.members" [suggestions]="filteredMembers" (completeMethod)="filterMembers($event)" field="name" [multiple]="true" placeholder="Choose team members" [inputStyle]="{'height': '2.5rem'}">
                    <ng-template let-member pTemplate="selectedItem">
                        <div class="flex align-items-center">
                            <img src="assets/demo/images/avatar/{{member.image}}" [alt]="member.name" class="h-2rem w-2rem mr-2">
                            <span class="text-900 font-medium">{{member.name}}</span>
                        </div>
                    </ng-template>
                    <ng-template let-member pTemplate="item">
                        <div class="flex align-items-center border-round">
                            <img src="assets/demo/images/avatar/{{member.image}}" [alt]="member.name" class="h-2rem w-2rem mr-2">
                            <span class="text-900 font-medium">{{member.name}}</span>
                        </div>
                    </ng-template>
                </p-autoComplete>
            </div>
            <div class="col-12 flex justify-content-end mt-4">
                <button pButton pRipple class="p-button-outlined w-8rem mr-3" icon="pi pi-times" label="Cancel" (click)="cancelTask()"></button>
                <button pButton pRipple class="p-button-primary w-8rem" icon="pi pi-check" label="Save" (click)="save()"></button>
            </div>
        </div>
    </div>
</p-dialog>

================
File: src/app/demo/components/apps/tasklist/create-task/create-task.component.ts
================
import { Component, OnInit, OnDestroy } from '@angular/core';
import { MessageService } from 'primeng/api';
import { Member } from 'src/app/demo/api/member';
import { DialogConfig, Task } from 'src/app/demo/api/task';
import { TaskService } from '../service/task.service';
import { MemberService } from 'src/app/demo/service/member.service';
import { Subscription } from 'rxjs';

@Component({
    selector: 'app-create-task',
    templateUrl: './create-task.component.html',
    providers: [MessageService]
})
export class CreateTaskComponent implements OnInit, OnDestroy {

    task!: Task;

    members: Member[] = [];

    filteredMembers: Member[] = [];

    dialogConfig: DialogConfig = {header: '', visible: false};

    subscription: Subscription;

    dialogSubscription: Subscription;

    constructor(private memberService: MemberService, private messageService: MessageService, private taskService: TaskService) {
        this.subscription = this.taskService.selectedTask$.subscribe(data => this.task = data);
        this.dialogSubscription = this.taskService.dialogSource$.subscribe(data => {
            this.dialogConfig = data;
            
            if(this.dialogConfig.newTask) {
                this.resetTask();
            }
        });
    }

    ngOnInit(): void {
        this.memberService.getMembers().then(members => this.members = members);
        this.resetTask();
    }

    filterMembers(event: any) {
        let filtered: Member[] = [];
        let query = event.query;

        for (let i = 0; i < this.members.length; i++) {
            let member = this.members[i];
            if (member.name?.toLowerCase().indexOf(query.toLowerCase()) == 0) {
                filtered.push(member);
            }
        }

        this.filteredMembers = filtered;
    }

    save() {
        this.task.id = Math.floor(Math.random() * 1000);
        this.messageService.add({ severity: 'success', summary: 'Success', detail: `Task "${this.task.name}" created successfully.` });
        this.taskService.addTask(this.task);
        this.taskService.closeDialog();
    }

    cancelTask(){
        this.resetTask()
        this.taskService.closeDialog();
    }

    resetTask() {
        this.task = { id: this.task && this.task.id ? this.task.id : Math.floor(Math.random() * 1000), status: 'Waiting' };
    }

    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    
}

================
File: src/app/demo/components/apps/tasklist/service/task.service.ts
================
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { DialogConfig, Task } from 'src/app/demo/api/task';

@Injectable()
export class TaskService {

    dialogConfig: DialogConfig = {
        visible: false,
        header: '',
        newTask: false
    };

    tasks: Task[] = [];

    private taskSource = new BehaviorSubject<Task[]>(this.tasks);

    private selectedTask = new Subject<Task>();

    private dialogSource = new BehaviorSubject<DialogConfig>(this.dialogConfig);

    taskSource$ = this.taskSource.asObservable();

    selectedTask$ = this.selectedTask.asObservable();

    dialogSource$ = this.dialogSource.asObservable();

    constructor(private http: HttpClient) {
        this.http.get<any>('assets/demo/data/tasks.json')
            .toPromise()
            .then(res => res.data as Task[])
            .then(data => {
                this.tasks = data;
                this.taskSource.next(data);
            });
    }

    addTask(task: Task) {
        if (this.tasks.includes(task)) {
            this.tasks = this.tasks.map(t => t.id === task.id ? task : t);
        }
        else {
            this.tasks = [...this.tasks, task];
        }

        this.taskSource.next(this.tasks);
    }

    removeTask(id: number) {
        this.tasks = this.tasks.filter(t => t.id !== id);
        this.taskSource.next(this.tasks);
    }

    onTaskSelect(task: Task) {
        this.selectedTask.next(task);
    }

    markAsCompleted(task: Task) {
        this.tasks = this.tasks.map(t => t.id === task.id ? task : t);
        this.taskSource.next(this.tasks);
    }

    showDialog(header: string, newTask: boolean) {
        this.dialogConfig = {
            visible: true,
            header: header,
            newTask: newTask
        };

        this.dialogSource.next(this.dialogConfig);
    }

    closeDialog() {
        this.dialogConfig = {
            visible: false
        }

        this.dialogSource.next(this.dialogConfig);
    }

}

================
File: src/app/demo/components/apps/tasklist/task-list/task-list.component.html
================
<div>
    <div class="text-900 font-semibold text-lg mt-5 mb-3 border-bottom-1 surface-border py-3">{{title}}</div>
    <ul class="list-none p-0 m-0">
        <li *ngFor="let task of taskList" class="flex flex-column gap-3 md:flex-row md:align-items-center p-2 border-bottom-1 surface-border">
            <div class="flex align-items-center flex-1">
                <p-checkbox [binary]="true" (onChange)="onCheckboxChange($event, task)" [(ngModel)]="task.completed" [inputId]="task.id.toString()"></p-checkbox>
                <label for="task.id" style="word-break: break-word;" class="font-medium ml-2" [ngClass]="{'line-through': task.completed}">{{task.name}}</label>
            </div>
            <div class="flex flex-1 gap-3 flex-column sm:flex-row sm:justify-content-between">
                <div class="flex align-items-center">
                    <span *ngIf="task.comments" class="flex align-items-center font-semibold mr-3"><i class="pi pi-comment mr-2"></i>{{task.comments}}</span>
                    <span *ngIf="task.attachments" class="flex align-items-center font-semibold mr-3"><i class="pi pi-paperclip mr-2"></i>{{task.attachments}}</span>
                    <span class="flex align-items-center font-semibold white-space-nowrap" *ngIf="task.startDate"><i class="pi pi-clock mr-2"></i>{{parseDate(task.startDate)}}</span>
                </div>
                <div class="flex align-items-center sm:justify-content-end">
                    <p-avatarGroup styleClass="mr-3">
                        <p-avatar *ngFor="let member of task.members | slice:0:4" image="assets/demo/images/avatar/{{member.image}}" size="large" shape="circle"></p-avatar>
                        <p-avatar *ngIf="task && task.members && task.members.length > 4" label="+ {{task.members.length - 4}}" shape="circle" size="large" [style]="{'background-color':'#ffffff', 'color': '#212121', 'border':'2px solid var(--surface-border)'}"></p-avatar>
                    </p-avatarGroup>
                    <button pButton pRipple type="button" icon="pi pi-ellipsis-v" class="p-button-rounded p-button-text z-3 ml-auto sm:ml-0" (click)="toggleMenu($event, task)"></button>
                    <p-menu #menu [popup]="true" [model]="menuItems" styleClass="w-8rem"></p-menu>
                </div>
            </div>
        </li>
    </ul>
</div>

================
File: src/app/demo/components/apps/tasklist/task-list/task-list.component.ts
================
import { Component, OnInit, Input, ViewChild, ChangeDetectionStrategy } from '@angular/core';
import { MenuItem } from 'primeng/api';
import { Menu } from 'primeng/menu';
import { Task } from 'src/app/demo/api/task';
import { TaskService } from '../service/task.service';

@Component({
    selector: 'app-task-list',
    templateUrl: './task-list.component.html',
    changeDetection: ChangeDetectionStrategy.OnPush
})
export class TaskListComponent implements OnInit {

    @Input() taskList!: Task[];

    @Input() title!: string;

    @ViewChild('menu') menu!: Menu;

    menuItems: MenuItem[] = [];

    clickedTask!: Task;

    constructor(private taskService: TaskService) { }

    ngOnInit(): void {
        this.menuItems = [
            { label: 'Edit', icon: 'pi pi-pencil', command: () => this.onEdit() },
            { label: 'Delete', icon: 'pi pi-trash', command: () => this.handleDelete() }
        ];
    }

    parseDate(date: Date) {
        let d = new Date(date);
        return d.toUTCString().split(' ').slice(1, 3).join(' ');
    }

    handleDelete() {
        this.taskService.removeTask(this.clickedTask.id);
    }

    toggleMenu(event: Event, task: Task) {
        this.clickedTask = task;
        this.menu.toggle(event);
    }

    onEdit() {
        this.taskService.onTaskSelect(this.clickedTask);
        this.taskService.showDialog('Edit Task', false);
    }

    onCheckboxChange(event: any, task: Task) {
        event.originalEvent.stopPropagation();
        task.completed = event.checked;
        this.taskService.markAsCompleted(task);
    }
}

================
File: src/app/demo/components/apps/tasklist/tasklist.app-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { TaskListAppComponent } from './tasklist.app.component';

@NgModule({
    imports: [RouterModule.forChild([
        { path: '', component: TaskListAppComponent }
    ])],
    exports: [RouterModule]
})
export class TaskListAppRoutingModule { }

================
File: src/app/demo/components/apps/tasklist/tasklist.app.component.html
================
<div class="card">
    <div class="flex justify-content-between align-items-center mb-5">
        <span class="text-900 text-xl font-semibold">Task List</span>
        <button pButton pRipple class="p-button-outlined font-semibold" icon="pi pi-plus" label="Create Task" (click)="showDialog()"></button>
    </div>
    <app-task-list [taskList]="todo" title="ToDo"></app-task-list>
    <app-task-list [taskList]="completed" title="Completed"></app-task-list>
</div>

<app-create-task></app-create-task>

================
File: src/app/demo/components/apps/tasklist/tasklist.app.component.ts
================
import { Component, OnDestroy } from '@angular/core';
import { Task } from 'src/app/demo/api/task';
import { TaskService } from './service/task.service';
import { Subscription } from 'rxjs';

@Component({
    templateUrl: './tasklist.app.component.html'
})
export class TaskListAppComponent implements OnDestroy {

    subscription: Subscription;

    todo: Task[] = [];

    completed: Task[] = [];

    constructor(private taskService: TaskService) {
        this.subscription = this.taskService.taskSource$.subscribe(data => this.categorize(data));
    }

    categorize(tasks: Task[]) {
        this.todo = tasks.filter(t => t.completed !== true);
        this.completed = tasks.filter(t => t.completed);
    }

    ngOnDestroy() {
        this.subscription.unsubscribe();
    }

    showDialog() {
        this.taskService.showDialog('Create Task', true);
    }
}

================
File: src/app/demo/components/apps/tasklist/tasklist.app.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { TaskListAppRoutingModule } from './tasklist.app-routing.module';
import { TaskListAppComponent } from './tasklist.app.component';
import { CreateTaskComponent } from './create-task/create-task.component';
import { ButtonModule } from 'primeng/button';
import { InputTextModule } from 'primeng/inputtext';
import { EditorModule } from 'primeng/editor'
import { CalendarModule } from 'primeng/calendar';
import { AutoCompleteModule } from 'primeng/autocomplete';
import { ToastModule } from 'primeng/toast';
import { AvatarModule } from 'primeng/avatar';
import { MenuModule } from 'primeng/menu';
import { AvatarGroupModule } from 'primeng/avatargroup';
import { CheckboxModule } from 'primeng/checkbox';
import { DialogModule } from 'primeng/dialog';
import { TaskListComponent } from './task-list/task-list.component'
import { TaskService } from './service/task.service';
import { RippleModule } from 'primeng/ripple';

@NgModule({
    imports: [
        CommonModule,
        FormsModule,
        TaskListAppRoutingModule,
        ButtonModule,
        InputTextModule,
        EditorModule,
        CalendarModule,
        ToastModule,
        AutoCompleteModule,
        AvatarModule,
        AvatarGroupModule,
        CheckboxModule,
        MenuModule,
        DialogModule,
        RippleModule
    ],
    declarations: [TaskListAppComponent, CreateTaskComponent, TaskListComponent],
    providers: [TaskService]
})
export class TaskListAppModule { }

================
File: src/app/demo/components/auth/accessdenied/accessdenied-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { AccessdeniedComponent } from './accessdenied.component';

@NgModule({
    imports: [RouterModule.forChild([
        { path: '', component: AccessdeniedComponent }
    ])],
    exports: [RouterModule]
})
export class AccessdeniedRoutingModule {}

================
File: src/app/demo/components/auth/accessdenied/accessdenied.component.html
================
<svg viewBox="0 0 960 540" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" class="min-h-screen min-w-screen fixed left-0" style="bottom:-10rem" preserveAspectRatio="none">
    <rect x="0" y="0" width="960" height="540" fill="var(--surface-ground)"></rect>
    <path d="M0 331L26.7 321C53.3 311 106.7 291 160 291C213.3 291 266.7 311 320 329.5C373.3 348 426.7 365 480 373.2C533.3 381.3 586.7 380.7 640 373.8C693.3 367 746.7 354 800 341.2C853.3 328.3 906.7 315.7 933.3 309.3L960 303L960 541L933.3 541C906.7 541 853.3 541 800 541C746.7 541 693.3 541 640 541C586.7 541 533.3 541 480 541C426.7 541 373.3 541 320 541C266.7 541 213.3 541 160 541C106.7 541 53.3 541 26.7 541L0 541Z" fill="var(--purple-500)" stroke-linecap="round" stroke-linejoin="miter"></path>
</svg>
<div class="px-5 min-h-screen flex justify-content-center align-items-center -mt-8 sm:mt-0">
    <div class="z-1 text-center">
        <div class="text-900 font-bold text-8xl mb-4">Access Denied</div>
        <p class="line-height-3 mt-0 mb-5 text-700 text-xl font-medium">You don't have the permissions to access this page</p>
        <p-button [routerLink]="['/']" styleClass="p-button-help font-medium p-button-raised">Go to Dashboard</p-button>
    </div>
</div>

================
File: src/app/demo/components/auth/accessdenied/accessdenied.component.ts
================
import { Component } from '@angular/core';

@Component({
    templateUrl: './accessdenied.component.html'
})
export class AccessdeniedComponent { }

================
File: src/app/demo/components/auth/accessdenied/accessdenied.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { AccessdeniedRoutingModule } from './accessdenied-routing.module';
import { AccessdeniedComponent } from './accessdenied.component'
import { ButtonModule } from 'primeng/button';

@NgModule({
    imports: [
        CommonModule,
        AccessdeniedRoutingModule,
        ButtonModule
    ],
    declarations: [AccessdeniedComponent]
})
export class AccessdeniedModule {}

================
File: src/app/demo/components/auth/auth-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';

@NgModule({
    imports: [RouterModule.forChild([
        { path: 'error', loadChildren: () => import('./error/error.module').then(m => m.ErrorModule) },
        { path: 'access', loadChildren: () => import('./accessdenied/accessdenied.module').then(m => m.AccessdeniedModule) },
        { path: 'login', loadChildren: () => import('./login/login.module').then(m => m.LoginModule) },
        { path: 'forgotpassword', loadChildren: () => import('./forgotpassword/forgotpassword.module').then(m => m.ForgotPasswordModule) },
        { path: 'register', loadChildren: () => import('./register/register.module').then(m => m.RegisterModule) },
        { path: 'newpassword', loadChildren: () => import('./newpassword/newpassword.module').then(m => m.NewPasswordModule) },
        { path: 'verification', loadChildren: () => import('./verification/verification.module').then(m => m.VerificationModule) },
        { path: 'lockscreen', loadChildren: () => import('./lockscreen/lockscreen.module').then(m => m.LockScreenModule) },
        { path: '**', redirectTo: '/notfound' }
    ])],
    exports: [RouterModule]
})
export class AuthRoutingModule { }

================
File: src/app/demo/components/auth/auth.guard.ts
================
import { Injectable } from '@angular/core';
import { CanActivate, Router } from '@angular/router';
import { getCurrentUser } from 'aws-amplify/auth';

@Injectable({
    providedIn: 'root'
})
export class AuthGuard implements CanActivate {
    constructor(private router: Router) {}

    async canActivate(): Promise<boolean> {
        try {
            await getCurrentUser(); // Check if user is authenticated
            return true;
        } catch (error) {
            console.warn("User not authenticated, redirecting to login...");
            this.router.navigate(['/auth/login']);
            return false;
        }
    }
}

================
File: src/app/demo/components/auth/auth.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { AuthRoutingModule } from './auth-routing.module';

@NgModule({
    declarations: [],
    imports: [
        CommonModule,
        AuthRoutingModule
    ]
})
export class AuthModule { }

================
File: src/app/demo/components/auth/error/error-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { ErrorComponent } from './error.component';

@NgModule({
    imports: [RouterModule.forChild([
        { path: '', component: ErrorComponent }
    ])],
    exports: [RouterModule]
})
export class ErrorRoutingModule { }

================
File: src/app/demo/components/auth/error/error.component.html
================
<svg viewBox="0 0 960 540" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" class="min-h-screen min-w-screen fixed left-0" style="bottom:-10rem" preserveAspectRatio="none">
    <rect x="0" y="0" width="960" height="540" fill="var(--surface-ground)"></rect>
    <path d="M0 331L26.7 321C53.3 311 106.7 291 160 291C213.3 291 266.7 311 320 329.5C373.3 348 426.7 365 480 373.2C533.3 381.3 586.7 380.7 640 373.8C693.3 367 746.7 354 800 341.2C853.3 328.3 906.7 315.7 933.3 309.3L960 303L960 541L933.3 541C906.7 541 853.3 541 800 541C746.7 541 693.3 541 640 541C586.7 541 533.3 541 480 541C426.7 541 373.3 541 320 541C266.7 541 213.3 541 160 541C106.7 541 53.3 541 26.7 541L0 541Z" fill="var(--red-500)" stroke-linecap="round" stroke-linejoin="miter"></path>
</svg>
<div class="px-5 min-h-screen flex justify-content-center align-items-center">
    <div class="z-1 text-center">
        <div class="text-900 font-bold text-8xl mb-4">ERROR</div>
        <p class="line-height-3 mt-0 mb-5 text-700 text-xl font-medium">Something went wrong!</p>
        <p-button [routerLink]="['/']" styleClass="p-button-danger font-medium p-button-raised">Go to Dashboard</p-button>
    </div>
</div>

================
File: src/app/demo/components/auth/error/error.component.ts
================
import { Component } from '@angular/core';

@Component({
    templateUrl: './error.component.html'
})
export class ErrorComponent {

}

================
File: src/app/demo/components/auth/error/error.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ErrorRoutingModule } from './error-routing.module';
import { ErrorComponent } from './error.component';
import { ButtonModule } from 'primeng/button';

@NgModule({
    imports: [
        CommonModule,
        ErrorRoutingModule,
        ButtonModule
    ],
    declarations: [ErrorComponent]
})
export class ErrorModule { }

================
File: src/app/demo/components/auth/forgotpassword/forgotpassword-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { ForgotPasswordComponent } from './forgotpassword.component';

@NgModule({
    imports: [RouterModule.forChild([
        { path: '', component: ForgotPasswordComponent }
    ])],
    exports: [RouterModule]
})
export class ForgotPasswordRoutingModule { }

================
File: src/app/demo/components/auth/forgotpassword/forgotpassword.component.html
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1600 800" class="fixed left-0 top-0 min-h-screen min-w-screen" preserveAspectRatio="none">
    <rect [attr.fill]="dark ? 'var(--primary-900)' : 'var(--primary-500)'" width="1600" height="800"/>
    <path [attr.fill]="dark ? 'var(--primary-800)' : 'var(--primary-400)'" d="M478.4 581c3.2 0.8 6.4 1.7 9.5 2.5c196.2 52.5 388.7 133.5 593.5 176.6c174.2 36.6 349.5 29.2 518.6-10.2V0H0v574.9c52.3-17.6 106.5-27.7 161.1-30.9C268.4 537.4 375.7 554.2 478.4 581z"/>
    <path [attr.fill]="dark ? 'var(--primary-700)' : 'var(--primary-300)'" d="M181.8 259.4c98.2 6 191.9 35.2 281.3 72.1c2.8 1.1 5.5 2.3 8.3 3.4c171 71.6 342.7 158.5 531.3 207.7c198.8 51.8 403.4 40.8 597.3-14.8V0H0v283.2C59 263.6 120.6 255.7 181.8 259.4z"/>
    <path [attr.fill]="dark ? 'var(--primary-600)' : 'var(--primary-200)'" d="M454.9 86.3C600.7 177 751.6 269.3 924.1 325c208.6 67.4 431.3 60.8 637.9-5.3c12.8-4.1 25.4-8.4 38.1-12.9V0H288.1c56 21.3 108.7 50.6 159.7 82C450.2 83.4 452.5 84.9 454.9 86.3z"/>
    <path [attr.fill]="dark ? 'var(--primary-500)' : 'var(--primary-100)'" d="M1397.5 154.8c47.2-10.6 93.6-25.3 138.6-43.8c21.7-8.9 43-18.8 63.9-29.5V0H643.4c62.9 41.7 129.7 78.2 202.1 107.4C1020.4 178.1 1214.2 196.1 1397.5 154.8z"/>
</svg>
<div class="px-5 min-h-screen flex justify-content-center align-items-center">
    <div class="border-1 surface-border surface-card border-round py-7 px-4 md:px-7 z-1">
        <div class="mb-4">
            <div class="text-900 text-xl font-bold mb-2">Forgot Password</div>
            <span class="text-600 font-medium">Enter your email to reset your password</span>
        </div>
        <div class="flex flex-column">
            <span class="p-input-icon-left w-full mb-4">
                <i class="pi pi-envelope"></i>
                <input id="email" type="text" pInputText class="w-full md:w-25rem" placeholder="Email">
            </span>
            <div class="flex flex-wrap gap-2 justify-content-between">
                <button pButton pRipple label="Cancel" class="flex-auto p-button-outlined" [routerLink]="['/']"></button>
                <button pButton pRipple label="Submit" class="flex-auto" [routerLink]="['/']"></button>
            </div>
        </div>
    </div>
</div>

<app-config [minimal]="true"></app-config>

================
File: src/app/demo/components/auth/forgotpassword/forgotpassword.component.ts
================
import { Component } from '@angular/core';
import { LayoutService } from 'src/app/layout/service/app.layout.service';

@Component({
    templateUrl: './forgotpassword.component.html',
})
export class ForgotPasswordComponent {
    constructor(private layoutService: LayoutService) {}

    get dark(): boolean {
        return this.layoutService.config().colorScheme !== 'light';
    }
}

================
File: src/app/demo/components/auth/forgotpassword/forgotpassword.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ForgotPasswordRoutingModule } from './forgotpassword-routing.module';
import { ForgotPasswordComponent } from './forgotpassword.component';
import { ButtonModule } from 'primeng/button';
import { InputTextModule } from 'primeng/inputtext';
import { AppConfigModule } from 'src/app/layout/config/app.config.module';

@NgModule({
    imports: [
        CommonModule,
        ButtonModule,
        InputTextModule,
        ForgotPasswordRoutingModule,
        AppConfigModule
    ],
    declarations: [ForgotPasswordComponent]
})
export class ForgotPasswordModule { }

================
File: src/app/demo/components/auth/lockscreen/lockscreen-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { LockScreenComponent } from './lockscreen.component';

@NgModule({
    imports: [RouterModule.forChild([
        { path: '', component: LockScreenComponent }
    ])],
    exports: [RouterModule]
})
export class LockScreenRoutingModule { }

================
File: src/app/demo/components/auth/lockscreen/lockscreen.component.html
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1600 800" class="fixed left-0 top-0 min-h-screen min-w-screen" preserveAspectRatio="none">
    <rect [attr.fill]="dark ? 'var(--primary-900)' : 'var(--primary-500)'" width="1600" height="800"/>
    <path [attr.fill]="dark ? 'var(--primary-800)' : 'var(--primary-400)'" d="M478.4 581c3.2 0.8 6.4 1.7 9.5 2.5c196.2 52.5 388.7 133.5 593.5 176.6c174.2 36.6 349.5 29.2 518.6-10.2V0H0v574.9c52.3-17.6 106.5-27.7 161.1-30.9C268.4 537.4 375.7 554.2 478.4 581z"/>
    <path [attr.fill]="dark ? 'var(--primary-700)' : 'var(--primary-300)'" d="M181.8 259.4c98.2 6 191.9 35.2 281.3 72.1c2.8 1.1 5.5 2.3 8.3 3.4c171 71.6 342.7 158.5 531.3 207.7c198.8 51.8 403.4 40.8 597.3-14.8V0H0v283.2C59 263.6 120.6 255.7 181.8 259.4z"/>
    <path [attr.fill]="dark ? 'var(--primary-600)' : 'var(--primary-200)'" d="M454.9 86.3C600.7 177 751.6 269.3 924.1 325c208.6 67.4 431.3 60.8 637.9-5.3c12.8-4.1 25.4-8.4 38.1-12.9V0H288.1c56 21.3 108.7 50.6 159.7 82C450.2 83.4 452.5 84.9 454.9 86.3z"/>
    <path [attr.fill]="dark ? 'var(--primary-500)' : 'var(--primary-100)'" d="M1397.5 154.8c47.2-10.6 93.6-25.3 138.6-43.8c21.7-8.9 43-18.8 63.9-29.5V0H643.4c62.9 41.7 129.7 78.2 202.1 107.4C1020.4 178.1 1214.2 196.1 1397.5 154.8z"/>
</svg>
<div class="px-5 min-h-screen flex justify-content-center align-items-center">
    <div class="border-1 surface-border surface-card border-round py-7 px-4 md:px-7 z-1">
        <div class="mb-6 flex flex-column align-items-center">
            <div class="text-900 text-xl font-bold mb-2">Screen Locked</div>
            <span class="text-600 font-medium mb-5">Please enter your password</span>
            <img src="assets/layout/images/avatar.png" class="w-3rem h-3rem mb-2" alt="Avatar">
            <span class="font-medium text-900 font-medium">Isabella Andolini</span>
        </div>
        <div class="flex flex-column">
            <span class="p-input-icon-left w-full mb-4">
                <i class="pi pi-lock"></i>
                <input id="password" type="password" pInputText class="w-full md:w-25rem" placeholder="Password">
            </span>
            <button pButton pRipple icon="pi pi-lock-open" label="Unlock" class="w-full" [routerLink]="['/']"></button>
        </div>
    </div>
</div>

<app-config [minimal]="true"></app-config>

================
File: src/app/demo/components/auth/lockscreen/lockscreen.component.ts
================
import { Component } from '@angular/core';
import { LayoutService } from 'src/app/layout/service/app.layout.service';

@Component({
    templateUrl: './lockscreen.component.html',
})
export class LockScreenComponent {
    constructor(private layoutService: LayoutService) {}

    get dark(): boolean {
        return this.layoutService.config().colorScheme !== 'light';
    }
}

================
File: src/app/demo/components/auth/lockscreen/lockscreen.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { LockScreenRoutingModule } from './lockscreen-routing.module';
import { LockScreenComponent } from './lockscreen.component';
import { InputTextModule } from 'primeng/inputtext';
import { ButtonModule } from 'primeng/button';
import { RippleModule } from 'primeng/ripple';
import { AppConfigModule } from 'src/app/layout/config/app.config.module';

@NgModule({
    imports: [
        CommonModule,
        FormsModule,
        LockScreenRoutingModule,
        InputTextModule,
        ButtonModule,
        RippleModule,
        AppConfigModule
    ],
    declarations: [LockScreenComponent]
})
export class LockScreenModule { }

================
File: src/app/demo/components/auth/login/login-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { LoginComponent } from './login.component';

@NgModule({
    imports: [RouterModule.forChild([
        { path: '', component: LoginComponent }
    ])],
    exports: [RouterModule]
})
export class LoginRoutingModule { }

================
File: src/app/demo/components/auth/login/login.component.html
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1600 800" class="fixed left-0 top-0 min-h-screen min-w-screen" preserveAspectRatio="none">
    <rect [attr.fill]="dark ? 'var(--primary-900)' : 'var(--primary-500)'" width="1600" height="800"/>
    <path [attr.fill]="dark ? 'var(--primary-800)' : 'var(--primary-400)'" d="M478.4 581c3.2 0.8 6.4 1.7 9.5 2.5c196.2 52.5 388.7 133.5 593.5 176.6c174.2 36.6 349.5 29.2 518.6-10.2V0H0v574.9c52.3-17.6 106.5-27.7 161.1-30.9C268.4 537.4 375.7 554.2 478.4 581z"/>
    <path [attr.fill]="dark ? 'var(--primary-700)' : 'var(--primary-300)'" d="M181.8 259.4c98.2 6 191.9 35.2 281.3 72.1c2.8 1.1 5.5 2.3 8.3 3.4c171 71.6 342.7 158.5 531.3 207.7c198.8 51.8 403.4 40.8 597.3-14.8V0H0v283.2C59 263.6 120.6 255.7 181.8 259.4z"/>
    <path [attr.fill]="dark ? 'var(--primary-600)' : 'var(--primary-200)'" d="M454.9 86.3C600.7 177 751.6 269.3 924.1 325c208.6 67.4 431.3 60.8 637.9-5.3c12.8-4.1 25.4-8.4 38.1-12.9V0H288.1c56 21.3 108.7 50.6 159.7 82C450.2 83.4 452.5 84.9 454.9 86.3z"/>
    <path [attr.fill]="dark ? 'var(--primary-500)' : 'var(--primary-100)'" d="M1397.5 154.8c47.2-10.6 93.6-25.3 138.6-43.8c21.7-8.9 43-18.8 63.9-29.5V0H643.4c62.9 41.7 129.7 78.2 202.1 107.4C1020.4 178.1 1214.2 196.1 1397.5 154.8z"/>
</svg>
<div class="px-5 min-h-screen flex justify-content-center align-items-center">
    <div class="border-1 surface-border surface-card border-round py-7 px-4 md:px-7 z-1">
        <div class="mb-4">
            <div class="text-900 text-xl font-bold mb-2">Log in</div>
            <span class="text-600 font-medium">Please enter your details</span>
        </div>

        <div *ngIf="errorMessage" class="text-red-500 mb-4">
            {{ errorMessage }}
        </div>

        <div class="flex flex-column">
            <span class="p-input-icon-left w-full mb-4">
                <i class="pi pi-envelope"></i>
                <input id="email" type="text" pInputText class="w-full md:w-25rem" placeholder="Email" [(ngModel)]="email">
            </span>

            <span class="p-input-icon-left w-full mb-4">
                <i class="pi pi-lock"></i>
                <input id="password" type="password" pInputText class="w-full md:w-25rem" placeholder="Password" [(ngModel)]="password">
            </span>

            <div class="mb-4 flex flex-wrap gap-3">
                <div>
                    <p-checkbox name="checkbox" value="val" [(ngModel)]="rememberMe" styleClass="mr-2" [binary]="true"></p-checkbox>
                    <label for="checkbox" class="text-900 font-medium mr-8">Remember Me</label>
                </div>
                <a [routerLink]="['/auth/forgotpassword']" class="text-primary font-bold">
                    Forgot password
                </a>
            </div>

            <button pButton pRipple label="Log In" class="w-full" (click)="onLogin()"></button>
        </div>

        <!-- "Not registered? Sign up!" link -->
        <div class="text-center mt-3">
            Not registered?
            <a [routerLink]="['/auth/register']" class="text-primary font-bold">
                Sign up!
            </a>
        </div>
    </div>
</div>

<app-config [minimal]="true"></app-config>

================
File: src/app/demo/components/auth/login/login.component.ts
================
import { Component, OnInit } from '@angular/core';
import { signIn, fetchAuthSession, getCurrentUser } from 'aws-amplify/auth';
import { Router } from '@angular/router';
import { LayoutService } from 'src/app/layout/service/app.layout.service';

@Component({
    templateUrl: './login.component.html',
})
export class LoginComponent implements OnInit {
    email: string = '';
    password: string = '';
    rememberMe: boolean = false;
    errorMessage: string = '';

    constructor(private layoutService: LayoutService, private router: Router) {}

    get dark(): boolean {
        return this.layoutService.config().colorScheme !== 'light';
    }

    async ngOnInit() {
        await this.checkIfLoggedIn(); 
    }


    async checkIfLoggedIn() {
        try {
            const session = await fetchAuthSession(); // ✅ Check if there is a valid session
            if (session) {
                console.log('User session is active.');
                const user = await getCurrentUser(); // ✅ Fetch user only if session is valid
                console.log('User already signed in:', user);
                this.router.navigate(['/dashboard']);
            }
        } catch (error) {
            console.log('No active session, user must sign in.');
        }
    }
    

    async onLogin() {
        try {
            const { isSignedIn } = await signIn({ username: this.email, password: this.password });

            if (isSignedIn) {
                console.log('Login successful');
                this.router.navigate(['/dashboard']); // ✅ Redirect after login
            }
        } catch (error: any) {
            console.error('Error signing in:', error);
            this.errorMessage = error.message || 'Login failed. Please try again.';
        }
    }
}

================
File: src/app/demo/components/auth/login/login.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { LoginRoutingModule } from './login-routing.module';
import { LoginComponent } from './login.component';
import { InputTextModule } from 'primeng/inputtext';
import { ButtonModule } from 'primeng/button';
import { CheckboxModule } from 'primeng/checkbox';
import { FormsModule } from '@angular/forms';
import { AppConfigModule } from 'src/app/layout/config/app.config.module';

@NgModule({
    imports: [
        CommonModule,
        LoginRoutingModule,
        ButtonModule,
        InputTextModule,
        CheckboxModule,
        FormsModule,
        AppConfigModule
    ],
    declarations: [LoginComponent]
})
export class LoginModule { }

================
File: src/app/demo/components/auth/newpassword/newpassword-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { NewPasswordComponent } from './newpassword.component';

@NgModule({
    imports: [RouterModule.forChild([
        { path: '', component: NewPasswordComponent }
    ])],
    exports: [RouterModule]
})
export class NewPasswordRoutingModule { }

================
File: src/app/demo/components/auth/newpassword/newpassword.component.html
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1600 800" class="fixed left-0 top-0 min-h-screen min-w-screen" preserveAspectRatio="none">
    <rect [attr.fill]="dark ? 'var(--primary-900)' : 'var(--primary-500)'" width="1600" height="800"/>
    <path [attr.fill]="dark ? 'var(--primary-800)' : 'var(--primary-400)'" d="M478.4 581c3.2 0.8 6.4 1.7 9.5 2.5c196.2 52.5 388.7 133.5 593.5 176.6c174.2 36.6 349.5 29.2 518.6-10.2V0H0v574.9c52.3-17.6 106.5-27.7 161.1-30.9C268.4 537.4 375.7 554.2 478.4 581z"/>
    <path [attr.fill]="dark ? 'var(--primary-700)' : 'var(--primary-300)'" d="M181.8 259.4c98.2 6 191.9 35.2 281.3 72.1c2.8 1.1 5.5 2.3 8.3 3.4c171 71.6 342.7 158.5 531.3 207.7c198.8 51.8 403.4 40.8 597.3-14.8V0H0v283.2C59 263.6 120.6 255.7 181.8 259.4z"/>
    <path [attr.fill]="dark ? 'var(--primary-600)' : 'var(--primary-200)'" d="M454.9 86.3C600.7 177 751.6 269.3 924.1 325c208.6 67.4 431.3 60.8 637.9-5.3c12.8-4.1 25.4-8.4 38.1-12.9V0H288.1c56 21.3 108.7 50.6 159.7 82C450.2 83.4 452.5 84.9 454.9 86.3z"/>
    <path [attr.fill]="dark ? 'var(--primary-500)' : 'var(--primary-100)'" d="M1397.5 154.8c47.2-10.6 93.6-25.3 138.6-43.8c21.7-8.9 43-18.8 63.9-29.5V0H643.4c62.9 41.7 129.7 78.2 202.1 107.4C1020.4 178.1 1214.2 196.1 1397.5 154.8z"/>
</svg>
<div class="px-5 min-h-screen flex justify-content-center align-items-center">
    <div class="border-1 surface-border surface-card border-round py-7 px-4 md:px-7 z-1">
        <div class="mb-4">
            <div class="text-900 text-xl font-bold mb-2">New Password</div>
            <span class="text-600 font-medium">Enter your new password</span>
        </div>
        <div class="flex flex-column">
            <span class="p-input-icon-left w-full mb-4">
                <i class="pi pi-lock z-2"></i>
                <p-password id="password" placeholder="Password" styleClass="w-full"  [inputStyle]="{paddingLeft: '2.5rem'}" inputStyleClass="w-full md:w-25rem " [toggleMask]="true" ></p-password>
            </span>
            <span class="p-input-icon-left w-full mb-4">
                <i class="pi pi-lock z-2"></i>
                <p-password id="password" placeholder="Repeat Password" styleClass="w-full"  [inputStyle]="{paddingLeft: '2.5rem'}" inputStyleClass="w-full md:w-25rem" [toggleMask]="true" [feedback]="false"></p-password>
            </span>
            <div class="flex flex-wrap gap-2 justify-content-between">
                <button pButton pRipple label="Cancel" class="flex-auto p-button-outlined" [routerLink]="['/']"></button>
                <button pButton pRipple label="Submit" class="flex-auto" [routerLink]="['/']"></button>
            </div>
        </div>
    </div>
</div>

<app-config [minimal]="true"></app-config>

================
File: src/app/demo/components/auth/newpassword/newpassword.component.ts
================
import { Component } from '@angular/core';
import { LayoutService } from 'src/app/layout/service/app.layout.service';

@Component({
    templateUrl: './newpassword.component.html',
})
export class NewPasswordComponent {
    rememberMe: boolean = false;

    constructor(private layoutService: LayoutService) {}

    get dark(): boolean {
        return this.layoutService.config().colorScheme !== 'light';
    }
}

================
File: src/app/demo/components/auth/newpassword/newpassword.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { NewPasswordComponent } from './newpassword.component';
import { NewPasswordRoutingModule } from './newpassword-routing.module';
import { ButtonModule } from 'primeng/button';
import { InputTextModule } from 'primeng/inputtext';
import { RippleModule } from 'primeng/ripple';
import { AppConfigModule } from 'src/app/layout/config/app.config.module';
import { PasswordModule } from 'primeng/password';

@NgModule({
    imports: [
        CommonModule,
        NewPasswordRoutingModule,
        FormsModule,
        ButtonModule,
        InputTextModule,
        RippleModule,
        AppConfigModule,
        PasswordModule
    ],
    declarations: [NewPasswordComponent]
})
export class NewPasswordModule { }

================
File: src/app/demo/components/auth/register/register-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { RegisterComponent } from './register.component';

@NgModule({
    imports: [RouterModule.forChild([
        { path: '', component: RegisterComponent }
    ])],
    exports: [RouterModule]
})
export class RegisterRoutingModule { }

================
File: src/app/demo/components/auth/register/register.component.html
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1600 800" class="fixed left-0 top-0 min-h-screen min-w-screen" preserveAspectRatio="none">
    <rect [attr.fill]="dark ? 'var(--primary-900)' : 'var(--primary-500)'" width="1600" height="800"/>
    <path [attr.fill]="dark ? 'var(--primary-800)' : 'var(--primary-400)'" d="M478.4 581c3.2 0.8 6.4 1.7 9.5 2.5c196.2 52.5 388.7 133.5 593.5 176.6c174.2 36.6 349.5 29.2 518.6-10.2V0H0v574.9c52.3-17.6 106.5-27.7 161.1-30.9C268.4 537.4 375.7 554.2 478.4 581z"/>
    <path [attr.fill]="dark ? 'var(--primary-700)' : 'var(--primary-300)'" d="M181.8 259.4c98.2 6 191.9 35.2 281.3 72.1c2.8 1.1 5.5 2.3 8.3 3.4c171 71.6 342.7 158.5 531.3 207.7c198.8 51.8 403.4 40.8 597.3-14.8V0H0v283.2C59 263.6 120.6 255.7 181.8 259.4z"/>
    <path [attr.fill]="dark ? 'var(--primary-600)' : 'var(--primary-200)'" d="M454.9 86.3C600.7 177 751.6 269.3 924.1 325c208.6 67.4 431.3 60.8 637.9-5.3c12.8-4.1 25.4-8.4 38.1-12.9V0H288.1c56 21.3 108.7 50.6 159.7 82C450.2 83.4 452.5 84.9 454.9 86.3z"/>
    <path [attr.fill]="dark ? 'var(--primary-500)' : 'var(--primary-100)'" d="M1397.5 154.8c47.2-10.6 93.6-25.3 138.6-43.8c21.7-8.9 43-18.8 63.9-29.5V0H643.4c62.9 41.7 129.7 78.2 202.1 107.4C1020.4 178.1 1214.2 196.1 1397.5 154.8z"/>
</svg>
<div class="px-5 min-h-screen flex justify-content-center align-items-center">
    <div class="border-1 surface-border surface-card border-round py-7 px-4 md:px-7 z-1">
        <div class="mb-4">
            <div class="text-900 text-xl font-bold mb-2">Register</div>
            <span class="text-600 font-medium">Let's get started</span>
        </div>
        <div class="flex flex-column">

            <span class="p-input-icon-left w-full mb-4">
                <i class="pi pi-envelope"></i>
                <input id="email" type="text" pInputText class="w-full md:w-25rem" placeholder="Email" [(ngModel)]="email">
            </span>

            <span class="p-input-icon-left w-full mb-6">
                <i class="pi pi-lock z-2"></i>
                <p-password id="password" placeholder="Password" styleClass="w-full" [inputStyle]="{paddingLeft: '2.5rem'}" inputStyleClass="w-full md:w-25rem" [toggleMask]="true" [(ngModel)]="password"></p-password>
            </span>

            <span class="p-input-icon-left w-full mb-4">
                <i class="pi pi-key"></i>
                <input id="licenseKey" type="text" pInputText class="w-full md:w-25rem" placeholder="License Key" [(ngModel)]="licenseKey">
            </span>

            <button pButton pRipple label="Sign Up" class="w-full mt-4 mb-4" (click)="onRegister()"></button>

            <span class="font-medium text-600">
                Already have an account?
                <a [routerLink]="['/auth/login']" class="font-semibold cursor-pointer text-900 hover:text-primary transition-colors transition-duration-300">
                    Login
                </a>
            </span>
        </div>
    </div>
</div>

<app-config [minimal]="true"></app-config>

================
File: src/app/demo/components/auth/register/register.component.ts
================
import { Component } from '@angular/core';
import { LayoutService } from 'src/app/layout/service/app.layout.service';
import { Router } from '@angular/router';
import { signUp } from "aws-amplify/auth";

// CLI to create custom attribute: 
// aws cognito-idp add-custom-attributes --user-pool-id us-east-1_p82n11FBH --custom-attributes Name=license_key,AttributeDataType=String,Mutable=true


@Component({
    selector: 'app-register',
    templateUrl: './register.component.html'
})
export class RegisterComponent {
    username: string = '';
    password: string = '';
    email: string = '';
    licenseKey: string = ''; 

    constructor(private layoutService: LayoutService, private router: Router) {}

    get dark(): boolean {
        return this.layoutService.config().colorScheme !== 'light';
    }

    async onRegister() {
        try {
            const { isSignUpComplete, userId, nextStep } = await signUp({
                username: this.email, // Cognito requires a unique username
                password: this.password,
                options: {
                    userAttributes: {
                        email: this.email,
                        'custom:license_key': this.licenseKey //custom attribute
                    },
                    autoSignIn: true 
                },
            });

            console.log('Sign-up successful:', userId);
            console.log('Next step:', nextStep);

            // Navigate to the verification page and pass the email
            this.router.navigate(['/auth/verification'], { queryParams: { email: this.email } });
        } catch (error) {
            console.error('Error during sign-up:', error);
            
            const errorMessage = (error as { message?: string }).message || 'An unknown error occurred';
            alert(`Error: ${errorMessage}`);
        }        
    }
}

================
File: src/app/demo/components/auth/register/register.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { RegisterRoutingModule } from './register-routing.module';
import { RegisterComponent } from './register.component';
import { ButtonModule } from 'primeng/button';
import { RippleModule } from 'primeng/ripple';
import { InputTextModule } from 'primeng/inputtext';
import { CheckboxModule } from 'primeng/checkbox';
import { AppConfigModule } from 'src/app/layout/config/app.config.module';
import { PasswordModule } from 'primeng/password';

@NgModule({
    imports: [
        CommonModule,
        RegisterRoutingModule,
        FormsModule,
        ButtonModule,
        RippleModule,
        InputTextModule,
        CheckboxModule,
        AppConfigModule,
        PasswordModule
    ],
    declarations: [RegisterComponent]
})
export class RegisterModule { }

================
File: src/app/demo/components/auth/verification/verification-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { VerificationComponent } from './verification.component';

@NgModule({
    imports: [RouterModule.forChild([
        { path: '', component: VerificationComponent }
    ])],
    exports: [RouterModule]
})
export class VerificationRoutingModule { }

================
File: src/app/demo/components/auth/verification/verification.component.html
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1600 800" class="fixed left-0 top-0 min-h-screen min-w-screen"
    preserveAspectRatio="none">
    <rect [attr.fill]="dark ? 'var(--primary-900)' : 'var(--primary-500)'" width="1600" height="800" />
    <path [attr.fill]="dark ? 'var(--primary-800)' : 'var(--primary-400)'"
        d="M478.4 581c3.2 0.8 6.4 1.7 9.5 2.5c196.2 52.5 388.7 133.5 593.5 176.6c174.2 36.6 349.5 29.2 518.6-10.2V0H0v574.9c52.3-17.6 106.5-27.7 161.1-30.9C268.4 537.4 375.7 554.2 478.4 581z" />
    <path [attr.fill]="dark ? 'var(--primary-700)' : 'var(--primary-300)'"
        d="M181.8 259.4c98.2 6 191.9 35.2 281.3 72.1c2.8 1.1 5.5 2.3 8.3 3.4c171 71.6 342.7 158.5 531.3 207.7c198.8 51.8 403.4 40.8 597.3-14.8V0H0v283.2C59 263.6 120.6 255.7 181.8 259.4z" />
    <path [attr.fill]="dark ? 'var(--primary-600)' : 'var(--primary-200)'"
        d="M454.9 86.3C600.7 177 751.6 269.3 924.1 325c208.6 67.4 431.3 60.8 637.9-5.3c12.8-4.1 25.4-8.4 38.1-12.9V0H288.1c56 21.3 108.7 50.6 159.7 82C450.2 83.4 452.5 84.9 454.9 86.3z" />
    <path [attr.fill]="dark ? 'var(--primary-500)' : 'var(--primary-100)'"
        d="M1397.5 154.8c47.2-10.6 93.6-25.3 138.6-43.8c21.7-8.9 43-18.8 63.9-29.5V0H643.4c62.9 41.7 129.7 78.2 202.1 107.4C1020.4 178.1 1214.2 196.1 1397.5 154.8z" />
</svg>
<div class="px-5 min-h-screen flex justify-content-center align-items-center">
    <div class="border-1 surface-border surface-card border-round py-7 px-4 md:px-7 z-1">
        <div class="mb-4">
            <div class="text-900 text-xl font-bold mb-2">Verification</div>
            <span class="text-600 font-medium">We have sent code to your email:</span>
            <div class="flex align-items-center mt-1">
                <i class="pi pi-envelope text-600"></i>
                <span class="text-900 font-bold ml-2">{{ email }}</span>
            </div>
        </div>
        <div class="flex flex-column">
            <div class="flex justify-content-between w-full align-items-center mb-4 gap-3">
                <input pInputText #digit1 pKeyFilter="num" class="w-3rem text-center" maxlength="1"
                    (keyup)="onDigitInput($event)" (paste)="onPaste($event)">
                <input pInputText #digit2 pKeyFilter="num" class="w-3rem text-center" maxlength="1"
                    (keyup)="onDigitInput($event)">
                <input pInputText #digit3 pKeyFilter="num" class="w-3rem text-center" maxlength="1"
                    (keyup)="onDigitInput($event)">
                <input pInputText #digit4 pKeyFilter="num" class="w-3rem text-center" maxlength="1"
                    (keyup)="onDigitInput($event)">
                <input pInputText #digit5 pKeyFilter="num" class="w-3rem text-center" maxlength="1"
                    (keyup)="onDigitInput($event)">
                <input pInputText #digit6 pKeyFilter="num" class="w-3rem text-center" maxlength="1"
                    (keyup)="onDigitInput($event)">
            </div>

            <div class="flex flex-wrap gap-2 justify-content-between">
                <button pButton pRipple label="Resend Code" class="flex-auto" (click)="onResendCode()"></button>
                <button pButton pRipple label="Verify" class="flex-auto"
                    (click)="onConfirmSignUp(digit1.value, digit2.value, digit3.value, digit4.value, digit5.value, digit6.value)"></button>
            </div>
            <div *ngIf="message"
                [ngClass]="{'text-black': messageType === 'info', 'text-red-500': messageType === 'error'}"
                class="mt-2 p-2 border border-gray-300 rounded w-full text-center">
                {{ message }}
            </div>

        </div>
    </div>
</div>

<app-config [minimal]="true"></app-config>

================
File: src/app/demo/components/auth/verification/verification.component.ts
================
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { confirmSignUp, resendSignUpCode } from "aws-amplify/auth";
import { LayoutService } from 'src/app/layout/service/app.layout.service';

@Component({
    templateUrl: './verification.component.html',
})
export class VerificationComponent implements OnInit {
    message: string = '';
    messageType: 'info' | 'error' | '' = ''; 

    email: string = '';
    code: string = ''; 

    val1: string = '';
    val2: string = '';
    val3: string = '';
    val4: string = '';
    val5: string = '';
    val6: string = '';
    

    constructor(private layoutService: LayoutService, private route: ActivatedRoute, private router: Router) {}

    get dark(): boolean {
        return this.layoutService.config().colorScheme !== 'light';
    }

    ngOnInit() {
        this.route.queryParams.subscribe(params => {
            this.email = params['email'] || 'unknown@example.com'; // Get email from URL params
        });
    }

    // Automatically focus the next input field
    onDigitInput(event: any) {
        let element;
        if (event.code !== 'Backspace') {
            if (event.code.includes('Numpad') || event.code.includes('Digit')) {
                element = event.srcElement.nextElementSibling;
            }
        } else {
            element = event.srcElement.previousElementSibling;
        }
        if (element) element.focus();
    }
    
    onPaste(event: ClipboardEvent) {
        event.preventDefault();
        const pastedText = event.clipboardData?.getData('text') || '';
    
        // Remove non-numeric characters and truncate to 6 digits
        const cleanText = pastedText.replace(/\D/g, '').slice(0, 6);
    
        if (!cleanText) return;
    
        // Assign each character to the corresponding input
        const inputs = document.querySelectorAll<HTMLInputElement>('input[pInputText]');
        cleanText.split('').forEach((char, index) => {
            if (inputs[index]) {
                inputs[index].value = char;
            }
        });
    
        // Focus the last input that was filled
        if (inputs[cleanText.length - 1]) {
            inputs[cleanText.length - 1].focus();
        }
    }
    

    validateCode(): boolean {
        if (!/^\d{6}$/.test(this.code)) {
            this.showMessage("Please enter a valid 6-digit numeric code.", "error");            
            return false;
        }
        return true;
    }

    async onConfirmSignUp(d1: string, d2: string, d3: string, d4: string, d5: string, d6: string) {
        this.code = `${d1}${d2}${d3}${d4}${d5}${d6}`;

        if (!this.validateCode()) return; 

        try {
            const { isSignUpComplete, nextStep } = await confirmSignUp({
                username: this.email,
                confirmationCode: this.code
            });

            if (isSignUpComplete) {
                console.log("User confirmed successfully!");
                
                this.router.navigate(['/auth/login']);
            } else {
                console.warn("Sign-up not fully complete. Next step:", nextStep);
            }
        } catch (error: any) {
            console.error("Error confirming sign-up:", error);
            this.showMessage(error.message || "Failed to confirm sign-up. Please try again.", "error");  
        }
    }

    async onResendCode() {
        try {
            await resendSignUpCode({ username: this.email });
            this.showMessage("A new verification code has been sent to your email.", "info");              
        } catch (error: any) {
            console.error("Error resending code:", error);
            this.showMessage(error.message || "Failed to resend code. Please try again.", "error");  
        }
    }

    showMessage(text: string, type: 'info' | 'error') {
        this.message = text;
        this.messageType = type;
    }
}

================
File: src/app/demo/components/auth/verification/verification.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { VerificationRoutingModule } from './verification-routing.module';
import { VerificationComponent } from './verification.component';
import { InputNumberModule } from 'primeng/inputnumber';
import { ButtonModule } from 'primeng/button';
import { RippleModule } from 'primeng/ripple';
import { AppConfigModule } from 'src/app/layout/config/app.config.module';
import { InputTextModule } from 'primeng/inputtext';
import {KeyFilterModule} from 'primeng/keyfilter';

@NgModule({
    imports: [
        CommonModule,
        VerificationRoutingModule,
        FormsModule,
        InputTextModule,
        KeyFilterModule,
        ButtonModule,
        RippleModule,
        AppConfigModule,
    ],
    declarations: [VerificationComponent]
})
export class VerificationModule { }

================
File: src/app/demo/components/dashboards/dashboards-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { AuthGuard } from '../auth/auth.guard';

const routes: Routes = [
    { 
        path: '', 
        data: { breadcrumb: 'Primary Dashboard' }, 
        loadChildren: () => import('./home/home.module').then(m => m.HomeModule),
        canActivate: [AuthGuard] 
    }
];

@NgModule({
    imports: [RouterModule.forChild(routes)],
    exports: [RouterModule]
})
export class DashboardsRoutingModule { }

================
File: src/app/demo/components/dashboards/dashboards.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { DashboardsRoutingModule } from './dashboards-routing.module';

@NgModule({
    imports: [
        CommonModule,
        DashboardsRoutingModule
    ]
})
export class DashboardsModule { }

================
File: src/app/demo/components/dashboards/home/home-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { HomeComponent } from './home.component';
import { AuthGuard } from 'src/app/demo/components/auth/auth.guard'; 

const routes: Routes = [
    { path: '', component: HomeComponent, canActivate: [AuthGuard] }
];

@NgModule({
    imports: [RouterModule.forChild(routes)],
    exports: [RouterModule]
})
export class HomeRoutingModule { }

================
File: src/app/demo/components/dashboards/home/home.component.html
================
<div #dashboard class="dashboard-container">
    <div class="home-topbar">
        <!-- Full Screen Button -->
        <div class="fullscreen-button">
            <p-button
                *ngIf="!isFullscreen"
                (onClick)="presentDashboard()"
                label="⛶"
                pTooltip="Enter Fullscreen"
                tooltipPosition="top"
            >
            </p-button>
        </div>
    </div>

<!-- User Details Table -->
<div class="p-mt-4">
    <h3>User Details</h3>
    <p-table [value]="userData" class="p-datatable">
        <ng-template pTemplate="header">
            <tr>
                <th>Key</th>
                <th>Value</th>
            </tr>
        </ng-template>
        <ng-template pTemplate="body" let-data>
            <tr>
                <td>{{ data.key }}</td>
                <td>
                    <pre *ngIf="data.key === 'Sign-In Details'">{{ data.value }}</pre>
                    <span *ngIf="data.key !== 'Sign-In Details'">{{ data.value }}</span>
                </td>
            </tr>
        </ng-template>
    </p-table>
</div>
<div *ngIf="message"
[ngClass]="{'text-black': messageType === 'info', 'text-red-500': messageType === 'error'}"
class="mt-2 p-2 border border-gray-300 rounded w-full text-center">
{{ message }}
</div>

</div>

================
File: src/app/demo/components/dashboards/home/home.component.scss
================
.dashboard {
    display: flex;
    flex-direction: column;
    // gap: 20px;
    // padding: 20px;
  }

  .home-topbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
  }
  
  .dashboard-section {
    background-color: #f9f9f9;
    border-radius: 8px;
    padding: 15px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .section-title {
    margin: 0 0 10px;
    font-size: 18px;
    color: #333;
  }
  
  .cards {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 15px;
  }
  
  .card {
    background: #ffffff;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    padding: 15px;
    text-align: center;
  }
  
  .card-content h3 {
    margin: 0;
    font-size: 16px;
    color: #555;
  }
  
  .card-content p {
    margin: 10px 0 0;
    color: #888;
  }
  
  .fullscreen-button {
    position: absolute;
    top: 10px; 
    right: 10px;
    z-index: 1000; 
  }

  .site-selector {
    position: absolute;
    top: 10px; 
    left: 10px; 
    z-index: 1000; 
}

.weather {
  position: absolute;
  bottom: 10px; 
  right: 10px; 
  z-index: 1000; 
}

  .placeholder-container {
    display: grid;
    grid-template-columns: repeat(2, 1fr); 
    grid-template-rows: repeat(2, 1fr);
    gap: 10px;
    max-height: 300px;
    min-height: 100px; 
    width: 100%;
}

.number-card {
  //background-color: lightgray; //For Testing
  height: 100%;
  flex: 1; 
}

.weather-placeholder-container {
  height: 100%; 
  display: flex; 
  align-items: center; 
  justify-content: center; 
}

.weather-container {
  display: flex; 
  justify-content: center !important;
  align-items: center !important;
  height: 100%; 
  width: 100%; 
}

.grid {
  display: flex;
  flex-wrap: wrap;
  gap: 1rem; /* Add consistent spacing between grid items */
}
.p-card {
  flex: 1 1 calc(33.33% - 1rem); /* Adjust for three cards per row */
}


.flex-container {
  display: flex;
  gap: 10px; /* Space between flex items */
  height: 120px; /* Set height for consistency */
}

.flex-item {
  flex: 1; /* Equal width for side-by-side items */
}

================
File: src/app/demo/components/dashboards/home/home.component.spec.ts
================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { HomeComponent } from './home.component';

describe('HomeComponent', () => {
  let component: HomeComponent;
  let fixture: ComponentFixture<HomeComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [HomeComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(HomeComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

================
File: src/app/demo/components/dashboards/home/home.component.ts
================
import { Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';
import { ButtonModule } from 'primeng/button';
import { TableModule } from 'primeng/table';
import { LayoutService, ColorScheme } from 'src/app/layout/service/app.layout.service';
import { CommonModule, CurrencyPipe } from '@angular/common';
import { UrlParamService } from '../../../service/urlparam.service';
import { Apollo } from 'apollo-angular';
import { fetchAuthSession, getCurrentUser, fetchUserAttributes } from 'aws-amplify/auth';
import { Router } from '@angular/router';


@Component({
  selector: 'app-home',
  standalone: true,
  imports: [
    CommonModule,
    ButtonModule,
    TableModule 
  ],
  providers: [CurrencyPipe],
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.scss'],
})
export class HomeComponent implements OnInit, OnDestroy {
  @ViewChild('dashboard') dashboard!: ElementRef;
  isFullscreen: boolean = false;
  userData: any[] = []; 
  message: string = '';
  messageType: 'info' | 'error' | '' = ''; 

  private originalColorScheme: ColorScheme = 'light';

  constructor(
    private layoutService: LayoutService,
    private urlParamService: UrlParamService,
    private apollo: Apollo,
    private router: Router
    
  ) {}

  async ngOnInit() {
    document.addEventListener('fullscreenchange', this.onFullscreenChange.bind(this));
    
    await this.loadUserData();
  }

  ngOnDestroy() {
    document.removeEventListener('fullscreenchange', this.onFullscreenChange.bind(this));
  }

  async loadUserData() {
    try {
        // Check if session exists before fetching user details
        const session = await fetchAuthSession();
        if (!session) {
            throw new Error('No active session'); // Force re-authentication
        }

        // Retrieve basic user information
        const { username, userId, signInDetails } = await getCurrentUser();

        // Fetch user attributes (license key, etc.)
        const userAttributes = await fetchUserAttributes();

        // Extract specific attributes safely
        const email = userAttributes.email || 'Not Available';
        const licenseKey = userAttributes['custom:license_key'] || 'Not Available';

        // Store in a format the table can display
        this.userData = [
            { key: 'Username', value: username },
            { key: 'User ID', value: userId },
            { key: 'Email', value: email },
            { key: 'License Key', value: licenseKey },
            { key: 'Sign-In Details', value: JSON.stringify(signInDetails, null, 2) }
        ];

        console.log('Cognito User Data:', this.userData);
    } catch (error) {
        const errorMessage = (error as { message?: string }).message || 'An unknown error occurred';

        console.error('Error fetching user data:', errorMessage);
        this.showMessage('Error fetching user data:' + errorMessage, "error");  

        this.userData = [{ key: 'Error', value: 'Failed to load user data: ' + errorMessage }];

        // Redirect user to login if session expired
        if (errorMessage.includes('No active session') || errorMessage.includes('User does not exist')) {
            this.router.navigate(['/auth/login']);
        }
    }
}

  presentDashboard() {
    const elem = this.dashboard.nativeElement;
  
    const currentScheme = this.layoutService.config().colorScheme;
    if (currentScheme === 'light' || currentScheme === 'dark' || currentScheme === 'dim') {
      this.originalColorScheme = currentScheme;
    }
  
    this.layoutService.config.update((config) => ({
      ...config,
      colorScheme: 'dim',
    }));
  
    if (elem.requestFullscreen) {
      elem.requestFullscreen();
    } else if (elem.webkitRequestFullscreen) {
      elem.webkitRequestFullscreen();
    } else if (elem.msRequestFullscreen) {
      elem.msRequestFullscreen();
    }
  
    this.isFullscreen = true;
  }

  private onFullscreenChange() {
    if (!document.fullscreenElement) {
      this.isFullscreen = false;
      this.resetColorScheme();
    }
  }

  private resetColorScheme() {
    if (this.originalColorScheme !== null) {
      this.layoutService.config.update((config) => ({
        ...config,
        colorScheme: this.originalColorScheme,
      }));
    }
  }

  showMessage(text: string, type: 'info' | 'error') {
    this.message = text;
    this.messageType = type;
}
}

================
File: src/app/demo/components/dashboards/home/home.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HomeRoutingModule } from './home-routing.module';
import { HomeComponent } from './home.component';


@NgModule({
  imports: [
    CommonModule,
    HomeRoutingModule,
    HomeComponent
  ]
})
export class HomeModule { }

================
File: src/app/demo/components/documentation/documentation-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { DocumentationComponent } from './documentation.component';

@NgModule({
	imports: [RouterModule.forChild([
		{ path: '', component: DocumentationComponent }
	])],
	exports: [RouterModule]
})
export class DocumentationRoutingModule { }

================
File: src/app/demo/components/documentation/documentation.component.html
================
<div class="card">
    <h2>Documentation</h2>
    <h4>Getting Started</h4>
    <p>Apollo is an application template for Angular and is distributed as a CLI project. Current versions is Angular v17 with PrimeNG v17. In case CLI is not installed already, use the command below to set it up.</p>

<pre class="app-code"><code>npm install -g &#64;angular/cli</code></pre>

    <p>Once CLI is ready in your system, extract the contents of the zip file distribution, cd to the directory,
        install the libraries from npm and then execute "ng serve" to run the application in your local environment.</p>

<pre class="app-code"><code>cd apollo
npm install
ng serve</code></pre>

    <p>The application should run at <span class="font-semibold">http://localhost:4200/</span>, you may now start with the development of your application.</p>

    <h5>Important CLI Commands</h5>
    <p>Following commands are derived from CLI.</p>

<pre class="app-code"><code>Run 'ng serve' for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.

Run 'ng generate component component-name' to generate a new component. You can also use `ng generate directive/pipe/service/class/module`.

Run 'ng build' to build the project. The build artifacts will be stored in the `dist/` directory. Use the `-prod` flag for a production build.

Run 'ng test' to execute the unit tests via [Karma](https://karma-runner.github.io).

Run 'ng e2e' to execute the end-to-end tests via [Protractor](http://www.protractortest.org/).

Run 'ng help' for more options.</code></pre>

    <h4>Structure</h4>
    <p>Apollo consists of 3 main parts; the application layout, layout assets and PrimeNG component theme assets. Layout is placed inside the <span class="text-primary font-medium">src/app/layout</span> folder,
        and the assets are in the <span class="text-primary font-medium">src/assets/layout</span> folder.
    </p>

    <h5>Default Configuration</h5>
    <p>Initial layout configuration can be defined at the main app component by injecting the <span class="text-primary font-medium">LayoutService</span>, this step is optional and only necessary when customizing the defaults. Note that <span class="text-primary font-medium">theme</span> and
        <span class="text-primary font-medium">scale</span> are not reactive since theme is configured outside of Angular at <strong class="font-semibold">index.html</strong> by default and
        initial scale is defined with the <span class="text-primary font-medium">$scale</span> at <strong class="font-semibold">layout.scss</strong>. When default theme or scale is changed at their files initially, it is required to configure the layout service with the matching values
        to avoid sync issues. </p>

<pre class="app-code"><code>import &#123; Component, OnInit &#125; from '&#64;angular/core';
import &#123; PrimeNGConfig &#125; from 'primeng/api';
import &#123; LayoutService, AppConfig &#125; from './layout/service/app.layout.service';

&#64;Component(&#123;
    selector: 'app-root',
    templateUrl: './app.component.html'
&#125;)
export class AppComponent implements OnInit &#123;

    constructor(private primengConfig: PrimeNGConfig, private layoutService: LayoutService) &#123; &#125;

    ngOnInit(): void &#123;
        this.primengConfig.ripple = true;       //enables core ripple functionality

        //optional configuration with the default configuration
        const config: AppConfig = &#123;
            ripple: false,                      //toggles ripple on and off
            inputStyle: 'outlined',             //default style for input elements
            menuMode: 'static',                 //layout mode of the menu, valid values are "static", "overlay", "slim", "horizontal", "reveal" and "drawer" 
            colorScheme: 'light',               //color scheme of the template, valid values are "light", "dim" and "dark"
            theme: 'indigo',                    //default component theme for PrimeNG
            menuTheme: "colorScheme",           //theme of the menu, valid values are "colorScheme", "primaryColor" and "transparent"
            scale: 14                           //size of the body font size to scale the whole application
        &#125;;
        this.layoutService.config.set(config);
    &#125;

&#125;</code></pre>

    <h5>Menu</h5>
    <p>Menu is a separate component defined in <span class="text-primary font-medium">src/app/layout/app.menu.component.ts</span> file and based on PrimeNG MenuModel API. In order to define the menuitems,
        navigate to this file and define your own model as a nested structure.</p>

<pre class="app-code"><code>import &#123; OnInit &#125; from '&#64;angular/core';
import &#123; Component &#125; from '&#64;angular/core';

&#64;Component(&#123;
    selector: 'app-menu',
    templateUrl: './app.menu.component.html'
&#125;)
export class AppMenuComponent implements OnInit &#123;

    model: any[];

    ngOnInit() &#123;
        this.model = [
            &#123;
                label: 'Dashboards',
                icon: 'pi pi-home',
                items: [
                    &#123;
                        label: 'E-Commerce',
                        icon: 'pi pi-fw pi-home',
                        routerLink: ['/']
                    &#125;,
                    &#123;
                        label: 'Banking',
                        icon: 'pi pi-fw pi-image',
                        routerLink: ['/dashboard-banking']
                    &#125;
                ]
            &#125;,
            //...
        ];
    &#125;
&#125;</code></pre>

    <h5>Breadcrumb</h5>
    <p>Breadcrumb component at the topbar section is dynamic and retrieves the path information from the router using the <span class="text-primary font-medium">data.breadcrumb</span> property.</p>

<pre class="app-code"><code>&#123; path: 'documentation', data: &#123; breadcrumb: 'Documentation' &#125;, loadChildren: () => import('./demo/components/documentation/documentation.module').then(m => m.DocumentationModule) &#125;</code></pre>

    <h4>Integration with Existing Angular CLI Projects</h4>
    <p>Apollo structure is designed in a modular way so that it can easily be integrated with your existing application. We've created a short tutorial with details.</p>

    <div class="video-container">
        <iframe width="560" height="315" src="https://www.youtube.com/embed/yl2f8KKY204" frameborder="0" allowfullscreen></iframe>
    </div>

    <h4>Theme</h4>
    <p>Apollo provides 24 PrimeNG themes out of the box. Setup of a theme is simple by including the css of theme
        to your bundle that are located inside <span class="text-primary font-medium">assets/layout/styles/theme/</span>
        folder such as <span class="text-primary font-medium">assets/layout/styles/theme/theme-light/blue/theme.css</span>.</p>

    <p>A custom theme can be developed by the following steps.</p>
    <ul>
        <li class="line-height-4">Choose a custom theme name such as "mytheme".</li>
        <li class="line-height-4">Create a folder named "mytheme" under <span class="font-semibold">assets/layouts/styles/theme-light/</span> folder.</li>
        <li class="line-height-4">Create a file such as theme.scss inside your "mytheme" folder.</li>
        <li class="line-height-4">Define the variables listed below in your file and import the dependencies.</li>
        <li class="line-height-4">Include the theme.scss to your application.</li>
    </ul>

    <p>Here are the variables required to create a theme.</p>
<pre class="app-code"><code>$primaryColor: #3B82F6 !default;
$primaryLightColor: #BFDBFE !default;
$primaryDarkColor: #2563eb !default;
$primaryDarkerColor: #1D4ED8 !default;
$primaryTextColor: #ffffff !default;
$primary500:#3B82F6 !default;

$highlightBg: #EFF6FF !default;
$highlightTextColor: $primaryDarkerColor !default;

&#64;import '../_variables';
&#64;import '../../theme-base/_components';
&#64;import '../_extensions';</code></pre>

    <h5>Theme Switcher</h5>
    <p>Dynamic theming is built-in to the template and implemented by including the theme via a link tag instead of bundling the theme along with a configurator component to switch it.
        In order to switch your theme dynamically as well, it needs to be compiled to css. An example sass command to compile the css would be;
    </p>

<pre class="app-code"><code>sass --update src/assets/theme/mytheme/theme.scss:src/assets/theme/mytheme/theme.css</code></pre>

    <p class="text-sm">*Note: The sass command above is supported by Dart Sass. Please use Dart Sass instead of Ruby Sass.</p>

    <p>Another alternative would be creating dynamic bundles, please see the <a href="https://www.youtube.com/watch?v=5VOuUdDXRsE" class="font-medium text-primary hover:underline">video tutorial</a> for an example.</p>

    <h5>Theme Designer</h5>
    <p>Apollo includes a simplified version of the <a href="https://www.primefaces.org/designer/primeng">PrimeNG Theme Designer</a> that only includes the main SASS structure. Full list of SASS variables to customize the components further is available at the
        <a href="https://www.primefaces.org/designer/api/primeng/15.0.0/" class="font-medium text-primary hover:underline">SASS API</a> docs.
    </p>

    <h4>Migration Guide</h4>
    <p>Every important change is included in <b>CHANGELOG.md</b> file at the root folder of the distribution along with the instructions to update. Whenever a major version of Angular is released, a new version of the template
    is provided that mainly brings compatibility support to the PrimeNG component theming. If there are no compatibility issues on component theming e.g. new components or new functionality to PrimeNG,
    you may still update your application to the latest Angular and PrimeNG without the need to waiting for an update.</p>

    <p>Initial integration with an existing CLI application and the update process is similar. During an update, only the layout folder and layout assets folder need to be updated and overriden, see the "Integration with Existing Angular CLI Projects" section for more information.</p>
</div>

================
File: src/app/demo/components/documentation/documentation.component.scss
================
@media screen and (max-width: 991px) {
    .video-container {
        position: relative;
        width: 100%;
        height: 0;
        padding-bottom: 56.25%;
    
        iframe {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
    }
}

================
File: src/app/demo/components/documentation/documentation.component.ts
================
import { Component } from '@angular/core';

@Component({
    templateUrl: './documentation.component.html',
    styleUrls: ['./documentation.component.scss']
})
export class DocumentationComponent { }

================
File: src/app/demo/components/documentation/documentation.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { DocumentationComponent } from './documentation.component';
import { DocumentationRoutingModule } from './documentation-routing.module';

@NgModule({
    imports: [
        CommonModule,
        DocumentationRoutingModule
    ],
    declarations: [DocumentationComponent]
})
export class DocumentationModule { }

================
File: src/app/demo/components/ecommerce/checkoutform/checkoutform-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { CheckoutFormComponent } from './checkoutform.component';

@NgModule({
    imports: [RouterModule.forChild([
        { path: '', component: CheckoutFormComponent }
    ])],
    exports: [RouterModule]
})
export class CheckoutFormRoutingModule { }

================
File: src/app/demo/components/ecommerce/checkoutform/checkoutform.component.html
================
<div class="card">
    <div class="grid grid-nogutter">
        <div class="col-12 px-4 mt-4 md:mt-6 md:px-6">
            <span class="text-900 block font-bold text-xl">Checkout</span>
        </div>
        <div class="col-12 lg:col-6 h-full px-4 py-4 md:px-6">
            <ul class="flex list-none flex-wrap p-0 mb-6">
                <li class="flex align-items-center text-primary mr-2">Cart <i class="pi pi-chevron-right text-500 text-xs ml-2"></i></li>
                <li class="flex align-items-center text-500 mr-2">Information<i class="pi pi-chevron-right text-500 text-xs ml-2"></i></li>
                <li class="flex align-items-center text-500 mr-2">Shipping<i class="pi pi-chevron-right text-500 text-xs ml-2"></i></li>
                <li class="flex align-items-center text-500 mr-2">Payment</li>
            </ul>
            <div class="grid formgrid">
                <div class="col-12 field mb-6">
                    <span class="text-900 text-2xl block font-medium mb-5">Contact Information</span>
                    <input id="email" placeholder="Email" type="text" class="p-inputtext w-full mb-4">
                    <p-checkbox name="checkbox-1" [(ngModel)]="checked" [binary]="true" label="Email me with news and offers" class="text-900" inputId="id"></p-checkbox>
                </div>
                <div class="col-12 field mb-4">
                    <span class="text-900 text-2xl block font-medium mb-5">Shipping</span>
                    <p-dropdown [options]="cities" [(ngModel)]="selectedCity" placeholder="Country / City" optionLabel="name" [showClear]="true" styleClass="w-full"></p-dropdown>
                </div>
                <div class="col-12 lg:col-6 field mb-4">
                    <input id="name" placeholder="Name" type="text" class="p-inputtext w-full">
                </div>
                <div class="col-12 lg:col-6 field mb-4">
                    <input id="lastname" placeholder="Last Name" type="text" class="p-inputtext w-full">
                </div>
                <div class="col-12 field mb-4">
                    <input id="address" placeholder="Address" type="text" class="p-inputtext w-full">
                </div>
                <div class="col-12 field mb-4">
                    <input id="address2" placeholder="Apartment, suite, etc" type="text" class="p-inputtext w-full">
                </div>
                <div class="col-12 lg:col-6 field mb-4">
                    <input id="pc" placeholder="Postal Code" type="text" class="p-inputtext w-full">
                </div>
                <div class="col-12 lg:col-6 field mb-4">
                    <input id="city" placeholder="City" type="text" class="p-inputtext w-full">
                </div>
                <div class="col-12 lg:col-6 field mb-4">
                    <p-checkbox name="checkbox-1" [(ngModel)]="checked2" [binary]="true" label="Save for next purchase" class="text-900" inputId="id"></p-checkbox>
                </div>
                <div class="col-12 flex flex-column lg:flex-row justify-content-center align-items-center lg:justify-content-end my-6">
                    <button pButton pRipple class="p-button-secondary p-button-outlined mt-3 lg:mt-0 w-full lg:w-auto flex-order-2 lg:flex-order-1 lg:mr-4" label="Return to Cart" icon="pi pi-fw pi-arrow-left"></button>
                    <button pButton pRipple class="p-button-primary w-full lg:w-auto flex-order-1 lg:flex-order-2" label="Continue to Shipping" icon="pi pi-fw pi-check"></button>
                </div>
            </div>
        </div>
        <div class="col-12 lg:col-6 px-4 py-4 md:px-6">
            <div class="pb-3 surface-border">
                <span class="text-900 font-medium text-xl">Your Cart</span>
            </div>
            <div class="flex flex-column lg:flex-row flex-wrap lg:align-items-center py-2 mt-3 surface-border">
                <img src="assets/demo/images/ecommerce/shop/shop-1.png" class="w-8rem h-8rem flex-shrink-0 mb-3" alt="product"/>
                <div class="flex-auto lg:ml-3">
                    <div class="flex align-items-center justify-content-between mb-3">
                        <span class="text-900 font-bold">Product Name</span>
                        <span class="text-900 font-bold">$123.00</span>
                    </div>
                    <div class="text-600 text-sm mb-3">Black | Large</div>
                    <div class="flex flex-auto justify-content-between align-items-center">
                        <p-inputNumber [showButtons]="true" buttonLayout="horizontal" spinnerMode="horizontal" [min]="0" inputStyleClass="w-2rem text-center py-2 px-1 border-transparent outline-none shadow-none" [(ngModel)]="quantities[0]" 
                        class="border-1 surface-border border-round" decrementButtonClass="p-button-text text-600 hover:text-primary py-1 px-1" incrementButtonClass="p-button-text text-600 hover:text-primary py-1 px-1" incrementButtonIcon="pi pi-plus" decrementButtonIcon="pi pi-minus"></p-inputNumber>
                        <button pButton pRipple icon="pi pi-trash" class="p-button-text p-button-rounded"></button>
                    </div>
                </div>
            </div>
            <div class="py-2 mt-3 surface-border">
                <p-inputGroup class="mb-3">
                    <input
                        type="text"
                        [(ngModel)]="value"
                        pInputText
                        placeholder="Promo code"
                        class="w-full"
                    />
                    <button
                        type="button"
                        pButton
                        pRipple
                        label="Apply"
                        [disabled]="!value"
                    ></button>
                </p-inputGroup>
            </div>
            <div class="py-2 mt-3">
                <div class="flex justify-content-between align-items-center mb-3">
                    <span class="text-900 font-medium">Subtotal</span>
                    <span class="text-900">$123.00</span>
                </div>
                <div class="flex justify-content-between align-items-center mb-3">
                    <span class="text-900 font-medium">Shipping</span>
                    <span class="text-primary font-bold">Free</span>
                </div>
                <div class="flex justify-content-between align-items-center mb-3">
                    <span class="text-900 font-bold">Total</span>
                    <span class="text-900 font-medium text-xl">$123.00</span>
                </div>
            </div>
            <div class="py-2 mt-3 bg-yellow-100 flex align-items-center justify-content-center border-round">
                <img src="assets/demo/images/ecommerce/shop/flag.png" class="mr-2" alt="Country Flag"><span class="text-black-alpha-90 font-medium">No additional duties or taxes.</span>
            </div>
        </div>
    </div>
</div>

================
File: src/app/demo/components/ecommerce/checkoutform/checkoutform.component.ts
================
import { Component } from '@angular/core';

@Component({
    templateUrl: './checkoutform.component.html',
})
export class CheckoutFormComponent {

    quantities: number[] = [1, 1, 1];

    value: string = '';

    checked: boolean = true;

    checked2: boolean = true;

    cities = [
        { name: 'USA / New York', code: 'NY' },
        { name: 'Italy / Rome', code: 'RM' },
        { name: 'United Kingdoom / London', code: 'LDN' },
        { name: 'Turkey / Istanbul', code: 'IST' },
        { name: 'France / Paris', code: 'PRS' }
    ];

    selectedCity: string = '';

}

================
File: src/app/demo/components/ecommerce/checkoutform/checkoutform.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { CheckoutFormComponent } from './checkoutform.component';
import { CheckoutFormRoutingModule } from './checkoutform-routing.module';
import { CheckboxModule } from 'primeng/checkbox';
import { InputTextModule } from 'primeng/inputtext';
import { InputNumberModule } from 'primeng/inputnumber';
import { ButtonModule } from 'primeng/button';
import { RippleModule } from 'primeng/ripple';
import { DropdownModule } from 'primeng/dropdown';
import { InputGroupAddonModule } from 'primeng/inputgroupaddon';
import { InputGroupModule } from 'primeng/inputgroup';

@NgModule({
    imports: [
        CommonModule,
        CheckoutFormRoutingModule,
        FormsModule,
        CheckboxModule,
        DropdownModule,
        InputTextModule,
        InputNumberModule,
        ButtonModule,
        RippleModule,
        InputGroupModule,
        InputGroupAddonModule
    ],
    declarations: [CheckoutFormComponent]
})
export class CheckoutFormModule { }

================
File: src/app/demo/components/ecommerce/ecommerce-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';

@NgModule({
    imports: [RouterModule.forChild([
        { path: 'product-overview', data: { breadcrumb: 'Product Overview' }, loadChildren: () => import('./productoverview/productoverview.module').then(m => m.ProductoverviewModule) },
        { path: 'shopping-cart', data: { breadcrumb: 'Shopping Cart' }, loadChildren: () => import('./shopping-cart/shopping-cart.module').then(m => m.ShoppingCartModule) },
        { path: 'checkout-form', data: { breadcrumb: 'Checkout Form' }, loadChildren: () => import('./checkoutform/checkoutform.module').then(m => m.CheckoutFormModule) },
        { path: 'product-list', data: { breadcrumb: 'Product List' }, loadChildren: () => import('./productlist/productlist.module').then(m => m.ProductListModule) },
        { path: 'new-product', data: { breadcrumb: 'New Product' }, loadChildren: () => import('./newproduct/newproduct.module').then(m => m.NewProductModule) },
        { path: 'order-history', data: { breadcrumb: 'Order History' }, loadChildren: () => import('./orderhistory/orderhistory.module').then(m => m.OrderHistoryModule) },
        { path: 'order-summary', data: { breadcrumb: 'Order Summary' }, loadChildren: () => import('./ordersummary/ordersummary.module').then(m => m.OrderSummaryModule) },
        { path: '**', redirectTo: '/notfound' }
    ])],
    exports: [RouterModule]
})
export class EcommerceRoutingModule { }

================
File: src/app/demo/components/ecommerce/ecommerce.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { EcommerceRoutingModule } from './ecommerce-routing.module';

@NgModule({
    imports: [
        CommonModule,
        EcommerceRoutingModule
    ],
    declarations: []
})
export class EcommerceModule { }

================
File: src/app/demo/components/ecommerce/newproduct/newproduct-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { NewProductComponent } from './newproduct.component';

@NgModule({
	imports: [RouterModule.forChild([
		{ path: '', component: NewProductComponent }
	])],
	exports: [RouterModule]
})
export class NewProductRoutingModule { }

================
File: src/app/demo/components/ecommerce/newproduct/newproduct.component.html
================
<div class="card">
    <span class="block text-900 font-bold text-xl mb-4">Create Product</span>
    <div class="grid grid-nogutter flex-wrap gap-3 p-fluid">
        <div class="col-12 lg:col-8">
            <div class="grid formgrid">
                <div class="col-12 field">
                    <input pInputText type="text" placeholder="Product Name" label="Product Name" [(ngModel)]="product.name">
                </div>
                <div class="col-12 lg:col-4 field">
                    <input pInputText type="text" placeholder="Price" label="Price" [(ngModel)]="product.price">
                </div>
                <div class="col-12 lg:col-4 field">
                    <input pInputText type="text" placeholder="Product Code" label="Product Code" [(ngModel)]="product.code">
                </div>
                <div class="col-12 lg:col-4 field">
                    <input pInputText type="text" placeholder="Product SKU" label="SKU" [(ngModel)]="product.sku">
                </div>
                <div class="col-12 field">
                    <p-editor [(ngModel)]="product.description" [style]="{'height':'250px'}"></p-editor>
                </div>
                <div class="col-12 field">
                    <p-fileUpload #fileUploader name="demo[]" url="./upload.php" (onUpload)="onUpload($event)" [customUpload]="true" [multiple]="true" (onSelect)="onUpload($event)" accept="image/*" [showUploadButton]="true" [showCancelButton]="false" [auto]="true" styleClass="border-1 surface-border surface-card border-round">
                        <ng-template pTemplate="content">
                            <div class="h-15rem overflow-y-auto py-3 border-round" style="cursor: copy" (click)="fileUploader.advancedFileInput.nativeElement.click()">
                                <div *ngIf="!product.images.length" class="flex flex-column w-full h-full justify-content-center align-items-center">
                                    <i class="pi pi-file text-4xl text-primary"></i>
                                    <span class="block font-semibold text-900 text-lg mt-3">Drop or select images</span>
                                </div>
                                <div class="flex flex-wrap gap-3 border-round" *ngIf="product.images.length">
                                    <div *ngFor="let file of product.images; let i = index;" class="h-full relative w-7rem h-7rem border-3 border-transparent border-round hover:bg-primary transition-duration-100 cursor-auto" (mouseenter)="onImageMouseOver(file)" (mouseleave)="onImageMouseLeave(file)" style="padding: 1px;">
                                        <img [src]="file.objectURL" class="w-full h-full border-round shadow-2" [alt]="file.name">
                                        <button [id]="file.name" #buttonEl pButton pRipple type="button" icon="pi pi-times" class="p-button-rounded p-button-primary text-sm absolute justify-content-center align-items-center cursor-pointer w-2rem h-2rem" style="top: -10px; right: -10px; display: none;" (click)="$event.stopPropagation(); removeImage(file)"></button>
                                    </div>
                                </div>
                            </div>
                        </ng-template>
                    </p-fileUpload>
                </div>
            </div>
        </div>

        <div class="flex-1 w-full lg:w-3 xl:w-4 flex flex-column row-gap-3">
            <div class="border-1 surface-border border-round">
                <span class="text-900 font-bold block border-bottom-1 surface-border p-3">Publish</span>
                <div class="p-3">
                    <div class="bg-gray-100 py-2 px-3 flex align-items-center border-round">
                        <span class="text-black-alpha-90 font-bold mr-3">Status:</span>
                        <span class="text-black-alpha-60 font-semibold">{{product.status}}</span>
                        <button pButton pRipple type="button" icon="pi pi-fw pi-pencil" class="p-button-rounded p-button-text text-black-alpha-60 ml-auto"></button>
                    </div>
                </div>
            </div>

            <div class="border-1 surface-border border-round">
                <span class="text-900 font-bold block border-bottom-1 surface-border p-3">Tags</span>
                <div class="p-3 flex flex-wrap gap-1">
                    <p-chip *ngFor="let tag of product.tags; let i = index;" styleClass="mr-2 py-2 px-3 text-900 font-bold surface-card border-1 surface-border" [style]="{'border-radius':'20px'}">
                        <span class="mr-3">{{tag}}</span>
                        <span class="chip-remove-icon flex align-items-center justify-content-center border-1 surface-border bg-gray-100 border-circle cursor-pointer" (click)="onChipRemove(tag)">
                            <i class="pi pi-fw pi-times text-black-alpha-60"></i>
                        </span>
                    </p-chip>
                </div>
            </div>

            <div class="border-1 surface-border border-round">
                <span class="text-900 font-bold block border-bottom-1 surface-border p-3">Category</span>
                <div class="p-3">
                    <p-dropdown [options]="categoryOptions" [(ngModel)]="product.category" placeholder="Select a category"></p-dropdown>
                </div>
            </div>

            <div class="border-1 surface-border border-round">
                <span class="text-900 font-bold block border-bottom-1 surface-border p-3">Colors</span>
                <div class="p-3 flex">
                    <div *ngFor="let color of colorOptions" class="w-2rem h-2rem mr-2 border-1 surface-border border-circle cursor-pointer flex justify-content-center align-items-center" [class]="color.background" (click)="onColorSelect(color.name)">
                        <i class="pi pi-check text-sm text-white" *ngIf="product.colors.indexOf(color.name) !== -1"></i>
                    </div>
                </div>
            </div>

            <div class="border-1 surface-border border-round">
                <span class="text-900 font-bold block border-bottom-1 surface-border p-3">Stock</span>
                <div class="p-3">
                    <p-dropdown [options]="categoryOptions" [(ngModel)]="product.stock" placeholder="Select stock"></p-dropdown>
                </div>
            </div>

            <div class="border-1 surface-border flex justify-content-between align-items-center py-2 px-3 border-round">
                <span class="text-900 font-bold p-3">In stock</span>
                <p-inputSwitch [(ngModel)]="product.inStock"></p-inputSwitch>
            </div>

            <div class="flex flex-column sm:flex-row justify-content-between align-items-center gap-3 py-2">
                <button pButton pRipple class="p-button-danger flex-1 p-button-outlined" label="Discard" icon="pi pi-fw pi-trash"></button>
                <button pButton pRipple class="p-button-primary flex-1 border-round" label="Save" icon="pi pi-fw pi-check"></button>
            </div>
        </div>
    </div>
</div>

================
File: src/app/demo/components/ecommerce/newproduct/newproduct.component.scss
================
.chip-remove-icon {
    width: 1.5rem;
    height: 1.5rem;

    i {
        font-size: 9px;
    }
}

:host ::ng-deep {
    .p-fileupload {
        padding: 0;

        .p-fileupload-buttonbar {
            display: none;
        }

        .p-fileupload-content {
            border: 0 none;
        }

        .p-fileupload-row {
            display: none;
        }

        .p-progressbar {
            display: none;
        }    
    }
}

================
File: src/app/demo/components/ecommerce/newproduct/newproduct.component.ts
================
import { Component, ViewChildren, QueryList, ElementRef } from '@angular/core';

interface Product {
    name: string;
    price: string;
    code: string;
    sku: string;
    status: string;
    tags: string[];
    category: string;
    colors: string[];
    stock: string;
    inStock: boolean;
    description: string;
    images: Image[];
}

interface Image {
    name: string;
    objectURL: string;
}

@Component({
    templateUrl: './newproduct.component.html',
    styleUrls: ['./newproduct.component.scss']
})
export class NewProductComponent {

    @ViewChildren('buttonEl') buttonEl!: QueryList<ElementRef>;

    text: string = '';

    categoryOptions = ['Sneakers', 'Apparel', 'Socks'];

    colorOptions: any[] = [
        { name: 'Black', background: "bg-gray-900" },
        { name: 'Orange', background: "bg-orange-500" },
        { name: 'Navy', background: "bg-blue-500" }
    ];

    product: Product = {
        name: '',
        price: '',
        code: '',
        sku: '',
        status: 'Draft',
        tags: ['Nike', 'Sneaker'],
        category: 'Sneakers',
        colors: ['Blue'],
        stock: 'Sneakers',
        inStock: true,
        description: '',
        images: []
    };

    uploadedFiles: any[] = [];

    showRemove: boolean = false;

    onChipRemove(item: string) {
        this.product.tags = this.product.tags.filter(i => i !== item);
    }

    onColorSelect(color: string) {
        this.product.colors.indexOf(color) == -1 ? this.product.colors.push(color) : this.product.colors.splice(this.product.colors.indexOf(color), 1);
    }

    onUpload(event: any) {
        for (let file of event.files) {
            this.product.images.push(file);
        }
    }

    onImageMouseOver(file: Image) {
        this.buttonEl.toArray().forEach(el => {
            el.nativeElement.id === file.name ? el.nativeElement.style.display = 'flex' : null;
        })
    }

    onImageMouseLeave(file: Image) {
        this.buttonEl.toArray().forEach(el => {
            el.nativeElement.id === file.name ? el.nativeElement.style.display = 'none' : null;
        })
    }

    removeImage(file: Image) {
        this.product.images = this.product.images.filter(i => i !== file);
    }

}

================
File: src/app/demo/components/ecommerce/newproduct/newproduct.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { NewProductRoutingModule } from './newproduct-routing.module';
import { NewProductComponent } from './newproduct.component';
import { InputTextModule } from 'primeng/inputtext';
import { ChipModule } from 'primeng/chip';
import { DropdownModule } from 'primeng/dropdown';
import { FileUploadModule } from 'primeng/fileupload';
import { ButtonModule } from 'primeng/button';
import { RippleModule } from 'primeng/ripple';
import { InputSwitchModule } from 'primeng/inputswitch';
import { EditorModule } from 'primeng/editor';

@NgModule({
	imports: [
		CommonModule,
		NewProductRoutingModule,
		InputTextModule,
		ChipModule,
		DropdownModule,
		FormsModule,
		FileUploadModule,
		ButtonModule,
		RippleModule,
		InputSwitchModule,
		EditorModule
	],
	declarations: [NewProductComponent],
})
export class NewProductModule { }

================
File: src/app/demo/components/ecommerce/orderhistory/orderhistory-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { OrderHistoryComponent } from './orderhistory.component';

@NgModule({
    imports: [RouterModule.forChild([
        { path: '', component: OrderHistoryComponent }
    ])],
    exports: [RouterModule]
})
export class OrderHistoryRoutingModule { }

================
File: src/app/demo/components/ecommerce/orderhistory/orderhistory.component.html
================
<div class="card">
    <div class="flex flex-column md:flex-row justify-content-between align-items-center mb-4">
        <div class="flex flex-column text-center md:text-left">
            <span class="text-900 text-2xl mb-2">My Orders</span>
            <span class="text-700 text-lg">Dignissim diam quis enim lobortis.</span>
        </div>
        <span class="p-input-icon-right mt-5 mb-2 md:mt-0 md:mb-0 w-full lg:w-25rem">
            <i class="pi pi-search text-gray-400"></i>
            <input type="text" class="p-inputtext w-full lg:w-25rem surface-50" placeholder="Search"/>
        </span>
    </div>
    <div class="surface-card grid grid-nogutter border-round shadow-2 mb-6" *ngFor="let order of orders">
        <div class="col-12 flex p-2 surface-100 border-round-top">
            <div class="p-2 flex-auto text-center md:text-left">
                <span class="text-700 block">Order Number</span>
                <span class="text-900 font-medium block mt-2">{{order.orderNumber}}</span>
            </div>
            <p-divider align="center" layout="vertical" styleClass="h-full  mx-0 lg:mx-3 surface-border"></p-divider>
            <div class="p-2 flex-auto text-center md:text-left">
                <span class="text-700 block">Order Date</span>
                <span class="text-900 font-medium block mt-2">{{order.orderDate}}</span>
            </div>
            <p-divider align="center" layout="vertical" styleClass="h-full  mx-0 lg:mx-3 surface-border"></p-divider>
            <div class="p-2 flex-auto text-center md:text-left">
                <span class="text-700 block">Total Amount</span>
                <span class="text-900 font-medium block mt-2">{{order.amount}}</span>
            </div>
        </div>
        <div class="col-12">
            <div class="p-2 my-4 flex flex-column lg:flex-row justify-content-between align-items-center" *ngFor="let product of order.products; let i = index;">
                <div class="flex flex-column lg:flex-row justify-content-center align-items-center px-2">
                    <img [src]="product.image" alt="product" class="w-8rem h-8rem mr-3 flex-shrink-0" />
                    <div class="flex flex-column my-auto text-center md:text-left">
                        <span class="text-900 font-medium mb-3 mt-3 lg:mt-0">{{product.name}}</span>
                        <span class="text-700 text-sm mb-3">{{product.color}} | {{product.size}}</span>
                        <a pRipple tabindex="0" class="p-2 select-none cursor-pointer w-10rem mx-auto lg:mx-0 border-round font-medium text-center border-1 border-primary text-primary transition-duration-150">Buy Again <span class="font-light">| {{product.price}}</span></a>
                    </div>
                </div>
                <div class=" mr-0 lg:mr-3 mt-4 lg:mt-0 p-2 flex align-items-center" style="background-color: rgba(76, 175, 80,.1);"  [style.border-radius]="'2.5rem'">
                    <span class="bg-green-500 text-white flex align-items-center justify-content-center border-circle mr-2" style="min-width:2rem; min-height: 2rem">
                        <i class="pi pi-check"></i>
                    </span>
                    <span class="text-green-500">{{product.deliveryDate}}</span>
                </div>
                <p-divider *ngIf="i !== order.products.length-1" class="w-full block lg:hidden surface-border"></p-divider>
            </div>
        </div>
        <div class="col-12 p-0 flex border-top-1 surface-border">
            <a tabindex="0" class="cursor-pointer py-4 flex flex-column md:flex-row text-center justify-content-center align-items-center text-primary hover:bg-primary hover:text-0 transition-duration-150 w-full" style="border-bottom-left-radius: 6px;"><i class="pi pi-folder mr-2 mb-2 md:mb-1"></i>Archive Order</a>
            <a tabindex="0" class="cursor-pointer py-4 flex flex-column md:flex-row text-center justify-content-center align-items-center text-primary hover:bg-primary hover:text-0 transition-duration-150 w-full"><i class="pi pi-refresh mr-2 mb-2 md:mb-1"></i>Return</a>
            <a tabindex="0" class="cursor-pointer py-4 flex flex-column md:flex-row text-center justify-content-center align-items-center text-primary hover:bg-primary hover:text-0 transition-duration-150 w-full"><i class="pi pi-file mr-2 mb-2 md:mb-1"></i>View Invoice</a>
            <a tabindex="0" class="cursor-pointer py-4 flex flex-column md:flex-row text-center justify-content-center align-items-center text-primary hover:bg-primary hover:text-0 transition-duration-150 w-full" style="border-bottom-right-radius: 6px;"><i class="pi pi-comment mr-2 mb-2 md:mb-1"></i>Write a Review</a>
        </div>
    </div>
</div>

================
File: src/app/demo/components/ecommerce/orderhistory/orderhistory.component.ts
================
import { Component } from '@angular/core';

@Component({
    templateUrl: './orderhistory.component.html'
})
export class OrderHistoryComponent {

    orders = [
        {
            orderNumber: '45123',
            orderDate: '7 February 2023',
            amount: '$123.00',
            products: [
                {
                    name: 'Product Name Placeholder A Little Bit Long One',
                    color: 'White',
                    size: 'Small',
                    price: '$50',
                    deliveryDate: 'Delivered on 7 February 2023',
                    image: 'assets/demo/images/ecommerce/order-history/orderhistory-1.png'
                },
                {
                    name: 'Product Name Placeholder A Little Bit Long One',
                    color: 'White',
                    size: 'Small',
                    price: '$50',
                    deliveryDate: 'Delivered on 7 February 2023',
                    image: 'assets/demo/images/ecommerce/order-history/orderhistory-2.png'
                },
                {
                    name: 'Product Name Placeholder A Little Bit Long One',
                    color: 'White',
                    size: 'Small',
                    price: '$63',
                    deliveryDate: 'Delivered on 7 February 2023',
                    image: 'assets/demo/images/ecommerce/order-history/orderhistory-3.png'
                },
            ]
        },
        {
            orderNumber: '45126',
            orderDate: '9 February 2023',
            amount: '$250.00',
            products: [
                {
                    name: 'Product Name Placeholder A Little Bit Long One',
                    color: 'White',
                    size: 'Small',
                    price: '$80',
                    deliveryDate: 'Delivered on 9 February 2023',
                    image: 'assets/demo/images/ecommerce/order-history/orderhistory-4.png'
                },
                {
                    name: 'Product Name Placeholder A Little Bit Long One',
                    color: 'White',
                    size: 'Small',
                    price: '$20',
                    deliveryDate: 'Delivered on 9 February 2023',
                    image: 'assets/demo/images/ecommerce/order-history/orderhistory-5.png'
                },
                {
                    name: 'Product Name Placeholder A Little Bit Long One',
                    color: 'White',
                    size: 'Small',
                    price: '$150',
                    deliveryDate: 'Delivered on 9 February 2023',
                    image: 'assets/demo/images/ecommerce/order-history/orderhistory-6.png'
                },
            ]
        }
    ];

}

================
File: src/app/demo/components/ecommerce/orderhistory/orderhistory.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { OrderHistoryRoutingModule } from './orderhistory-routing.module';
import { OrderHistoryComponent } from './orderhistory.component';
import { ButtonModule } from 'primeng/button';
import { DividerModule } from 'primeng/divider';
import { RippleModule } from 'primeng/ripple';

@NgModule({
    imports: [
        CommonModule,
        OrderHistoryRoutingModule,
        ButtonModule,
        DividerModule,
        RippleModule
    ],
    declarations: [OrderHistoryComponent]
})
export class OrderHistoryModule { }

================
File: src/app/demo/components/ecommerce/ordersummary/ordersummary-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { OrderSummaryComponent } from './ordersummary.component';

@NgModule({
    imports: [RouterModule.forChild([
        { path: '', component: OrderSummaryComponent }
    ])],
    exports: [RouterModule]
})
export class OrderSummaryRoutingModule { }

================
File: src/app/demo/components/ecommerce/ordersummary/ordersummary.component.html
================
<div class="card">
    <span class="text-700 text-xl">Thanks!</span>
    <div class="text-900 font-bold text-4xl my-2">Successful Order 🚀</div>
    <p class="text-700 text-xl mt-0 mb-4 p-0">Your order is on the way. It'll be shipped today. We'll inform you.</p>
    <div style="height:3px;background:linear-gradient(90deg, var(--primary-color) 0%, rgba(33, 150, 243, 0) 50%);"></div>

    <div class="flex flex-column sm:flex-row sm:align-items-center sm:justify-content-between py-5">
        <div class="mb-3 sm:mb-0">
            <span class="font-medium text-xl text-900 mr-2">Order number:</span>
            <span class="font-medium text-xl text-blue-500">451234</span>
        </div>
        <div>
            <button pButton pRipple label="Details" icon="pi pi-list" class="p-button-outlined p-button-primary mr-2"></button>
            <button pButton pRipple label="Print" icon="pi pi-print" class="p-button-outlined p-button-primary"></button>
        </div>
    </div>
    <div class="border-round surface-border border-1">
        <ul class="list-none p-0 m-0">
            <li *ngFor="let product of products; let i = index;" class="p-3 surface-border flex align-items-start sm:align-items-center" [ngClass]="{'border-bottom-1' : i !== products.length-1}">
                <img [src]="product.image" class="w-3rem sm:w-8rem flex-shrink-0 mr-3 shadow-2" />
                <div class="flex flex-column">
                    <span class="text-900 font-semibold text-xl mb-2">{{product.name}}</span>
                    <span class="text-700 font-medium mb-3">{{product.color}} | {{product.size}}</span>
                    <span class="text-900 font-medium">Quantity: {{product.quantity}}</span>
                </div>
                <span class="text-900 font-medium text-lg ml-auto">{{product.price}}</span>
            </li>
        </ul>
    </div>
    <div class="flex flex-wrap mt-5 pb-3">
        <div class="w-full lg:w-6 pl-3">
            <span class="font-medium text-900">Shipping Address</span>
            <div class="flex flex-column text-900 mt-3 mb-5">
                <span class="mb-1">Celeste Slater</span>
                <span class="mb-1">606-3727 Ullamcorper. Roseville NH 11523</span>
                <span>(786) 713-8616</span>
            </div>

            <span class="font-medium text-900">Payment</span>
            <div class="flex align-items-center mt-3">
                <img src="assets/demo/images/ecommerce/ordersummary/visa.png" class="w-4rem mr-3" />
                <div class="flex flex-column">
                    <span class="text-900 mb-1">Visa Debit Card</span>
                    <span class="text-900 font-medium">**** **** **** 1234</span>
                </div>
            </div>
        </div>
        <div class="w-full lg:w-6 pl-3 lg:pl-0 lg:pr-3 flex align-items-end mt-5 lg:mt-0">
            <ul class="list-none p-0 m-0 w-full">
                <li class="mb-3"><span class="font-medium text-900">Summary</span></li>
                <li class="flex justify-content-between mb-3">
                    <span class="text-900">Subtotal</span>
                    <span class="text-900 font-medium text-lg">$36.00</span>
                </li>
                <li class="flex justify-content-between mb-3">
                    <span class="text-900">Shipping</span>
                    <span class="text-900 font-medium text-lg">$5.00</span>
                </li>
                <li class="flex justify-content-between mb-3">
                    <span class="text-900">Tax</span>
                    <span class="text-900 font-medium text-lg">$4.00</span>
                </li>
                <li class="flex justify-content-between border-top-1 surface-border py-3">
                    <span class="text-900 font-medium">Total</span>
                    <span class="text-900 font-bold text-lg">$41.00</span>
                </li>
            </ul>
        </div>
    </div>
</div>

<div class="card">
    <div class="flex flex-column sm:flex-row sm:justify-content-between sm:align-items-center">
        <span class="text-2xl font-medium text-900">Thanks for your order!</span>
        <div class="flex mt-3 sm:mt-0">
            <div class="flex flex-column align-items-center">
                <span class="text-900 font-medium mb-2">Order ID</span>
                <span class="text-700">451234</span>
            </div>
            <div class="flex flex-column align-items-center ml-6 md:ml-8">
                <span class="text-900 font-medium mb-2">Order Date</span>
                <span class="text-700">7 Feb 2023</span>
            </div>
        </div>
    </div>
    <div class="flex flex-column md:flex-row md:align-items-center border-bottom-1 surface-border py-5">
        <img src="assets/demo/images/ecommerce/ordersummary/order-summary-2-1.png" class="w-15rem flex-shrink-0 md:mr-6" />
        <div class="flex-auto mt-3 md:mt-0">
            <span class="text-xl text-900">Product Name</span>
            <div class="font-medium text-2xl text-900 mt-3 mb-5">Order Processing</div>
            <div class="border-round overflow-hidden surface-300 mb-3" style="height:7px">
                <div class="bg-primary border-round w-4 h-full"></div>
            </div>
            <div class="flex w-full justify-content-between">
                <span class="text-900 text-xs sm:text-base">Ordered</span>
                <span class="text-900 font-medium text-xs sm:text-base">Processing</span>
                <span class="text-500 text-xs sm:text-base">Shipping</span>
                <span class="text-500 text-xs sm:text-base">Delivered</span>
            </div>
        </div>
    </div>
    <div class="py-5 flex justify-content-between flex-wrap">
        <div class="flex sm:mr-5 mb-5">
            <span class="font-medium text-900 text-xl mr-8">Product Name</span>
            <span class="text-900 text-xl">$21.00</span>
        </div>
        <div class="flex flex-column sm:mr-5 mb-5">
            <span class="font-medium text-900 text-xl">Shipping Address</span>
            <div class="flex flex-column text-900 mt-3">
                <span class="mb-1">Celeste Slater</span>
                <span class="mb-1">606-3727 Ullamcorper. Roseville NH 11523</span>
                <span>(786) 713-8616</span>
            </div>
        </div>
        <div class="flex flex-column">
            <span class="font-medium text-900 text-xl">Payment</span>
            <div class="flex align-items-center mt-3">
                <img src="assets/demo/images/ecommerce/ordersummary/visa.png" class="w-4rem mr-3" />
                <div class="flex flex-column">
                    <span class="text-900 mb-1">Visa Debit Card</span>
                    <span class="text-900 font-medium">**** **** **** 1234</span>
                </div>
            </div>
        </div>
    </div>
</div>

================
File: src/app/demo/components/ecommerce/ordersummary/ordersummary.component.ts
================
import { Component } from '@angular/core';

@Component({
    templateUrl: './ordersummary.component.html',
})
export class OrderSummaryComponent {

    products = [
        {
            name: 'Cotton Sweatshirt',
            size: 'Medium',
            color: 'White',
            price: '$12',
            quantity: '1',
            image: 'assets/demo/images/ecommerce/ordersummary/order-summary-1-1.png'
        },
        {
            name: 'Regular Jeans',
            size: 'Large',
            color: 'Black',
            price: '$24',
            quantity: '1',
            image: 'assets/demo/images/ecommerce/ordersummary/order-summary-1-2.png'
        }
    ];
}

================
File: src/app/demo/components/ecommerce/ordersummary/ordersummary.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { OrderSummaryRoutingModule } from './ordersummary-routing.module';
import { OrderSummaryComponent } from './ordersummary.component';
import { ButtonModule } from 'primeng/button';
import { RippleModule } from 'primeng/ripple';

@NgModule({
    imports: [
        CommonModule,
        OrderSummaryRoutingModule,
        ButtonModule,
        RippleModule
    ],
    declarations: [
        OrderSummaryComponent
    ]
})
export class OrderSummaryModule { }

================
File: src/app/demo/components/ecommerce/productlist/productlist-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { ProductListComponent } from './productlist.component';

@NgModule({
    imports: [RouterModule.forChild([
        { path: '', component: ProductListComponent }
    ])],
    exports: [RouterModule]
})
export class ProductListRoutingModule { }

================
File: src/app/demo/components/ecommerce/productlist/productlist.component.html
================
<div class="card">
    <div class="text-900 font-medium text-4xl mb-4">Popular Products</div>
    <p class="mt-0 p-0 mb-5 text-700 text-2xl">Exclusive Selection</p>
    <div class="grid -mt-3 -ml-3 -mr-3">
        <div class="col-12 md:col-6 lg:col-4" *ngFor="let product of products">
            <div class="p-2">
                <div class="shadow-2 p-4 surface-card border-round">
                    <div class="relative mb-3">
                        <span class="surface-card text-900 shadow-2 px-3 py-2 absolute" style="border-radius: 1.5rem; left: 1rem; top: 1rem">Category</span>
                        <img [src]="product.image" class="w-full" />
                    </div>
                    <div class="flex justify-content-between align-items-center mb-3">
                        <span class="text-900 font-medium text-xl">Product Name</span>
                        <span>
                            <i class="pi pi-star-fill text-yellow-500 mr-1"></i>
                            <span class="font-medium">5.0</span>
                        </span>
                    </div>
                    <p class="mt-0 mb-3 text-700 line-height-3">
                        Enim nec dui nunc mattis enim ut tellus. Tincidunt arcu.
                    </p>
                    <span class="text-primary text-xl font-medium">{{product.price}}</span>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="card">
    <div class="grid -mt-3 -ml-3 -mr-3">
        <div class="col-12 md:col-6 lg:col-3 mb-5 lg:mb-0" *ngFor="let product of products2">
            <div class="mb-3 relative">
                <img [src]="product.image" class="w-full" />
                <button type="button" pRipple class="border-1 border-white border-round py-2 px-3 absolute bg-black-alpha-30 text-white inline-flex align-items-center justify-content-center hover:bg-black-alpha-40 transition-colors transition-duration-300 cursor-pointer" 
                    style="bottom: 1rem; left: 1rem; width: calc(100% - 2rem)">
                    <i class="pi pi-shopping-cart mr-3 text-base"></i>
                    <span class="text-base">Add to Cart</span>
                </button>
            </div>
            <div class="flex flex-column align-items-center">
                <span class="text-xl text-900 font-medium mb-3">Product Name</span>
                <span class="text-xl text-900 mb-3">$150.00</span>
                <div class="flex align-items-center mb-3">
                    <div class="w-2rem h-2rem flex-shrink-0 border-circle bg-bluegray-500 mr-3 cursor-pointer border-2 surface-border transition-all transition-duration-300" [ngStyle]="{'box-shadow': product.color === 'Bluegray' ? '0 0 0 0.2rem var(--bluegray-500)' : null}" (click)="product.color = 'Bluegray'"></div>
                    <div class="w-2rem h-2rem flex-shrink-0 border-circle bg-indigo-500 hover:border-indigo-500 mr-3 cursor-pointer border-2 surface-border transition-all transition-duration-300"  [ngStyle]="{'box-shadow': product.color === 'Indigo' ? '0 0 0 0.2rem var(--indigo-500)' : null}" (click)="product.color = 'Indigo'"></div>
                    <div class="w-2rem h-2rem flex-shrink-0 border-circle bg-purple-500 hover:border-purple-500 mr-3 cursor-pointer border-2 surface-border transition-all transition-duration-300"  [ngStyle]="{'box-shadow': product.color === 'Purple' ? '0 0 0 0.2rem var(--purple-500)' : null}" (click)="product.color = 'Purple'"></div>
                    <div class="w-2rem h-2rem flex-shrink-0 border-circle bg-cyan-500 hover:border-cyan-500 cursor-pointer border-2 surface-border transition-all transition-duration-300"  [ngStyle]="{'box-shadow': product.color === 'Cyan' ? '0 0 0 0.2rem var(--cyan-500)' : null}" (click)="product.color = 'Cyan'"></div>
                </div>
                <span class="text-700">{{product.color}}</span>
            </div>
        </div>
    </div>
</div>

================
File: src/app/demo/components/ecommerce/productlist/productlist.component.ts
================
import { Component } from '@angular/core';

@Component({
    templateUrl: './productlist.component.html'
})
export class ProductListComponent {

    color1: string = 'Bluegray';

    products =  [
        {
            price: '$140.00',
            image: 'assets/demo/images/ecommerce/product-list/product-list-4-1.png'
        },
        {
            price: '$82.00',
            image: 'assets/demo/images/ecommerce/product-list/product-list-4-2.png'
        },
        {
            price: '$54.00',
            image: 'assets/demo/images/ecommerce/product-list/product-list-4-3.png'
        },
        {
            price: '$72.00',
            image: 'assets/demo/images/ecommerce/product-list/product-list-4-4.png'
        },
        {
            price: '$99.00',
            image: 'assets/demo/images/ecommerce/product-list/product-list-4-5.png'
        },
        {
            price: '$89.00',
            image: 'assets/demo/images/ecommerce/product-list/product-list-4-6.png'
        }
    ];

    products2 =  [
        {
            color: 'Bluegray',
            image:'assets/demo/images/ecommerce/product-list/product-list-2-1.png'
        },
        {
            color: 'Indigo',
            image:'assets/demo/images/ecommerce/product-list/product-list-2-2.png'
        },
        {
            color: 'Purple',
            image:'assets/demo/images/ecommerce/product-list/product-list-2-3.png'
        },
        {
            color: 'Cyan',
            image:'assets/demo/images/ecommerce/product-list/product-list-2-4.png'
        },
    ];

}

================
File: src/app/demo/components/ecommerce/productlist/productlist.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ProductListRoutingModule } from './productlist-routing.module';
import { ProductListComponent } from './productlist.component';
import { RippleModule } from 'primeng/ripple';

@NgModule({
    imports: [
        CommonModule,
        ProductListRoutingModule,
        RippleModule
    ],
    declarations: [ProductListComponent]
})
export class ProductListModule { }

================
File: src/app/demo/components/ecommerce/productoverview/productoverview-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { ProductOverviewComponent } from './productoverview.component';

@NgModule({
	imports: [RouterModule.forChild([
		{ path: '', component: ProductOverviewComponent }
	])],
	exports: [RouterModule]
})
export class ProductoverviewRoutingModule { }

================
File: src/app/demo/components/ecommerce/productoverview/productoverview.component.html
================
<div class="card ">
    <div class="grid mb-7">
        <div class="col-12 lg:col-7">
            <div class="flex">
                <div class="flex flex-column w-2 justify-content-between" style="row-gap: 1rem;">
                    <img *ngFor="let image of images; let i = index" [ngClass]="{'border-primary': selectedImageIndex === i}" src="assets/demo/images/ecommerce/productoverview/{{image}}" class="w-full cursor-pointer border-2 border-transparent transition-colors transition-duration-150 border-round" (click)="selectedImageIndex = i"/>
                </div>
                <div class="pl-3 w-10 flex">
                    <img src="assets/demo/images/ecommerce/productoverview/{{images[selectedImageIndex]}}" class="w-full border-2 border-transparent border-round"/>
                </div>
            </div>
        </div>
        <div class="col-12 lg:col-4 py-3 lg:pl-6">
            <div class="flex align-items-center text-xl font-medium text-900 mb-4">Product Title Placeholder</div>
            <div class="flex align-items-center justify-content-between mb-5">
                <span class="text-900 font-medium text-3xl block">$120</span>
                <div class="flex align-items-center">
                    <span class="mr-3">
                        <i class="pi pi-star-fill text-yellow-500 mr-1"></i>
                        <i class="pi pi-star-fill text-yellow-500 mr-1"></i>
                        <i class="pi pi-star-fill text-yellow-500 mr-1"></i>
                        <i class="pi pi-star-fill text-yellow-500 mr-1"></i>
                        <i class="pi pi-star text-600 mr-1"></i>
                    </span>
                    <span class="text-sm"><b class="text-900 mr-1">24</b> <span class="text-500"></span>reviews</span>
                </div>
            </div>

            <div class="font-bold text-900 mb-3">Color</div>
            <div class="flex align-items-center mb-5">
                <div class="w-2rem h-2rem flex-shrink-0 border-circle bg-bluegray-500 mr-3 cursor-pointer border-2 surface-border transition-all transition-duration-300"
                    [style.box-shadow]="color === 'bluegray' ? '0 0 0 0.2rem var(--bluegray-500)' : null" (click)="color = 'bluegray'"></div>
                <div class="w-2rem h-2rem flex-shrink-0 border-circle bg-green-500 mr-3 cursor-pointer border-2 surface-border transition-all transition-duration-300"
                    [style.box-shadow]="color === 'green' ? '0 0 0 0.2rem var(--green-500)' : null" (click)="color = 'green'"></div>
                <div class="w-2rem h-2rem flex-shrink-0 border-circle bg-blue-500 cursor-pointer border-2 surface-border transition-all transition-duration-300"
                    [style.box-shadow]="color === 'blue' ? '0 0 0 0.2rem var(--blue-500)' : null" (click)="color = 'blue'"></div>
            </div>

            <div class="mb-3 flex align-items-center justify-content-between">
                <span class="font-bold text-900">Size</span>
                <a tabindex="0" class="cursor-pointer text-600 text-sm flex align-items-center">Size Guide <i class="ml-1 pi pi-angle-right"></i></a>
            </div>
            <div class="grid grid-nogutter align-items-center mb-5">
                <div class="col h-3rem border-1 border-300 text-900 inline-flex justify-content-center align-items-center flex-shrink-0 border-round mr-3 cursor-pointer hover:surface-100 transition-duration-150 transition-colors"
                    [ngClass]="{'border-blue-500 border-2 text-blue-500': size === 'XS'}" (click)="size = 'XS'">XS</div>
                <div class="col h-3rem border-1 border-300 text-900 inline-flex justify-content-center align-items-center flex-shrink-0 border-round mr-3 cursor-pointer hover:surface-100 transition-duration-150 transition-colors"
                    [ngClass]="{'border-blue-500 border-2 text-blue-500': size === 'S'}" (click)="size = 'S'">S</div>
                <div class="col h-3rem border-1 border-300 text-900 inline-flex justify-content-center align-items-center flex-shrink-0 border-round mr-3 cursor-pointer hover:surface-100 transition-duration-150 transition-colors"
                    [ngClass]="{'border-blue-500 border-2 text-blue-500': size === 'M'}" (click)="size = 'M'">M</div>
                <div class="col h-3rem border-1 border-300 text-900 inline-flex justify-content-center align-items-center flex-shrink-0 border-round mr-3 cursor-pointer hover:surface-100 transition-duration-150 transition-colors"
                    [ngClass]="{'border-blue-500 border-2 text-blue-500': size === 'L'}"  (click)="size = 'L'">L</div>
                <div class="col h-3rem border-1 border-300 text-900 inline-flex justify-content-center align-items-center flex-shrink-0 border-round cursor-pointer hover:surface-100 transition-duration-150 transition-colors"
                    [ngClass]="{'border-blue-500 border-2 text-blue-500': size === 'XL'}" (click)="size = 'XL'">XL</div>
            </div>

            <div class="font-bold text-900 mb-3">Quantity</div>
            <div class="flex flex-column sm:flex-row sm:align-items-center sm:justify-content-between">
                <p-inputNumber [showButtons]="true" buttonLayout="horizontal" spinnerMode="horizontal" [min]="0" inputStyleClass="w-3rem text-center" [(ngModel)]="quantity"
                    decrementButtonClass="p-button-text" incrementButtonClass="p-button-text" incrementButtonIcon="pi pi-plus" decrementButtonIcon="pi pi-minus"></p-inputNumber>
                <div class="flex align-items-center flex-1 mt-3 sm:mt-0 ml-0 sm:ml-5">
                    <button pButton pRipple label="Add to Cart" class="flex-1 mr-5"></button>
                    <i class="pi text-2xl cursor-pointer" [ngClass]="{'pi-heart text-600': !liked, 'pi-heart-fill text-orange-500': liked}" (click)="liked = !liked"></i>
                </div>
            </div>
        </div>
    </div>

    <p-tabView>
        <p-tabPanel header="Details">
            <div class="text-900 font-bold text-3xl mb-4 mt-2">Product Details</div>
            <p class="line-height-3 text-600 p-0 mx-0 mt-0 mb-4">Volutpat maecenas volutpat blandit aliquam etiam erat velit scelerisque in. Duis ultricies lacus sed turpis tincidunt id. Sed tempus urna et pharetra.
                Metus vulputate eu scelerisque felis imperdiet proin fermentum. Venenatis urna cursus eget nunc scelerisque viverra mauris in.
                Viverra justo nec ultrices dui sapien eget mi proin. Laoreet suspendisse interdum consectetur libero id faucibus.</p>

            <div class="grid">
                <div class="col-12 lg:col-4">
                    <span class="text-900 block font-medium mb-3 font-bold">Highlights</span>
                    <ul class="py-0 pl-3 m-0 text-600 mb-3">
                        <li class="mb-2">Vulputate sapien nec.</li>
                        <li class="mb-2">Purus gravida quis blandit.</li>
                        <li class="mb-2">Nisi quis eleifend quam adipiscing.</li>
                        <li>Imperdiet proin fermentum.</li>
                    </ul>
                </div>
                <div class="col-12 lg:col-4">
                    <span class="text-900 block mb-3 font-bold">Size and Fit</span>
                    <ul class="list-none p-0 m-0 text-600 mb-4 text-600">
                        <li class="mb-3"><span class="font-semibold">Leo vel:</span> Egestas congue.</li>
                        <li class="mb-3"><span class="font-semibold">Sociis natoque:</span> Parturient montes nascetur.</li>
                        <li><span class="font-semibold">Suspendisse in:</span> Purus sit amet volutpat.</li>
                    </ul>
                </div>
                <div class="col-12 lg:col-4">
                    <span class="text-900 block mb-3 font-bold">Material & Care</span>
                    <ul class="p-0 m-0 flex flex-wrap flex-column xl:flex-row text-600">
                        <li class="flex align-items-center white-space-nowrap w-10rem block mr-2 mb-3">
                            <i class="pi pi-sun mr-2 text-900"></i>
                            <span>Not dryer safe</span>
                        </li>
                        <li class="flex align-items-center white-space-nowrap w-10rem block mb-3">
                            <i class="pi pi-times-circle mr-2 text-900"></i>
                            <span>No chemical wash</span>
                        </li>
                        <li class="flex align-items-center white-space-nowrap w-10rem block mb-3 mr-2">
                            <i class="pi pi-sliders-h mr-2 text-900"></i>
                            <span>Iron medium heat</span>
                        </li>
                        <li class="flex align-items-center white-space-nowrap w-10rem block mb-3">
                            <i class="pi pi-minus-circle mr-2 text-900"></i>
                            <span>Dry flat</span>
                        </li>
                    </ul>
                </div>
            </div>
        </p-tabPanel>
        <p-tabPanel header="Reviews">
            <div class="text-900 font-bold text-3xl mb-4 mt-2">Customer Reviews</div>
            <ul class="list-none p-0 m-0">
                <li class="pb-5 border-bottom-1 surface-border">
                    <span>
                        <i class="pi pi-star-fill text-yellow-500 mr-1"></i>
                        <i class="pi pi-star-fill text-yellow-500 mr-1"></i>
                        <i class="pi pi-star-fill text-yellow-500 mr-1"></i>
                        <i class="pi pi-star-fill text-yellow-500 mr-1"></i>
                        <i class="pi pi-star-fill text-gray-500"></i>
                    </span>
                    <div class="text-900 font-bold text-xl my-3">Absolute Perfection!</div>
                    <p class="mx-0 mt-0 mb-3 text-600 line-height-3">Blandit libero volutpat sed cras ornare arcu dui vivamus. Arcu dictum varius duis at consectetur lorem donec massa. Imperdiet proin fermentum leo vel orci porta non. Porttitor rhoncus dolor purus non.</p>
                    <span class="font-medium">Darlene Robertson, 2 days ago</span>
                </li>
                <li class="py-5 border-bottom-1 surface-border">
                    <span>
                        <i class="pi pi-star-fill text-yellow-500 mr-1"></i>
                        <i class="pi pi-star-fill text-yellow-500 mr-1"></i>
                        <i class="pi pi-star-fill text-yellow-500 mr-1"></i>
                        <i class="pi pi-star-fill text-yellow-500 mr-1"></i>
                        <i class="pi pi-star-fill text-yellow-500"></i>
                    </span>
                    <div class="text-900 font-bold text-xl my-3">Classy</div>
                    <p class="mx-0 mt-0 mb-3 text-600 line-height-3">Venenatis cras sed felis eget. Proin nibh nisl condimentum id venenatis a condimentum.</p>
                    <span class="font-medium">Kristin Watson, 2 days ago</span>
                </li>
            </ul>
        </p-tabPanel>
        <p-tabPanel header="Shipping and Returns">
            <div class="text-900 font-bold text-3xl mb-4 mt-2">Shipping Placeholder</div>
            <p class="line-height-3 text-600 p-0 mx-0 mt-0 mb-4">Mattis aliquam faucibus purus in massa tempor nec feugiat nisl. Justo donec enim diam vulputate ut pharetra. Tempus egestas sed sed risus.
                Feugiat sed lectus vestibulum mattis. Tristique nulla aliquet enim tortor at auctor urna nunc. Habitant morbi tristique senectus et. Facilisi nullam vehicula ipsum.</p>

            <div class="grid">
                <div class="col-12 md:col-6">
                    <span class="text-900 block font-bold mb-3 font-bold">Shipping Costs</span>
                    <ul class="py-0 pl-3 m-0 text-600 mb-3">
                        <li class="mb-2">Japan - JPY 2,500.</li>
                        <li class="mb-2">Europe - EUR 10</li>
                        <li class="mb-2">Switzerland - CHF 10</li>
                        <li class="mb-2">Canada - CAD 25</li>
                        <li class="mb-2">USA - USD 20</li>
                        <li class="mb-2">Australia - AUD 30</li>
                        <li class="mb-2">United Kingdom - GBP 10</li>
                    </ul>
                </div>
                <div class="col-12 md:col-6">
                    <span class="text-900 block font-bold mb-3">Return Policy</span>
                    <p class="line-height-3 text-600 p-0 m-0">Pharetra et ultrices neque ornare aenean euismod elementum nisi. Diam phasellus vestibulum lorem sed. Mattis molestie a iaculis at. </p>
                </div>
            </div>
        </p-tabPanel>
    </p-tabView>
</div>

================
File: src/app/demo/components/ecommerce/productoverview/productoverview.component.ts
================
import { Component, OnInit } from '@angular/core';

@Component({
    templateUrl: './productoverview.component.html',
})
export class ProductOverviewComponent implements OnInit {
    
    color: string = 'bluegray';

    size: string = 'M';

    liked: boolean = false;

    images: string[] = [];

    selectedImageIndex: number = 0;

    quantity: number = 1;
          
    ngOnInit(): void {
      this.images = [
          'product-overview-3-1.png',
          'product-overview-3-2.png',
          'product-overview-3-3.png',
          'product-overview-3-4.png'
      ];
    }
}

================
File: src/app/demo/components/ecommerce/productoverview/productoverview.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ProductOverviewComponent } from './productoverview.component';
import { ProductoverviewRoutingModule } from './productoverview-routing.module';
import { InputNumberModule } from 'primeng/inputnumber';
import { TabViewModule } from 'primeng/tabview';
import { ButtonModule } from 'primeng/button';
import { RippleModule } from 'primeng/ripple';
@NgModule({
	imports: [
		CommonModule,
		FormsModule,
		InputNumberModule,
		ButtonModule,
		RippleModule,
		TabViewModule,
		ProductoverviewRoutingModule
	],
	declarations: [ProductOverviewComponent]
})
export class ProductoverviewModule { }

================
File: src/app/demo/components/ecommerce/shopping-cart/shopping-cart-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { ShoppingCartComponent } from './shopping-cart.component';

@NgModule({
    imports: [RouterModule.forChild([
        { path: '', component: ShoppingCartComponent }
    ])],
    exports: [RouterModule]
})
export class ShoppingCartRoutingModule { }

================
File: src/app/demo/components/ecommerce/shopping-cart/shopping-cart.component.html
================
<div class="card">
    <div class="flex flex-column align-items-center mb-6">
        <div class="text-900 text-4xl mb-4 font-medium">Your cart total is $82.00</div>
        <p class="text-700 font-medium text-xl mt-0 mb-4">FREE SHIPPING AND RETURN</p>
        <button pButton pRipple label="Check Out"></button>
    </div>
    <ul class="list-none p-0 m-0">
        <li class="flex flex-column md:flex-row py-6 border-top-1 border-bottom-1 surface-border md:align-items-center">
            <img src="assets/demo/images/ecommerce/shopping-cart/shopping-cart-2-1.png" class="w-12rem flex-shrink-0 mx-auto md:mx-0" />
            <div class="flex-auto py-5 md:pl-5">
                <div class="flex flex-wrap align-items-start sm:align-items-center sm:flex-row sm:justify-content-between surface-border pb-6">
                    <div class="w-full sm:w-6 flex flex-column">
                        <span class="text-900 text-xl font-medium mb-3">Product Name</span>
                        <span class="text-700">Medium</span>
                    </div>
                    <div class="w-full sm:w-6 flex align-items-start justify-content-between mt-3 sm:mt-0">
                        <div>
                            <p-dropdown [options]="quantityOptions"></p-dropdown>
                        </div>
                        <div class="flex flex-column sm:align-items-end">
                            <span class="text-900 text-xl font-medium mb-2 sm:mb-3">$20.00</span>
                            <a class="cursor-pointer text-pink-500 font-medium text-sm hover:text-pink-600 transition-colors transition-duration-300" tabindex="0">Remove</a>
                        </div>
                    </div>
                </div>
                <div class="flex flex-column">
                    <span class="inline-flex align-items-center mb-3">
                        <i class="pi pi-envelope text-700 mr-2"></i>
                        <span class="text-700 mr-2">Order today.</span>
                    </span>
                    <span class="inline-flex align-items-center mb-3">
                        <i class="pi pi-send text-700 mr-2"></i>
                        <span class="text-700 mr-2">Delivery by <span class="font-bold">Dec 23.</span></span>
                    </span>
                    <span class="flex align-items-center">
                        <i class="pi pi-exclamation-triangle text-700 mr-2"></i>
                        <span class="text-700">Only 8 Available.</span>
                    </span>
                </div>
            </div>
        </li>
        <li class="flex flex-column md:flex-row py-6 border-top-1 border-bottom-1 surface-border md:align-items-center">
            <img src="assets/demo/images/ecommerce/shopping-cart/shopping-cart-2-2.png" class="w-12rem flex-shrink-0 mx-auto md:mx-0" />
            <div class="flex-auto py-5 md:pl-5">
                <div class="flex flex-wrap align-items-start sm:align-items-center sm:flex-row sm:justify-content-between surface-border pb-6">
                    <div class="w-full sm:w-6 flex flex-column">
                        <span class="text-900 text-xl font-medium mb-3">Product Name</span>
                        <span class="text-700">Medium</span>
                    </div>
                    <div class="w-full sm:w-6 flex align-items-start justify-content-between mt-3 sm:mt-0">
                        <div>
                            <p-dropdown [options]="quantityOptions"></p-dropdown>
                        </div>
                        <div class="flex flex-column sm:align-items-end">
                            <span class="text-900 text-xl font-medium mb-2 sm:mb-3">$62.00</span>
                            <a class="cursor-pointer text-pink-500 font-medium text-sm hover:text-pink-600 transition-colors transition-duration-300" tabindex="0">Remove</a>
                        </div>
                    </div>
                </div>
                <div class="flex flex-column">
                    <span class="inline-flex align-items-center mb-3">
                        <i class="pi pi-envelope text-700 mr-2"></i>
                        <span class="text-700 mr-2">Order today.</span>
                    </span>
                    <span class="inline-flex align-items-center mb-3">
                        <i class="pi pi-send text-700 mr-2"></i>
                        <span class="text-700 mr-2">Delivery by <span class="font-bold">Dec 23.</span></span>
                    </span>
                    <span class="flex align-items-center">
                        <i class="pi pi-exclamation-triangle text-700 mr-2"></i>
                        <span class="text-700">Only 2 Available.</span>
                    </span>
                </div>
            </div>
        </li>
    </ul>
    <div class="flex">
        <div class="w-12rem hidden md:block"></div>
        <ul class="list-none py-0 pr-0 pl-0 md:pl-5 mt-6 mx-0 mb-0 flex-auto">
            <li class="flex justify-content-between mb-4">
                <span class="text-xl text-900 font-semibold">Subtotal</span>
                <span class="text-xl text-900">$82.00</span>
            </li>
            <li class="flex justify-content-between mb-4">
                <span class="text-xl text-900 font-semibold">Shipping</span>
                <span class="text-xl text-900">Free</span>
            </li>
            <li class="flex justify-content-between mb-4">
                <span class="text-xl text-900 font-semibold">VAT</span>
                <span class="text-xl text-900">$8.00</span>
            </li>
            <li class="flex justify-content-between border-top-1 surface-border mb-4 pt-4">
                <span class="text-xl text-900 font-bold text-3xl">Total</span>
                <span class="text-xl text-900 font-bold text-3xl">$90.00</span>
            </li>
            <li class="flex justify-content-end">
                <button pButton pRipple label="Check Out"></button>
            </li>
        </ul>
    </div>
</div>

================
File: src/app/demo/components/ecommerce/shopping-cart/shopping-cart.component.ts
================
import { Component } from '@angular/core';
import { SelectItem } from 'primeng/api';

@Component({
    templateUrl: './shopping-cart.component.html'
})
export class ShoppingCartComponent {

    constructor() { }

    quantityOptions: SelectItem[] = [{ label: '1', value: 1 }, { label: '2', value: 2 }, { label: '3', value: 3 }, { label: '4', value: 4 }];
    
}

================
File: src/app/demo/components/ecommerce/shopping-cart/shopping-cart.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ShoppingCartComponent } from './shopping-cart.component';
import { ButtonModule } from 'primeng/button';
import { DropdownModule } from 'primeng/dropdown';
import { RippleModule } from 'primeng/ripple';
import { ShoppingCartRoutingModule } from './shopping-cart-routing.module';

@NgModule({
    imports: [
        CommonModule,
        ShoppingCartRoutingModule,
        ButtonModule,
        RippleModule,
        DropdownModule,
    ],
    declarations: [ShoppingCartComponent],
})
export class ShoppingCartModule { }

================
File: src/app/demo/components/landing/animateenter.directive.ts
================
import {  Directive, ElementRef, OnDestroy, Renderer2, Input, OnInit, HostBinding, AfterViewInit } from '@angular/core';

@Directive({
    // eslint-disable-next-line @angular-eslint/directive-selector
    selector: '[animateEnter]'
})
export class AnimateEnterDirective implements OnInit, AfterViewInit, OnDestroy {

    @Input('animateEnter') animation!: string;

    documentScrollListener: Function | null = null;

    loadListener: Function = () => { };

    entered: boolean = false;

    @HostBinding('class.visibility-hidden') visibilityHidden: boolean = true;

    constructor(public el: ElementRef, public renderer: Renderer2) { }

    ngOnInit() {
        if (this.isImage()) {
            this.loadListener = this.renderer.listen(this.el.nativeElement, 'load', () => {
                this.bind();
            });
        }
    }

    ngAfterViewInit() {
        if (!this.isImage()) {
            this.bind();
        }
    }

    bind(): void {
        if (this.isInViewPort()) {
            this.enter();
        }

        if (!this.entered) {
            this.documentScrollListener = this.renderer.listen('window', 'scroll', () => {
                if (this.isInViewPort() && this.documentScrollListener) {
                    this.enter();
                    this.documentScrollListener();
                    this.documentScrollListener = null;
                }
            });
        }
    }

    shouldEnter(): boolean {
        return this.entered ? false: this.isInViewPort();
    }

    isInViewPort() {
        let rect = this.el.nativeElement.parentElement.parentElement.parentElement.getBoundingClientRect();
        let docElement = document.documentElement;
        let winHeight = docElement.clientHeight;

        if (rect.top > 0) {
            return (rect.top >= 0 && winHeight >= rect.top);
        } 
        else {
            return true
        }
    }

    enter(): void {
        this.el.nativeElement.classList.add('hidden', this.animation);
        this.el.nativeElement.classList.remove('visibility-hidden', 'hidden');
        this.entered = true;
    }

    isImage(): boolean {
        return this.el.nativeElement.tagName === 'IMG';
    }

    ngOnDestroy() {
        if (this.documentScrollListener) {
            this.documentScrollListener();
        }

        if (this.loadListener) {
            this.loadListener();
        }
    }
}

================
File: src/app/demo/components/landing/landing-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { LandingComponent } from './landing.component';

@NgModule({
    imports: [RouterModule.forChild([
        { path: '', component: LandingComponent }
    ])],
    exports: [RouterModule]
})
export class LandingRoutingModule { }

================
File: src/app/demo/components/landing/landing.component.html
================
<div class="relative overflow-hidden flex flex-column justify-content-center">
    <div class="bg-circle opacity-50" style="top: -200px; left: -700px;"></div>
    <div class="bg-circle hidden lg:flex" style="top: 50px; right:-800px; transform: rotate(60deg)"></div>
    <div class="landing-wrapper">
        <div
            class="flex align-items-center justify-content-between relative lg:static py-6 px-4 mx-0 md:px-7 lg:px-8 lg:py-6 lg:mx-8">
            <a class="cursor-pointer" (click)="router.navigate(['/landing'])">
                <svg width="124" height="22" viewBox="0 0 124 22" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M10.4851 0L0 20.9465H3.53702L10.4856 6.07843L17.2944 20.9465H20.9715L10.4851 0Z"
                        fill="var(--primary-color)" />
                    <path d="M13.84 15.7927L16.2077 21.0016H11.7682L13.84 15.7927Z" fill="var(--primary-color)" />
                    <path d="M9.04645 21.0016L6.67875 15.7927L4.60701 21.0016H9.04645Z" fill="var(--primary-color)" />
                    <path
                        d="M40.9033 14.5217H34.771L33.1753 18.0007H30.8467L37.9346 2.77661L44.772 18.0007H42.4062L40.9033 14.5217ZM40.022 12.49L37.8975 7.61938L35.6709 12.49H40.022Z"
                        fill="var(--primary-color)" />
                    <path
                        d="M52.4927 12.1838V18.0007H50.3311V3.67651H52.7803C53.9802 3.67651 54.8862 3.76001 55.4985 3.927C56.117 4.09399 56.6613 4.40942 57.1314 4.87329C57.954 5.67733 58.3652 6.69165 58.3652 7.91626C58.3652 9.22746 57.9261 10.2665 57.0479 11.0334C56.1696 11.8004 54.9852 12.1838 53.4946 12.1838H52.4927ZM52.4927 10.1799H53.2998C55.2852 10.1799 56.2778 9.4161 56.2778 7.88843C56.2778 6.41024 55.2542 5.67114 53.207 5.67114H52.4927V10.1799Z"
                        fill="var(--primary-color)" />
                    <path
                        d="M63.6367 10.7737C63.6367 8.75741 64.3758 7.02563 65.854 5.57837C67.326 4.1311 69.0949 3.40747 71.1607 3.40747C73.2017 3.40747 74.952 4.13729 76.4116 5.59692C77.8775 7.05656 78.6104 8.80998 78.6104 10.8572C78.6104 12.9167 77.8744 14.664 76.4024 16.0989C74.9242 17.54 73.1398 18.2605 71.0493 18.2605C69.2001 18.2605 67.5394 17.6204 66.0674 16.3401C64.447 14.9237 63.6367 13.0683 63.6367 10.7737ZM65.8169 10.8015C65.8169 12.3848 66.3488 13.6868 67.4126 14.7073C68.4702 15.7278 69.6918 16.238 71.0772 16.238C72.5801 16.238 73.848 15.7185 74.8809 14.6794C75.9138 13.628 76.4302 12.3477 76.4302 10.8386C76.4302 9.31095 75.9199 8.03068 74.8994 6.9978C73.8851 5.95874 72.6296 5.43921 71.1328 5.43921C69.6423 5.43921 68.3836 5.95874 67.357 6.9978C66.3303 8.0245 65.8169 9.2924 65.8169 10.8015Z"
                        fill="var(--primary-color)" />
                    <path d="M87.2495 3.67651V15.969H91.4615V18.0007H85.0879V3.67651H87.2495Z"
                        fill="var(--primary-color)" />
                    <path d="M99.4327 3.67651V15.969H103.645V18.0007H97.271V3.67651H99.4327Z"
                        fill="var(--primary-color)" />
                    <path
                        d="M108.146 10.7737C108.146 8.75741 108.885 7.02563 110.363 5.57837C111.835 4.1311 113.604 3.40747 115.67 3.40747C117.711 3.40747 119.461 4.13729 120.921 5.59692C122.387 7.05656 123.12 8.80998 123.12 10.8572C123.12 12.9167 122.384 14.664 120.912 16.0989C119.433 17.54 117.649 18.2605 115.559 18.2605C113.709 18.2605 112.049 17.6204 110.577 16.3401C108.956 14.9237 108.146 13.0683 108.146 10.7737ZM110.326 10.8015C110.326 12.3848 110.858 13.6868 111.922 14.7073C112.98 15.7278 114.201 16.238 115.586 16.238C117.089 16.238 118.357 15.7185 119.39 14.6794C120.423 13.628 120.94 12.3477 120.94 10.8386C120.94 9.31095 120.429 8.03068 119.409 6.9978C118.394 5.95874 117.139 5.43921 115.642 5.43921C114.152 5.43921 112.893 5.95874 111.866 6.9978C110.84 8.0245 110.326 9.2924 110.326 10.8015Z"
                        fill="var(--primary-color)" />
                </svg>
            </a>
            <a pRipple class="cursor-pointer block md:hidden text-700 text-primary" pStyleClass="@next"
                enterFromClass="ng-hidden" enterActiveClass="px-fadein" leaveToClass="ng-hidden"
                leaveActiveClass="px-fadeout" [hideOnOutsideClick]="true">
                <i class="pi pi-bars text-4xl"></i>
            </a>
            <ul #menu  style="top:80px; right: 0%;"
                class="list-none  p-3 md:p-0  justify-content-end ng-hidden md:flex absolute md:static w-full md:w-6 md:px-0 z-3 shadow-2 md:shadow-none  surface-card md:surface-ground">
                <a pRipple class="cursor-pointer block md:hidden text-700 text-primary absolute z-5" style="top:1.5rem;
                right: 1.5rem;" pRipple pStyleClass="@parent"
                        enterFromClass="ng-hidden" enterActiveClass="px-fadein" leaveToClass="ng-hidden" leaveActiveClass="px-fadeout">
                    <i class="pi pi-times text-3xl"></i>
                </a>

                <li class=" md:mt-0">
                    <a (click)="router.navigate(['/landing'], {fragment: 'home'})" pRipple pStyleClass="@grandparent"
                        enterFromClass="ng-hidden" enterActiveClass="px-fadein" leaveToClass="ng-hidden"
                        class="flex m-0 md:ml-5 px-0 py-3 text-900 font-medium line-height-3 cursor-pointer">
                        <span>Home</span>
                    </a>
                </li>
                <li>
                    <a (click)="router.navigate(['/landing'], {fragment: 'apps'})" pRipple pStyleClass="@grandparent"
                        enterFromClass="ng-hidden" enterActiveClass="px-fadein" leaveToClass="ng-hidden"
                        class="flex m-0 md:ml-5 px-0 py-3 text-900 font-medium line-height-3 cursor-pointer">
                        <span>Apps</span>
                    </a>
                </li>
                <li>
                    <a (click)="router.navigate(['/landing'], {fragment: 'pricing'})" pRipple pStyleClass="@grandparent"
                        enterFromClass="ng-hidden" enterActiveClass="px-fadein" leaveToClass="ng-hidden"
                        class="flex m-0 md:ml-5 px-0 py-3 text-900 font-medium line-height-3 cursor-pointer">
                        <span>Pricing</span>
                    </a>
                </li>
                <li>
                    <a (click)="router.navigate(['/landing'], {fragment: 'features'})" pRipple pStyleClass="@grandparent"
                        enterFromClass="ng-hidden" enterActiveClass="px-fadein" leaveToClass="ng-hidden"
                        class="flex m-0 md:ml-5 px-0 py-3 text-900 font-medium line-height-3 cursor-pointer">
                        <span>Features</span>
                    </a>
                </li>
            
                
                <li class="flex align-items-center">
                    <button pButton pRipple type="button" pStyleClass="@grandparent" enterFromClass="ng-hidden"
                        enterActiveClass="px-fadein" leaveToClass="ng-hidden" label="Buy Now"
                        class="m-0 mt-3 md:mt-0 md:ml-5 white-space-nowrap"></button>
                </li>
            </ul>
         
        </div>
        <div class="py-4 px-4 mx-0 md:mx-6 lg:mx-8 lg:px-8 z-2">
            <div id="home"
                class="grid grid-nogutter justify-content-between align-items-center mb-6 py-6 md:mb-8 md:py-8">
                <div
                    class="col-12 md:col-4 flex flex-column gap-4 flex-order-1 md:flex-order-0 align-items-center md:align-items-start text-center md:text-left">
                    <span class="block text-900 font-bold text-4xl">Modern, stylish and clean</span>
                    <span class="block text-700 text-lg">The ultimate collection of design-agnostic, flexible and
                        accessible UI Components.</span>
                    <ul class="flex flex-wrap gap-5 list-none p-0">
                        <li class="flex align-items-center">
                            <div class="p-1 border-circle bg-green-400 inline-block mr-2"></div>
                            <span class="text-900 font-semibold">Javascript</span>
                        </li>
                        <li class="flex align-items-center">
                            <div class="p-1 border-circle bg-green-400 inline-block mr-2"></div>
                            <span class="text-900 font-semibold">TypeScript</span>
                        </li>
                        <li class="flex align-items-center">
                            <div class="p-1 border-circle bg-green-400 inline-block mr-2"></div>
                            <span class="text-900 font-semibold">Angular</span>
                        </li>
                    </ul>
                    <button pButton pRipple type="button" label="Live Preview" icon="pi pi-arrow-right" iconPos="right"
                        class="w-12rem p-button-outlined"></button>
                </div>

                <div class="col-12 md:col-7 flex-order-0 md:flex-order-1 mb-6 md:mb-0 border-round">
                    <img animateEnter="moveinright"
                        src="assets/demo/images/landing/{{darkMode ? 'dashboard-dark' : 'dashboard-light'}}.png" alt=""
                        class="w-full h-full border-round shadow-2 animation-duration-1000 animation-ease-out">
                </div>
            </div>

            <div id="apps" class="my-6 md:my-8">
                <span class="text-900 block font-bold text-5xl mb-4 text-center">Apps</span>
                <span class="text-700 block text-xl mb-8 text-center line-height-3">Lorem ipsum dolor sit, amet
                    consectetur adipisicing elit. Velit numquam eligendi quos.</span>

                <div class="flex flex-column lg:flex-row align-items-center justify-content-between mt-8 gap-8">
                    <div class="flex flex-column align-items-center">
                        <img animateEnter="scalein"
                            src="assets/demo/images/landing/{{darkMode ? 'chat-dark' : 'chat-light'}}.png" alt="chat"
                            class="w-full h-full border-round surface-border shadow-2 animation-duration-500 origin-top">
                        <span class="block text-900 text-lg font-semibold mt-4">Chat</span>
                    </div>
                    <div class="flex flex-column align-items-center">
                        <img animateEnter="scalein"
                            src="assets/demo/images/landing/{{darkMode ? 'mail-dark' : 'mail-light'}}.png" alt="chat"
                            class="w-full h-full border-round surface-border shadow-2 animation-duration-500 origin-top">
                        <span class="block text-900 text-lg font-semibold mt-4">Mail</span>
                    </div>
                    <div class="flex flex-column align-items-center">
                        <img animateEnter="scalein"
                            src="assets/demo/images/landing/{{darkMode ? 'kanban-dark' : 'kanban-light'}}.png"
                            alt="chat"
                            class="w-full h-full border-round surface-border shadow-2 animation-duration-500 origin-top">
                        <span class="block text-900 text-lg font-semibold mt-4">Kanban</span>
                    </div>
                </div>
            </div>

            <div id="pricing" class="my-6 py-6 md:my-8 md:py-8">
                <div class="text-900 font-bold text-5xl mb-4 text-center">Pricing Plans</div>
                <div class="text-700 text-xl mb-8 text-center line-height-3">Choose a plan that works best for you and
                    your team.</div>

                <div class="grid grid-nogutter justify-content-center mt-8">
                    <div class="col-12 lg:col-6 xl:col-4">
                        <div class="p-3 h-full">
                            <div class="shadow-2 p-6 h-full flex flex-column surface-card" style="border-radius: 6px">
                                <span class="text-900 block font-medium text-xl mb-2 text-center">Basic Licence</span>
                                <span class="font-bold block text-2xl text-900 text-center">$29</span>

                                <ul class="list-none p-0 m-0 flex-grow-1 mt-6">
                                    <li class="flex align-items-center mb-3">
                                        <i class="pi pi-check text-green-500 mr-2"></i>
                                        <span>Up to 10 Active Users</span>
                                    </li>
                                    <li class="flex align-items-center mb-3">
                                        <i class="pi pi-check text-green-500 mr-2"></i>
                                        <span>Up to 30 Project Integrations</span>
                                    </li>
                                    <li class="flex align-items-center mb-3">
                                        <i class="pi pi-check text-green-500 mr-2"></i>
                                        <span>Analytics Module</span>
                                    </li>
                                    <li class="flex align-items-center mb-3">
                                        <i class="pi pi-times text-red-500 mr-2"></i>
                                        <span>Finance Module</span>
                                    </li>
                                </ul>

                                <button pButton pRipple label="Choose Plan" class="px-5 w-full mt-6 p-button-outlined"
                                    icon="pi pi-arrow-right" iconPos="right"></button>
                            </div>
                        </div>
                    </div>

                    <div class="col-12 lg:col-6 xl:col-4">
                        <div class="p-3 h-full">
                            <div class="shadow-2 p-6 h-full flex flex-column surface-card" style="border-radius: 6px">
                                <span class="text-900 block font-medium text-xl mb-2 text-center">Extended
                                    Licence</span>
                                <span class="font-bold block text-2xl text-900 text-center">$49</span>

                                <ul class="list-none p-0 m-0 flex-grow-1 mt-6">
                                    <li class="flex align-items-center mb-3">
                                        <i class="pi pi-check text-green-500 mr-2"></i>
                                        <span>Up to 10 Active Users</span>
                                    </li>
                                    <li class="flex align-items-center mb-3">
                                        <i class="pi pi-check text-green-500 mr-2"></i>
                                        <span>Up to 30 Project Integrations</span>
                                    </li>
                                    <li class="flex align-items-center mb-3">
                                        <i class="pi pi-check text-green-500 mr-2"></i>
                                        <span>Analytics Module</span>
                                    </li>
                                    <li class="flex align-items-center mb-3">
                                        <i class="pi pi-times text-red-500 mr-2"></i>
                                        <span>Finance Module</span>
                                    </li>
                                </ul>

                                <button pButton pRipple label="Choose Plan" class="px-5 w-full mt-6 p-button-outlined"
                                    icon="pi pi-arrow-right" iconPos="right"></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div id="features" class="my-6 py-6 md:my-8 md:py-8">
                <span class="text-900 block font-bold text-5xl mb-4 text-center">Features</span>
                <span class="text-700 block text-xl mb-8 text-center line-height-3">PrimeTek Informatics is the author
                    of PrimeReact, a UI Component vendor with well known vastly popular projects including PrimeFaces,
                    PrimeNG and PrimeVue.</span>

                <div class="grid mt-8">
                    <div class="col-12 md:col-6 xl:col-3 flex justify-content-center p-3">
                        <div class="box p-4 w-full surface-card surface-border border-1 border-round">
                            <img src="assets/demo/images/landing/icon-components.svg" alt="components icon"
                                class="block mb-3" />
                            <span class="text-900 block font-semibold mb-3 text-lg">90+ UI Components</span>
                            <p class="m-0 text-secondary text-700">The ultimate set of UI Components to assist you with
                                90+ impressive Angular Components.</p>
                        </div>
                    </div>
                    <div class="col-12 md:col-6 xl:col-3 flex justify-content-center p-3">
                        <div class="box p-4 w-full surface-card surface-border border-1 border-round">
                            <img src="assets/demo/images/landing/icon-community.svg" alt="components icon"
                                class="block mb-3" />
                            <span class="text-900 block font-semibold mb-3 text-lg">Community</span>
                            <p class="m-0 text-secondary text-700">Connect with the other open source community members,
                                collaborate and have a voice in the project roadmap.</p>
                        </div>
                    </div>
                    <div class="col-12 md:col-6 xl:col-3 flex justify-content-center p-3">
                        <div class="box p-4 w-full surface-card surface-border border-1 border-round">
                            <img src="assets/demo/images/landing/icon-productivity.svg" alt="components icon"
                                class="block mb-3" />
                            <span class="text-900 block font-semibold mb-3 text-lg">Productivity</span>
                            <p class="m-0 text-secondary text-700">Boost your productivity by achieving more in less
                                time and accomplish amazing results.</p>
                        </div>
                    </div>
                    <div class="col-12 md:col-6 xl:col-3 flex justify-content-center p-3">
                        <div class="box p-4 w-full surface-card surface-border border-1 border-round">
                            <img src="assets/demo/images/landing/icon-accessibility.svg" alt="components icon"
                                class="block mb-3" />
                            <span class="text-900 block font-semibold mb-3 text-lg">Accessibility</span>
                            <p class="m-0 text-secondary text-700">The ultimate set of UI Components to assist you with
                                90+ impressive Angular Components.</p>
                        </div>
                    </div>
                    <div class="col-12 md:col-6 xl:col-3 flex justify-content-center p-3">
                        <div class="box p-4 w-full surface-card surface-border border-1 border-round">
                            <img src="assets/demo/images/landing/icon-support.svg" alt="components icon"
                                class="block mb-3" />
                            <span class="text-900 block font-semibold mb-3 text-lg">Enterprise Support</span>
                            <p class="m-0 text-secondary text-700">Exceptional support service featuring response within
                                1 business day and option to request enhancements and new features for the library.</p>
                        </div>
                    </div>
                    <div class="col-12 md:col-6 xl:col-3 flex justify-content-center p-3">
                        <div class="box p-4 w-full surface-card surface-border border-1 border-round">
                            <img src="assets/demo/images/landing/icon-mobile.svg" alt="components icon"
                                class="block mb-3" />
                            <span class="text-900 block font-semibold mb-3 text-lg">Mobile</span>
                            <p class="m-0 text-secondary text-700">First class support for responsive design led by
                                touch optimized elements.</p>
                        </div>
                    </div>
                    <div class="col-12 md:col-6 xl:col-3 flex justify-content-center p-3">
                        <div class="box p-4 w-full surface-card surface-border border-1 border-round">
                            <img src="assets/demo/images/landing/icon-theme.svg" alt="components icon"
                                class="block mb-3" />
                            <span class="text-900 block font-semibold mb-3 text-lg">Themes</span>
                            <p class="m-0 text-secondary text-700">Built on a design-agnostic api, choose from a vast
                                amount of themes such as material, bootstrap, custom or develop your own.</p>
                        </div>
                    </div>
                    <div class="col-12 md:col-6 xl:col-3 flex justify-content-center p-3">
                        <div class="box p-4 w-full surface-card surface-border border-1 border-round">
                            <img src="assets/demo/images/landing/icon-ts.svg" alt="components icon"
                                class="block mb-3" />
                            <span class="text-900 block font-semibold mb-3 text-lg">Typescript</span>
                            <p class="m-0 text-secondary text-700">Top-notch support for Typescript with types and
                                tooling assistance.</p>
                        </div>
                    </div>
                </div>
            </div>

            <div class="grid justify-content-between my-6 pt-4 md:my-8">
                <div class="col-12 md:col-2 text-center md:text-left">
                    <a class="cursor-pointer" href="#">
                        <svg width="124" height="22" viewBox="0 0 124 22" fill="none"
                            xmlns="http://www.w3.org/2000/svg">
                            <path d="M10.4851 0L0 20.9465H3.53702L10.4856 6.07843L17.2944 20.9465H20.9715L10.4851 0Z"
                                fill="var(--primary-color)" />
                            <path d="M13.84 15.7927L16.2077 21.0016H11.7682L13.84 15.7927Z"
                                fill="var(--primary-color)" />
                            <path d="M9.04645 21.0016L6.67875 15.7927L4.60701 21.0016H9.04645Z"
                                fill="var(--primary-color)" />
                            <path
                                d="M40.9033 14.5217H34.771L33.1753 18.0007H30.8467L37.9346 2.77661L44.772 18.0007H42.4062L40.9033 14.5217ZM40.022 12.49L37.8975 7.61938L35.6709 12.49H40.022Z"
                                fill="var(--primary-color)" />
                            <path
                                d="M52.4927 12.1838V18.0007H50.3311V3.67651H52.7803C53.9802 3.67651 54.8862 3.76001 55.4985 3.927C56.117 4.09399 56.6613 4.40942 57.1314 4.87329C57.954 5.67733 58.3652 6.69165 58.3652 7.91626C58.3652 9.22746 57.9261 10.2665 57.0479 11.0334C56.1696 11.8004 54.9852 12.1838 53.4946 12.1838H52.4927ZM52.4927 10.1799H53.2998C55.2852 10.1799 56.2778 9.4161 56.2778 7.88843C56.2778 6.41024 55.2542 5.67114 53.207 5.67114H52.4927V10.1799Z"
                                fill="var(--primary-color)" />
                            <path
                                d="M63.6367 10.7737C63.6367 8.75741 64.3758 7.02563 65.854 5.57837C67.326 4.1311 69.0949 3.40747 71.1607 3.40747C73.2017 3.40747 74.952 4.13729 76.4116 5.59692C77.8775 7.05656 78.6104 8.80998 78.6104 10.8572C78.6104 12.9167 77.8744 14.664 76.4024 16.0989C74.9242 17.54 73.1398 18.2605 71.0493 18.2605C69.2001 18.2605 67.5394 17.6204 66.0674 16.3401C64.447 14.9237 63.6367 13.0683 63.6367 10.7737ZM65.8169 10.8015C65.8169 12.3848 66.3488 13.6868 67.4126 14.7073C68.4702 15.7278 69.6918 16.238 71.0772 16.238C72.5801 16.238 73.848 15.7185 74.8809 14.6794C75.9138 13.628 76.4302 12.3477 76.4302 10.8386C76.4302 9.31095 75.9199 8.03068 74.8994 6.9978C73.8851 5.95874 72.6296 5.43921 71.1328 5.43921C69.6423 5.43921 68.3836 5.95874 67.357 6.9978C66.3303 8.0245 65.8169 9.2924 65.8169 10.8015Z"
                                fill="var(--primary-color)" />
                            <path d="M87.2495 3.67651V15.969H91.4615V18.0007H85.0879V3.67651H87.2495Z"
                                fill="var(--primary-color)" />
                            <path d="M99.4327 3.67651V15.969H103.645V18.0007H97.271V3.67651H99.4327Z"
                                fill="var(--primary-color)" />
                            <path
                                d="M108.146 10.7737C108.146 8.75741 108.885 7.02563 110.363 5.57837C111.835 4.1311 113.604 3.40747 115.67 3.40747C117.711 3.40747 119.461 4.13729 120.921 5.59692C122.387 7.05656 123.12 8.80998 123.12 10.8572C123.12 12.9167 122.384 14.664 120.912 16.0989C119.433 17.54 117.649 18.2605 115.559 18.2605C113.709 18.2605 112.049 17.6204 110.577 16.3401C108.956 14.9237 108.146 13.0683 108.146 10.7737ZM110.326 10.8015C110.326 12.3848 110.858 13.6868 111.922 14.7073C112.98 15.7278 114.201 16.238 115.586 16.238C117.089 16.238 118.357 15.7185 119.39 14.6794C120.423 13.628 120.94 12.3477 120.94 10.8386C120.94 9.31095 120.429 8.03068 119.409 6.9978C118.394 5.95874 117.139 5.43921 115.642 5.43921C114.152 5.43921 112.893 5.95874 111.866 6.9978C110.84 8.0245 110.326 9.2924 110.326 10.8015Z"
                                fill="var(--primary-color)" />
                        </svg>
                    </a>
                </div>

                <div class="col-12 md:col-10 lg:col-7">
                    <div class="grid text-center md:text-left">
                        <div class="col-12 md:col-3">
                            <h4 class="font-medium text-xl line-height-3 mb-3 text-900">Company</h4>
                            <a class="line-height-3 block cursor-pointer mb-2 text-700">About Us</a>
                            <a class="line-height-3 block cursor-pointer mb-2 text-700">News</a>
                            <a class="line-height-3 block cursor-pointer mb-2 text-700">Investor Relations</a>
                            <a class="line-height-3 block cursor-pointer mb-2 text-700">Careers</a>
                            <a class="line-height-3 block cursor-pointer text-700">Media Kit</a>
                        </div>

                        <div class="col-12 md:col-3 mt-4 md:mt-0">
                            <h4 class="font-medium text-xl line-height-3 mb-3 text-900">Resources</h4>
                            <a class="line-height-3 block cursor-pointer mb-2 text-700">Get Started</a>
                            <a class="line-height-3 block cursor-pointer mb-2 text-700">Learn</a>
                            <a class="line-height-3 block cursor-pointer text-700">Case Studies</a>
                        </div>

                        <div class="col-12 md:col-3 mt-4 md:mt-0">
                            <h4 class="font-medium text-xl line-height-3 mb-3 text-900">Community</h4>
                            <a class="line-height-3 block cursor-pointer mb-2 text-700">Discord</a>
                            <a class="line-height-3 block cursor-pointer mb-2 text-700">Events</a>
                            <a class="line-height-3 block cursor-pointer mb-2 text-700">FAQ</a>
                            <a class="line-height-3 block cursor-pointer text-700">Blog</a>
                        </div>

                        <div class="col-12 md:col-3 mt-4 md:mt-0">
                            <h4 class="font-medium text-xl line-height-3 mb-3 text-900">Legal</h4>
                            <a class="line-height-3 block cursor-pointer mb-2 text-700">Brand Policy</a>
                            <a class="line-height-3 block cursor-pointer mb-2 text-700">Privacy Policy</a>
                            <a class="line-height-3 block cursor-pointer text-700">Terms of Service</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<app-config [minimal]="true"></app-config>

================
File: src/app/demo/components/landing/landing.component.scss
================
.bg-circle {
    width: 1000px;
    height: 1000px;
    border-radius: 50%;
    background-image: linear-gradient(140deg,var(--primary-color),var(--surface-ground) 80%);
    position: absolute;
    opacity: 0.25;
    z-index: -1;
}

.visibility-hidden {
    visibility: hidden;
}

.moveinright {
    animation: moveinright .15s linear;
}

@keyframes moveinright {
    0% {
      opacity: 0;
      transform: translateX(50px);
      transition: transform .12s cubic-bezier(0, 0, 0.2, 1), opacity .12s cubic-bezier(0, 0, 0.2, 1);
    }
    100% {
      opacity: 1;
      transform: translateX(0%);
    }
  }

================
File: src/app/demo/components/landing/landing.component.ts
================
import { Component, OnDestroy } from '@angular/core';
import { Router } from '@angular/router';
import { LayoutService } from 'src/app/layout/service/app.layout.service';
import { Subscription } from 'rxjs';

@Component({
    templateUrl: './landing.component.html',
    styleUrls: ['./landing.component.scss']
})
export class LandingComponent implements OnDestroy {

    subscription: Subscription;

    darkMode: boolean = false;

    constructor(public router: Router, private layoutService: LayoutService) {
        this.subscription = this.layoutService.configUpdate$.subscribe(config => {
            this.darkMode = config.colorScheme === 'dark' || config.colorScheme === 'dim' ? true : false;
        });
    }

    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}

================
File: src/app/demo/components/landing/landing.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { LandingRoutingModule } from './landing-routing.module';
import { LandingComponent } from './landing.component';
import { ButtonModule } from 'primeng/button';
import { RouterModule } from '@angular/router';
import { StyleClassModule } from 'primeng/styleclass';
import { AppConfigModule } from 'src/app/layout/config/app.config.module';
import { AnimateEnterDirective } from './animateenter.directive'; 

@NgModule({
    imports: [
        CommonModule,
        LandingRoutingModule,
        ButtonModule,
        RouterModule,
        StyleClassModule,
        AppConfigModule,
    ],
    declarations: [LandingComponent, AnimateEnterDirective]
})
export class LandingModule { }

================
File: src/app/demo/components/notfound/notfound-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { NotfoundComponent } from './notfound.component';

@NgModule({
    imports: [RouterModule.forChild([
        { path: '', component: NotfoundComponent }
    ])],
    exports: [RouterModule]
})
export class NotfoundRoutingModule { }

================
File: src/app/demo/components/notfound/notfound.component.html
================
<svg viewBox="0 0 960 540" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" class="min-h-screen min-w-screen fixed left-0" style="bottom:-10rem" preserveAspectRatio="none">
    <rect x="0" y="0" width="960" height="540" fill="var(--surface-ground)"></rect>
    <path d="M0 331L26.7 321C53.3 311 106.7 291 160 291C213.3 291 266.7 311 320 329.5C373.3 348 426.7 365 480 373.2C533.3 381.3 586.7 380.7 640 373.8C693.3 367 746.7 354 800 341.2C853.3 328.3 906.7 315.7 933.3 309.3L960 303L960 541L933.3 541C906.7 541 853.3 541 800 541C746.7 541 693.3 541 640 541C586.7 541 533.3 541 480 541C426.7 541 373.3 541 320 541C266.7 541 213.3 541 160 541C106.7 541 53.3 541 26.7 541L0 541Z" fill="var(--orange-500)" stroke-linecap="round" stroke-linejoin="miter"></path>
</svg>
<div class="px-5 min-h-screen flex justify-content-center align-items-center">
    <div class="z-1 text-center">
        <div class="text-900 font-bold text-8xl mb-4">Oops!</div>
        <p class="line-height-3 mt-0 mb-5 text-700 text-xl font-medium">There is nothing here</p>
        <p-button [routerLink]="['/']" styleClass="p-button-warning font-medium p-button-raised">Go to Dashboard</p-button>
    </div>
</div>

================
File: src/app/demo/components/notfound/notfound.component.ts
================
import { Component } from '@angular/core';

@Component({
	templateUrl: './notfound.component.html'
})
export class NotfoundComponent { }

================
File: src/app/demo/components/notfound/notfound.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NotfoundRoutingModule } from './notfound-routing.module';
import { NotfoundComponent } from './notfound.component';
import { ButtonModule } from 'primeng/button';

@NgModule({
    imports: [
        CommonModule,
        NotfoundRoutingModule,
        ButtonModule
    ],
    declarations: [NotfoundComponent]
})
export class NotfoundModule { }

================
File: src/app/demo/components/pages/aboutus/aboutus-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { AboutUsComponent } from './aboutus.component';

@NgModule({
	imports: [RouterModule.forChild([
		{ path: '', component: AboutUsComponent }
	])],
	exports: [RouterModule]
})
export class AboutUsRoutingModule { }

================
File: src/app/demo/components/pages/aboutus/aboutus.component.html
================
<div class="card px-4 py-8 md:px-6 lg:px-8">
    <div class="flex flex-wrap mb-4">
        <div class="w-full lg:w-6 pl-0 lg:pr-4">
            <img src="assets/demo/images/blocks/about/about-1.png" alt="Image" class="w-full border-round">
        </div>
        <div class="w-full lg:w-6 pr-0 lg:pl-4 mt-3 lg:mt-0">
            <div class="font-bold text-4xl mb-4 text-900">About us</div>
            <p class="line-height-3 mt-0 mb-3 p-0">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
                Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. 
                Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. 
                Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
            </p>
            <p class="line-height-3 mt-0 mb-3 p-0">
                Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, 
                eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem 
                quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. 
                Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora 
                incidunt ut labore et dolore magnam aliquam quaerat voluptatem.
            </p>
            <p class="line-height-3 my-0 p-0">
                Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? 
                Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, 
                vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?
            </p>
        </div>
    </div>
    <div class="mt-3 md:mt-8">
        <span class="block text-900 font-bold text-3xl mb-3 text-center">Our Team</span>
        <div class="text-center text-lg line-height-3 mb-6">Faucibus ornare suspendisse sed nisi. Nisl rhoncus mattis rhoncus urna neque viverra justo nec.</div>
        <div class="grid">
            <div class="col-12 md:col-6 lg:col-3 p-3">
                <div class="relative overflow-hidden" (mouseenter)="visibleMember = 0" (mouseleave)="visibleMember = -1">
                    <img src="assets/demo/images/blocks/team/team-1.png" class="w-full block" />
                    <div class="absolute top-0 left-0 h-full w-full border-round fadein animation-duration-300 select-none" style="background-color: rgba(0,0,0,0.7)" *ngIf="visibleMember === 0" >
                        <div class="flex flex-column p-5 h-full">
                            <span class="block font-medium text-white text-xl mb-3">Jeff Davies</span>
                            <span class="font-medium text-400">Software Developer</span>
                            <div class="mt-auto">
                                <a tabindex="0" class="cursor-pointer text-white"><i class="pi pi-twitter text-600 text-xl mr-3"></i></a>
                                <a tabindex="0" class="cursor-pointer text-white"><i class="pi pi-github text-600 text-xl mr-3"></i></a>
                                <a tabindex="0" class="cursor-pointer text-white"><i class="pi pi-facebook text-600 text-xl"></i></a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-12 md:col-6 lg:col-3 p-3">
                <div class="relative overflow-hidden" (mouseenter)="visibleMember = 1" (mouseleave)="visibleMember = -1">
                    <img src="assets/demo/images/blocks/team/team-2.png" class="w-full block" />
                    <div class="absolute top-0 left-0 h-full w-full border-round fadein animation-duration-300 select-none" style="background-color: rgba(0,0,0,0.7)" *ngIf="visibleMember === 1" >
                        <div class="flex flex-column p-5 h-full">
                            <span class="block font-medium text-white text-xl mb-3">Kristin Watson</span>
                            <span class="font-medium text-400">UI/UX Designer</span>
                            <div class="mt-auto">
                                <a tabindex="0" class="cursor-pointer text-white"><i class="pi pi-twitter text-600 text-xl mr-3"></i></a>
                                <a tabindex="0" class="cursor-pointer text-white"><i class="pi pi-github text-600 text-xl mr-3"></i></a>
                                <a tabindex="0" class="cursor-pointer text-white"><i class="pi pi-facebook text-600 text-xl"></i></a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-12 md:col-6 lg:col-3 p-3">
                <div class="relative overflow-hidden" (mouseenter)="visibleMember = 2" (mouseleave)="visibleMember = -1">
                    <img src="assets/demo/images/blocks/team/team-3.png" class="w-full block" />
                    <div class="absolute top-0 left-0 h-full w-full border-round fadein animation-duration-300 select-none" style="background-color: rgba(0,0,0,0.7)" *ngIf="visibleMember === 2" >
                        <div class="flex flex-column p-5 h-full">
                            <span class="block font-medium text-white text-xl mb-3">Jenna Williams</span>
                            <span class="font-medium text-400">Marketing Specialist</span>
                            <div class="mt-auto">
                                <a tabindex="0" class="cursor-pointer text-white"><i class="pi pi-twitter text-600 text-xl mr-3"></i></a>
                                <a tabindex="0" class="cursor-pointer text-white"><i class="pi pi-github text-600 text-xl mr-3"></i></a>
                                <a tabindex="0" class="cursor-pointer text-white"><i class="pi pi-facebook text-600 text-xl"></i></a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-12 md:col-6 lg:col-3 p-3">
                <div class="relative overflow-hidden" (mouseenter)="visibleMember = 3" (mouseleave)="visibleMember = -1">
                    <img src="assets/demo/images/blocks/team/team-4.png" class="w-full block" />
                    <div class="absolute top-0 left-0 h-full w-full border-round fadein animation-duration-300 select-none" style="background-color: rgba(0,0,0,0.7)" *ngIf="visibleMember === 3" >
                        <div class="flex flex-column p-5 h-full">
                            <span class="block font-medium text-white text-xl mb-3">Joe Clifford</span>
                            <span class="font-medium text-400">Customer Relations</span>
                            <div class="mt-auto">
                                <a tabindex="0" class="cursor-pointer text-white"><i class="pi pi-twitter text-600 text-xl mr-3"></i></a>
                                <a tabindex="0" class="cursor-pointer text-white"><i class="pi pi-github text-600 text-xl mr-3"></i></a>
                                <a tabindex="0" class="cursor-pointer text-white"><i class="pi pi-facebook text-600 text-xl"></i></a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

================
File: src/app/demo/components/pages/aboutus/aboutus.component.ts
================
import { Component } from '@angular/core';

@Component({
    templateUrl: './aboutus.component.html'
})
export class AboutUsComponent {

    visibleMember: number = -1;
    
}

================
File: src/app/demo/components/pages/aboutus/aboutus.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { AboutUsRoutingModule } from './aboutus-routing.module';
import { AboutUsComponent } from './aboutus.component';

@NgModule({
	imports: [
		CommonModule,
		AboutUsRoutingModule
	],
	declarations: [AboutUsComponent]
})
export class AboutUsModule { }

================
File: src/app/demo/components/pages/contact/contact-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { ContactComponent } from './contact.component';

@NgModule({
	imports: [RouterModule.forChild([
		{ path: '', component: ContactComponent }
	])],
	exports: [RouterModule]
})
export class ContactRoutingModule { }

================
File: src/app/demo/components/pages/contact/contact.component.html
================
<div class="grid card grid-nogutter" style="column-gap: 2rem; row-gap: 2rem;">
    <div class="col-12">
        <p class="text-900 font-bold">Contact Us</p>
    </div>
    <div class="col-12 mt-3 h-20rem border-1 surface-border p-0 w-full bg-cover border-round" [ngStyle]="mapStyle">
        
    </div>
    <div class="col-12 mt-5">
        <div class="grid grid-nogutter px-2 flex-column md:flex-row" style="column-gap: 2rem; row-gap: 2rem;">
            <div *ngFor="let item of content" class="col flex flex-column justify-content-center text-center align-items-center border-1 surface-border py-5 px-4 border-round">
                <i class="pi pi-fw text-2xl text-primary" [class]="item.icon"></i>
                <span class="text-900 font-bold mt-4 mb-1">{{item.title}}</span>
                <span class="text-500">{{item.info}}</span>
            </div>
        </div>
    </div>

    <div class="col-12 mt-5">
        <p class="text-900 font-bold">Send Us Email</p>
        <div class="grid flex-column md:flex-row formgrid grid-nogutter mt-6" style="row-gap: 2rem; column-gap: 2rem;">
            <div class="field col">
                <label for="name" class="block text-indigo-300 font-bold">Name</label>
                <span class="p-input-icon-left w-full" style="height: 3.5rem;">
                    <i class="pi pi-user" style="left: 1.5rem;"></i>
                    <input type="text" pInputText placeholder="Name" class="w-full px-7 text-900 font-semibold" [(ngModel)]="name" style="height: 3.5rem"/>
                </span>
            </div>

            <div class="field col">
                <label for="email" class="block text-indigo-300 font-bold">Email Address</label>
                <span class="p-input-icon-left w-full" style="height: 3.5rem;">
                    <i class="pi pi-envelope" style="left: 1.5rem;"></i>
                    <input type="text" pInputText placeholder="Email" class="w-full px-7 text-900 font-semibold" [(ngModel)]="email" style="height: 3.5rem"/>
                </span>
            </div>

            <div class="field col-12 flex flex-column">
                <label for="message" class="block text-indigo-300 font-bold">Message</label>
                <textarea id="message" rows="5" pInputTextarea class="w-full surface-border p-4 text-900 font-semibold border-round" [autoResize]="true" [(ngModel)]="message"></textarea>
                <button pButton class="p-button-primary ml-auto mt-3 border-round" label="Send Message"></button>
            </div>
        </div>
    </div>
</div>

================
File: src/app/demo/components/pages/contact/contact.component.ts
================
import { Component } from '@angular/core';
import { LayoutService } from 'src/app/layout/service/app.layout.service';

@Component({
    templateUrl: './contact.component.html',
})
export class ContactComponent {
    options: any;

    overlays: any[] = [];

    dialogVisible: boolean = false;

    markerTitle: string = '';

    selectedPosition: any;

    infoWindow: any;

    draggable: boolean = false;

    name: string = '';

    email: string = '';

    message: string = '';

    content: any[] = [
        { icon: 'pi pi-fw pi-phone', title: 'Phone', info: '1 (833) 597-7538' },
        {
            icon: 'pi pi-fw pi-map-marker',
            title: 'Our Head Office',
            info: 'Churchill-laan 16 II, 1052 CD, Amsterdam',
        },
        { icon: 'pi pi-fw pi-print', title: 'Fax', info: '3 (833) 297-1548' },
    ];

    constructor(private layoutService: LayoutService) {}

    get mapStyle() {
        return {
            'background-image':
                this.layoutService.config().colorScheme === 'light'
                    ? "url('assets/demo/images/contact/map-light.svg')"
                    : "url('assets/demo/images/contact/map-dark.svg')",
        };
    }
}

================
File: src/app/demo/components/pages/contact/contact.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ContactComponent } from './contact.component';
import { ContactRoutingModule } from './contact-routing.module';
import { ButtonModule } from 'primeng/button';
import { InputTextModule } from 'primeng/inputtext';
import { InputTextareaModule } from 'primeng/inputtextarea';
@NgModule({
	imports: [
		CommonModule,
		FormsModule,
		ButtonModule,
		ContactRoutingModule,
		InputTextModule,
		InputTextareaModule
	],
	declarations: [ContactComponent]
})
export class ContactModule { }

================
File: src/app/demo/components/pages/crud/crud-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { CrudComponent } from './crud.component';

@NgModule({
	imports: [RouterModule.forChild([
		{ path: '', component: CrudComponent }
	])],
	exports: [RouterModule]
})
export class CrudRoutingModule { }

================
File: src/app/demo/components/pages/crud/crud.component.html
================
<div class="grid">
    <div class="col-12">
        <div class="card px-6 py-6">
            <p-toast></p-toast>
            <p-toolbar styleClass="mb-4">
                <ng-template pTemplate="left">
                    <div class="my-2">
                        <button pButton pRipple label="New" icon="pi pi-plus" class="p-button-success mr-2" (click)="openNew()"></button>
                        <button pButton pRipple label="Delete" icon="pi pi-trash" class="p-button-danger" (click)="deleteSelectedProducts()" [disabled]="!selectedProducts || !selectedProducts.length"></button>
                    </div>
                </ng-template>

                <ng-template pTemplate="right">
                    <p-fileUpload mode="basic" accept="image/*" [maxFileSize]="1000000" label="Import" chooseLabel="Import" class="mr-2 inline-block"></p-fileUpload>
                    <button pButton pRipple label="Export" icon="pi pi-upload" class="p-button-help" (click)="dt.exportCSV()"></button>
                </ng-template>
            </p-toolbar>

            <p-table #dt [value]="products" [columns]="cols" responsiveLayout="scroll" [rows]="10" [globalFilterFields]="['name','country.name','representative.name','status']" [rows]="10" [paginator]="true" [rowsPerPageOptions]="[10,20,30]" [showCurrentPageReport]="true" currentPageReportTemplate="Showing {first} to {last} of {totalRecords} entries" [(selection)]="selectedProducts" selectionMode="multiple" [rowHover]="true" dataKey="id">
                <ng-template pTemplate="caption">
                    <div class="flex flex-column md:flex-row md:justify-content-between md:align-items-center">
                        <h5 class="m-0">Manage Products</h5>
                        <span class="block mt-2 md:mt-0 p-input-icon-left">
                            <i class="pi pi-search"></i>
                            <input pInputText type="text" (input)="onGlobalFilter(dt, $event)" placeholder="Search..."  class="w-full sm:w-auto"/>
                        </span>
                    </div>
                </ng-template>
                <ng-template pTemplate="header">
                    <tr>
                        <th style="width: 3rem">
                            <p-tableHeaderCheckbox></p-tableHeaderCheckbox>
                        </th>
                        <th pSortableColumn="code">Code <p-sortIcon field="code"></p-sortIcon></th>
                        <th pSortableColumn="name">Name <p-sortIcon field="name"></p-sortIcon></th>
                        <th>Image</th>
                        <th pSortableColumn="price">Price <p-sortIcon field="price"></p-sortIcon></th>
                        <th pSortableColumn="category">Category <p-sortIcon field="category"></p-sortIcon></th>
                        <th pSortableColumn="rating">Reviews <p-sortIcon field="rating"></p-sortIcon></th>
                        <th pSortableColumn="inventoryStatus">Status <p-sortIcon field="inventoryStatus"></p-sortIcon></th>
                        <th></th>
                    </tr>
                </ng-template>
                <ng-template pTemplate="body" let-product>
                    <tr>
                        <td>
                            <p-tableCheckbox [value]="product"></p-tableCheckbox>
                        </td>
                        <td style="width:14%; min-width:10rem;"><span class="p-column-title">Code</span>
                            {{product.code || product.id}}
                        </td>
                        <td style="width:14%; min-width:10rem;">
                            <span class="p-column-title">Name</span>
                            {{product.name}}
                        </td>
                        <td style="width:14%; min-width:10rem;"><span class="p-column-title">Image</span>
                            <img [src]="'assets/demo/images/product/' + product.image" [alt]="product.name" width="100" class="shadow-4" />
                        </td>
                        <td style="width:14%; min-width:8rem;">
                            <span class="p-column-title">Price</span>
                            {{product.price | currency:'USD'}}
                        </td>
                        <td style="width:14%; min-width:10rem;">
                            <span class="p-column-title">Category</span>
                            {{product.category}}
                        </td>
                        <td style="width:14%; min-width: 10rem;"><span class="p-column-title">Reviews</span>
                            <p-rating [ngModel]="product.rating" [readonly]="true" [cancel]="false"></p-rating>
                        </td>
                        <td style="width:14%; min-width: 10rem;"><span class="p-column-title">Status</span>
                            <span [class]="'product-badge status-' + (product.inventoryStatus ? product.inventoryStatus.toLowerCase() : '')">{{product.inventoryStatus}}</span>
                        </td>
                        <td>
                            <div class="flex">
                                <button pButton pRipple icon="pi pi-pencil" class="p-button-rounded p-button-success mr-2" (click)="editProduct(product)"></button>
                                <button pButton pRipple icon="pi pi-trash" class="p-button-rounded p-button-warning" (click)="deleteProduct(product)"></button>
                            </div>
                        </td>
                    </tr>
                </ng-template>
            </p-table>
        </div>

        <p-dialog [(visible)]="productDialog" [style]="{width: '450px'}" header="Product Details" [modal]="true" class="p-fluid">
            <ng-template pTemplate="content">
                <img [src]="'assets/demo/images/product/' + product.image" [alt]="product.image" width="150" class="mt-0 mx-auto mb-5 block shadow-2" *ngIf="product.image">
                <div class="field">
                    <label for="name">Name</label>
                    <input type="text" pInputText id="name" [(ngModel)]="product.name" required autofocus [ngClass]="{'ng-invalid ng-dirty' : submitted && !product.name}"/>
                    <small class="ng-dirty ng-invalid" *ngIf="submitted && !product.name">Name is required.</small>
                </div>
                <div class="field">
                    <label for="description">Description</label>
                    <textarea id="description" pInputTextarea [(ngModel)]="product.description" required rows="3" cols="20"></textarea>
                </div>

                <div class="field">
                    <label for="status">Inventory Status</label>
                    <p-dropdown [(ngModel)]="product.inventoryStatus" inputId="inventoryStatus" optionValue="label" [options]="statuses" placeholder="Select">
                        <ng-template pTemplate="selectedItem">
                            <span *ngIf="product && product.inventoryStatus" [class]="'product-badge status-' + product.inventoryStatus.toString().toLowerCase()">{{product.inventoryStatus}}</span>
                        </ng-template>
                        <ng-template let-option pTemplate="item">
                            <span [class]="'product-badge status-' + option.value">{{option.label}}</span>
                        </ng-template>
                    </p-dropdown>
                </div>

                <div class="field">
                    <label class="mb-3">Category</label>
                    <div class="formgrid grid">
                        <div class="field-radiobutton col-6">
                            <p-radioButton id="category1" name="category" value="Accessories" [(ngModel)]="product.category"></p-radioButton>
                            <label for="category1">Accessories</label>
                        </div>
                        <div class="field-radiobutton col-6">
                            <p-radioButton id="category2" name="category" value="Clothing" [(ngModel)]="product.category"></p-radioButton>
                            <label for="category2">Clothing</label>
                        </div>
                        <div class="field-radiobutton col-6">
                            <p-radioButton id="category3" name="category" value="Electronics" [(ngModel)]="product.category"></p-radioButton>
                            <label for="category3">Electronics</label>
                        </div>
                        <div class="field-radiobutton col-6">
                            <p-radioButton id="category4" name="category" value="Fitness" [(ngModel)]="product.category"></p-radioButton>
                            <label for="category4">Fitness</label>
                        </div>
                    </div>
                </div>

                <div class="formgrid grid">
                    <div class="field col">
                        <label for="price">Price</label>
                        <p-inputNumber id="price" [(ngModel)]="product.price" mode="currency" currency="USD" locale="en-US"></p-inputNumber>
                    </div>
                    <div class="field col">
                        <label for="quantity">Quantity</label>
                        <p-inputNumber id="quantity" [(ngModel)]="product.quantity"></p-inputNumber>
                    </div>
                </div>
            </ng-template>

            <ng-template pTemplate="footer">
                <button pButton pRipple label="Cancel" icon="pi pi-times" class="p-button-text" (click)="hideDialog()"></button>
                <button pButton pRipple label="Save" icon="pi pi-check" class="p-button-text" (click)="saveProduct()"></button>
            </ng-template>
        </p-dialog>

        <p-dialog [(visible)]="deleteProductDialog" header="Confirm" [modal]="true" [style]="{width:'450px'}">
            <div class="flex align-items-center justify-content-center">
                <i class="pi pi-exclamation-triangle mr-3" style="font-size: 2rem"></i>
                <span *ngIf="product">Are you sure you want to delete <b>{{product.name}}</b>?</span>
            </div>
            <ng-template pTemplate="footer">
                <button pButton pRipple icon="pi pi-times" class="p-button-text" label="No" (click)="deleteProductDialog = false"></button>
                <button pButton pRipple icon="pi pi-check" class="p-button-text" label="Yes" (click)="confirmDelete()"></button>
            </ng-template>
        </p-dialog>

        <p-dialog [(visible)]="deleteProductsDialog" header="Confirm" [modal]="true" [style]="{width:'450px'}">
            <div class="flex align-items-center justify-content-center">
                <i class="pi pi-exclamation-triangle mr-3" style="font-size: 2rem"></i>
                <span>Are you sure you want to delete selected products?</span>
            </div>
            <ng-template pTemplate="footer">
                <button pButton pRipple icon="pi pi-times" class="p-button-text" label="No" (click)="deleteProductsDialog = false"></button>
                <button pButton pRipple icon="pi pi-check" class="p-button-text" label="Yes" (click)="confirmDeleteSelected()"></button>
            </ng-template>
        </p-dialog>
    </div>
</div>

================
File: src/app/demo/components/pages/crud/crud.component.ts
================
import { Component, OnInit } from '@angular/core';
import { Product } from 'src/app/demo/api/product';
import { ProductService } from 'src/app/demo/service/product.service';
import { ConfirmationService, MessageService } from 'primeng/api';
import { Table } from 'primeng/table';

@Component({
    templateUrl: './crud.component.html',
    providers: [MessageService, ConfirmationService]
})
export class CrudComponent implements OnInit {

    productDialog: boolean = false;

    deleteProductDialog: boolean = false;

    deleteProductsDialog: boolean = false;

    products: Product[] = [];

    product: Product = {};

    selectedProducts: Product[] = [];

    submitted: boolean = false;

    cols: any[] = [];

    statuses: any[] = [];

    rowsPerPageOptions = [5, 10, 20];

    constructor(private productService: ProductService, private messageService: MessageService, private confirmationService: ConfirmationService) { }

    ngOnInit() {
        this.productService.getProducts().then(data => this.products = data);

        this.cols = [
            { field: 'product', header: 'Product' },
            { field: 'price', header: 'Price' },
            { field: 'category', header: 'Category' },
            { field: 'rating', header: 'Reviews' },
            { field: 'inventoryStatus', header: 'Status' }
        ];

        this.statuses = [
            { label: 'INSTOCK', value: 'instock' },
            { label: 'LOWSTOCK', value: 'lowstock' },
            { label: 'OUTOFSTOCK', value: 'outofstock' }
        ];
    }

    openNew() {
        this.product = {};
        this.submitted = false;
        this.productDialog = true;
    }

    deleteSelectedProducts() {
        this.deleteProductsDialog = true;
    }

    editProduct(product: Product) {
        this.product = { ...product };
        this.productDialog = true;
    }

    deleteProduct(product: Product) {
        this.deleteProductDialog = true;
        this.product = { ...product };
    }

    confirmDeleteSelected() {
        this.deleteProductsDialog = false;
        this.products = this.products.filter(val => !this.selectedProducts.includes(val));
        this.messageService.add({ severity: 'success', summary: 'Successful', detail: 'Products Deleted', life: 3000 });
        this.selectedProducts = [];
    }

    confirmDelete() {
        this.deleteProductDialog = false;
        this.products = this.products.filter(val => val.id !== this.product.id);
        this.messageService.add({ severity: 'success', summary: 'Successful', detail: 'Product Deleted', life: 3000 });
        this.product = {};
    }

    hideDialog() {
        this.productDialog = false;
        this.submitted = false;
    }

    saveProduct() {
        this.submitted = true;

        if (this.product.name?.trim()) {
            if (this.product.id) {
                // @ts-ignore
                this.product.inventoryStatus = this.product.inventoryStatus.value ? this.product.inventoryStatus.value : this.product.inventoryStatus;
                this.products[this.findIndexById(this.product.id)] = this.product;
                this.messageService.add({ severity: 'success', summary: 'Successful', detail: 'Product Updated', life: 3000 });
            } else {
                this.product.id = this.createId();
                this.product.code = this.createId();
                this.product.image = 'product-placeholder.svg';
                // @ts-ignore
                this.product.inventoryStatus = this.product.inventoryStatus ? this.product.inventoryStatus.value : 'INSTOCK';
                this.products.push(this.product);
                this.messageService.add({ severity: 'success', summary: 'Successful', detail: 'Product Created', life: 3000 });
            }

            this.products = [...this.products];
            this.productDialog = false;
            this.product = {};
        }
    }

    findIndexById(id: string): number {
        let index = -1;
        for (let i = 0; i < this.products.length; i++) {
            if (this.products[i].id === id) {
                index = i;
                break;
            }
        }

        return index;
    }

    createId(): string {
        let id = '';
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        for (let i = 0; i < 5; i++) {
            id += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return id;
    }

    onGlobalFilter(table: Table, event: Event) {
        table.filterGlobal((event.target as HTMLInputElement).value, 'contains');
    }
}

================
File: src/app/demo/components/pages/crud/crud.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { CrudRoutingModule } from './crud-routing.module';
import { CrudComponent } from './crud.component';
import { TableModule } from 'primeng/table';
import { FileUploadModule } from 'primeng/fileupload';
import { ButtonModule } from 'primeng/button';
import { RippleModule } from 'primeng/ripple';
import { ToastModule } from 'primeng/toast';
import { ToolbarModule } from 'primeng/toolbar';
import { RatingModule } from 'primeng/rating';
import { InputTextModule } from 'primeng/inputtext';
import { InputTextareaModule } from 'primeng/inputtextarea';
import { DropdownModule } from 'primeng/dropdown';
import { RadioButtonModule } from 'primeng/radiobutton';
import { InputNumberModule } from 'primeng/inputnumber';
import { DialogModule } from 'primeng/dialog';

@NgModule({
	imports: [
		CommonModule,
		CrudRoutingModule,
		TableModule,
		FileUploadModule,
		FormsModule,
		ButtonModule,
		RippleModule,
		ToastModule,
		ToolbarModule,
		RatingModule,
		InputTextModule,
		InputTextareaModule,
		DropdownModule,
		RadioButtonModule,
		InputNumberModule,
		DialogModule
	],
	declarations: [CrudComponent]
})
export class CrudModule { }

================
File: src/app/demo/components/pages/empty/emptydemo-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { EmptyDemoComponent } from './emptydemo.component';

@NgModule({
	imports: [RouterModule.forChild([
		{ path: '', component: EmptyDemoComponent }
	])],
	exports: [RouterModule]
})
export class EmptyDemoRoutingModule { }

================
File: src/app/demo/components/pages/empty/emptydemo.component.html
================
<div class="grid">
    <div class="col-12">
        <div class="card">
            <h4>Empty Page</h4>
            <p>This is your empty page template to start building beautiful applications.</p>
        </div>
    </div>
</div>

================
File: src/app/demo/components/pages/empty/emptydemo.component.ts
================
import { Component } from '@angular/core';

@Component({
    templateUrl: './emptydemo.component.html'
})
export class EmptyDemoComponent { }

================
File: src/app/demo/components/pages/empty/emptydemo.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { EmptyDemoRoutingModule } from './emptydemo-routing.module';
import { EmptyDemoComponent } from './emptydemo.component';

@NgModule({
	imports: [
		CommonModule,
		EmptyDemoRoutingModule
	],
	declarations: [EmptyDemoComponent]
})
export class EmptyDemoModule { }

================
File: src/app/demo/components/pages/faq/faq-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { FaqComponent } from './faq.component';

@NgModule({
    imports: [RouterModule.forChild([
        { path: '', component: FaqComponent }
    ])],
    exports: [RouterModule]
})
export class FaqRoutingModule { }

================
File: src/app/demo/components/pages/faq/faq.component.html
================
<div>
    <div class="card">
        <div class="text-900 font-bold text-xl mb-3">Frequently Asked Questions</div>
        <p class="text-600 line-height-3">Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit.</p>
    </div>

    <div class="flex flex-column md:flex-row gap-5">
        <div class="card mb-0 md:w-20rem">
            <div class="text-900 block font-bold mb-3">Categories</div>
            <ul class="list-none m-0 p-0">
                <li pRipple *ngFor="let item of items; let i = index" (click)="changeItem(i)" class="mb-2 ">
                    <a class="flex align-items-center cursor-pointer select-none p-3 transition-colors transition-duration-150 border-round" [ngClass]="{'bg-primary': (activeIndex === i), 'hover:surface-hover': (activeIndex !== i)}">
                        <i [class]="item.icon" class="mr-2 text-lg"></i>
                        <span>{{item.label}}</span>
                    </a>
                </li>
            </ul>
        </div>
        <div class="card flex-1">
            <p-accordion>
                <p-accordionTab *ngFor="let question of items[activeIndex].questions" [header]="question">
                    <p class="line-height-3 m-0 p-0">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. 
                        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
                </p-accordionTab>
            </p-accordion>
        </div>
    </div>
</div>

================
File: src/app/demo/components/pages/faq/faq.component.ts
================
import { Component, OnInit } from '@angular/core';

@Component({
    templateUrl: './faq.component.html'
})
export class FaqComponent implements OnInit {

    items: any[] = [];

    activeIndex: number = 0;

    constructor() { }

    ngOnInit(): void {
        this.items = [{ 
                label: 'General', icon: 'pi pi-fw pi-info-circle', questions: [
                    'Is there a trial period?', 'Do I need to sign up with credit card?', 'Is the subscription monthly or annual?', 'How many tiers are there?'
                ] 
            },
            { 
                label: 'Mailing', icon: 'pi pi-fw pi-envelope', questions: [
                    'How do I setup my account?', 'Is there a limit on mails to send?', 'What is my inbox size?', 'How can I add attachements?'
                ] 
            },
            { 
                label: 'Support', icon: 'pi pi-fw pi-question-circle', questions: [
                    'How can I get support?', 'What is the response time?', 'Is there a community forum?', 'Is live chat available?'
                ] 
            },
            { 
                label: 'Billing', icon: 'pi pi-fw pi-credit-card', questions: [
                    'Will I receive an invoice?', 'How to provide my billing information?', 'Is VAT included?', 'Can I receive PDF invoices?'
                ] 
            }
        ];
    };

    changeItem(i: number) {
        this.activeIndex = i;
    }
}

================
File: src/app/demo/components/pages/faq/faq.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FaqComponent } from './faq.component';
import { FaqRoutingModule } from './faq-routing.module';
import { AccordionModule } from 'primeng/accordion';
import { RippleModule } from 'primeng/ripple';

@NgModule({
    imports: [
        CommonModule,
        FaqRoutingModule,
        AccordionModule,
        RippleModule
    ],
    declarations: [FaqComponent]
})
export class FaqModule { }

================
File: src/app/demo/components/pages/help/help-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { HelpComponent } from './help.component';

@NgModule({
	imports: [RouterModule.forChild([
		{ path: '', component: HelpComponent }
	])],
	exports: [RouterModule]
})
export class HelpRoutingModule { }

================
File: src/app/demo/components/pages/help/help.component.html
================
<div>
    <div class="card">
        <div class="relative overflow-hidden h-20rem bg-primary flex flex-column align-items-center justify-content-center border-round mb-8">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 320" class="absolute w-full top-0 left-0">
                <path fill="var(--primary-600)" fill-opacity="1" d="M0,64L48,90.7C96,117,192,171,288,208C384,245,480,267,576,256C672,245,768,203,864,165.3C960,128,1056,96,1152,74.7C1248,53,1344,43,1392,37.3L1440,32L1440,0L1392,0C1344,0,1248,0,1152,0C1056,0,960,0,864,0C768,0,672,0,576,0C480,0,384,0,288,0C192,0,96,0,48,0L0,0Z"></path>
            </svg>
            <div class="font-bold mb-5 text-4xl z-1">How can we help?</div>
            <span class="p-input-icon-left w-9 md:w-6">
                <i class="pi pi-search"></i>
                <input type="text" pInputText placeholder="Search" style="border-radius:2rem" class="w-full "/>
            </span>
        </div>

        <div class="grid mb-5">
            <div class="col-12 md:col-4 mb-5">
                <div class="flex flex-column align-items-center">
                    <span class="inline-flex align-items-center justify-content-center border-circle w-5rem h-5rem bg-primary-100 mb-5">
                        <i class="pi pi-power-off text-4xl text-primary-700"></i>
                    </span>
                    <div class="text-2xl mb-3 font-medium">Getting Started</div>
                    <ul class="list-none m-0 p-0 text-center">
                        <li class="line-height-3 mb-1"><a class="text-color-secondary hover:text-primary cursor-pointer">Lorem ipsum dolor</a></li>
                        <li class="line-height-3 mb-1"><a class="text-color-secondary hover:text-primary cursor-pointer">Consectetur adipiscing elit</a></li>
                        <li class="line-height-3 mb-3"><a class="text-color-secondary hover:text-primary cursor-pointer">Sed do eiusmod tempor</a></li>
                        <li><a class="text-primary hover:underline cursor-pointer font-medium">View all</a></li>
                    </ul>
                </div>
            </div>
            <div class="col-12 md:col-4 mb-5">
                <div class="flex flex-column align-items-center">
                    <span class="inline-flex align-items-center justify-content-center border-circle w-5rem h-5rem bg-primary-100 mb-5">
                        <i class="pi pi-arrows-h text-4xl text-primary-700"></i>
                    </span>
                    <div class="text-2xl mb-3 font-medium">Transactions</div>
                    <ul class="list-none m-0 p-0 text-center">
                        <li class="line-height-3 mb-1"><a class="text-color-secondary hover:text-primary cursor-pointer">Lorem ipsum dolor</a></li>
                        <li class="line-height-3 mb-1"><a class="text-color-secondary hover:text-primary cursor-pointer">Consectetur adipiscing elit</a></li>
                        <li class="line-height-3 mb-3"><a class="text-color-secondary hover:text-primary cursor-pointer">Sed do eiusmod tempor</a></li>
                        <li><a class="text-primary hover:underline cursor-pointer font-medium">View all</a></li>
                    </ul>
                </div>
            </div>
            <div class="col-12 md:col-4 mb-5">
                <div class="flex flex-column align-items-center">
                    <span class="inline-flex align-items-center justify-content-center border-circle w-5rem h-5rem bg-primary-100 mb-5">
                        <i class="pi pi-user text-4xl text-primary-700"></i>
                    </span>
                    <div class="text-2xl mb-3 font-medium">Profile</div>
                    <ul class="list-none m-0 p-0 text-center">
                        <li class="line-height-3 mb-1"><a class="text-color-secondary hover:text-primary cursor-pointer">Lorem ipsum dolor</a></li>
                        <li class="line-height-3 mb-1"><a class="text-color-secondary hover:text-primary cursor-pointer">Consectetur adipiscing elit</a></li>
                        <li class="line-height-3 mb-3"><a class="text-color-secondary hover:text-primary cursor-pointer">Sed do eiusmod tempor</a></li>
                        <li><a class="text-primary hover:underline cursor-pointer font-medium">View all</a></li>
                    </ul>
                </div>
            </div>
            <div class="col-12 md:col-4 mb-5">
                <div class="flex flex-column align-items-center">
                    <span class="inline-flex align-items-center justify-content-center border-circle w-5rem h-5rem bg-primary-100 mb-5">
                        <i class="pi pi-money-bill text-4xl text-primary-700"></i>
                    </span>
                    <div class="text-2xl mb-3 font-medium">Billing</div>
                    <ul class="list-none m-0 p-0 text-center">
                        <li class="line-height-3 mb-1"><a class="text-color-secondary hover:text-primary cursor-pointer">Lorem ipsum dolor</a></li>
                        <li class="line-height-3 mb-1"><a class="text-color-secondary hover:text-primary cursor-pointer">Consectetur adipiscing elit</a></li>
                        <li class="line-height-3 mb-3"><a class="text-color-secondary hover:text-primary cursor-pointer">Sed do eiusmod tempor</a></li>
                        <li><a class="text-primary hover:underline cursor-pointer font-medium">View all</a></li>
                    </ul>
                </div>
            </div>
            <div class="col-12 md:col-4 mb-5">
                <div class="flex flex-column align-items-center">
                    <span class="inline-flex align-items-center justify-content-center border-circle w-5rem h-5rem bg-primary-100 mb-5">
                        <i class="pi pi-database text-4xl text-primary-700"></i>
                    </span>
                    <div class="text-2xl mb-3 font-medium">Integrations</div>
                    <ul class="list-none m-0 p-0 text-center">
                        <li class="line-height-3 mb-1"><a class="text-color-secondary hover:text-primary cursor-pointer">Lorem ipsum dolor</a></li>
                        <li class="line-height-3 mb-1"><a class="text-color-secondary hover:text-primary cursor-pointer">Consectetur adipiscing elit</a></li>
                        <li class="line-height-3 mb-3"><a class="text-color-secondary hover:text-primary cursor-pointer">Sed do eiusmod tempor</a></li>
                        <li><a class="text-primary hover:underline cursor-pointer font-medium">View all</a></li>
                    </ul>
                </div>
            </div>
            <div class="col-12 md:col-4 mb-5">
                <div class="flex flex-column align-items-center">
                    <span class="inline-flex align-items-center justify-content-center border-circle w-5rem h-5rem bg-primary-100 mb-5">
                        <i class="pi pi-lock text-4xl text-primary-700"></i>
                    </span>
                    <div class="text-2xl mb-3 font-medium">Security</div>
                    <ul class="list-none m-0 p-0 text-center">
                        <li class="line-height-3 mb-1"><a class="text-color-secondary hover:text-primary cursor-pointer">Lorem ipsum dolor</a></li>
                        <li class="line-height-3 mb-1"><a class="text-color-secondary hover:text-primary cursor-pointer">Consectetur adipiscing elit</a></li>
                        <li class="line-height-3 mb-3"><a class="text-color-secondary hover:text-primary cursor-pointer">Sed do eiusmod tempor</a></li>
                        <li><a class="text-primary hover:underline cursor-pointer font-medium">View all</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

================
File: src/app/demo/components/pages/help/help.component.ts
================
import { Component } from '@angular/core';

@Component({
    templateUrl: './help.component.html',
})
export class HelpComponent { }

================
File: src/app/demo/components/pages/help/help.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HelpRoutingModule } from './help-routing.module';
import { HelpComponent } from './help.component';
import { InputTextModule } from 'primeng/inputtext';

@NgModule({
	imports: [
		CommonModule,
		HelpRoutingModule,
		InputTextModule
	],
	declarations: [HelpComponent]
})
export class HelpModule { }

================
File: src/app/demo/components/pages/invoice/invoice-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { InvoiceComponent } from './invoice.component';

@NgModule({
	imports: [RouterModule.forChild([
		{ path: '', component: InvoiceComponent }
	])],
	exports: [RouterModule]
})
export class InvoiceRoutingModule { }

================
File: src/app/demo/components/pages/invoice/invoice.component.html
================
<div class="card py-8 px-6 md:px-8 overflow-auto">
	<div class="flex flex-column align-items-start md:flex-row md:align-items-center md:justify-content-between border-bottom-1 surface-border pb-5 min-w-max">
		<div class="flex flex-column">
			<svg width="48" height="50" viewBox="0 0 48 50" fill="none" xmlns="http://www.w3.org/2000/svg">
				<path fill-rule="evenodd" clip-rule="evenodd" d="M33.1548 9.65956L23.9913 4.86169L5.54723 14.5106L0.924465 12.0851L23.9913 0L37.801 7.23403L33.1548 9.65956ZM23.9931 19.3085L42.4255 9.65955L47.0717 12.0851L23.9931 24.1595L10.1952 16.9361L14.8297 14.5106L23.9931 19.3085ZM4.6345 25.8937L0 23.4681V37.9149L23.0669 50V45.1489L4.6345 35.4894V25.8937ZM18.4324 28.2658L0 18.6169V13.7658L23.0669 25.8403V40.2977L18.4324 37.8615V28.2658ZM38.7301 23.468V18.6169L24.9205 25.8403V49.9999L29.555 47.5743V28.2659L38.7301 23.468ZM43.3546 35.4892V16.1914L48.0008 13.7659V37.9148L34.1912 45.1488V40.2977L43.3546 35.4892Z" fill="var(--primary-color)"/>
			</svg>
			<div class="my-3 text-4xl font-bold text-900">YOUR COMPANY</div>
			<span class="mb-2">9137 3rd Lane California City</span>
			<span>CA 93504, U.S.A.</span>
		</div>
		<div class="flex flex-column mt-5 md:mt-0">
			<div class="text-2xl font-semibold text-left md:text-right mb-3">INVOICE</div>
			<div class="flex flex-column">
				<div class="flex justify-content-between align-items-center mb-2">
					<span class="font-semibold mr-6">DATE</span>
					<span>30/08/2019</span>
				</div>
				<div class="flex justify-content-between align-items-center mb-2">
					<span class="font-semibold mr-6">INVOICE #</span>
					<span>8523</span>
				</div>
				<div class="flex justify-content-between align-items-center">
					<span class="font-semibold mr-6">CUSTOMER ID</span>
					<span>C1613</span>
				</div>
			</div>
		</div>	
	</div>

	<div class="mt-5 mb-8 flex flex-column">
		<div class="mb-3 text-2xl font-medium">BILL TO</div>
		<span class="mb-2">Claire Williams, 148 Hope Lane</span>
		<span>Palo Alto, CA 94304.</span>
	</div>

	<div class="overflow-x-auto">
		<table class="w-full" style="border-collapse: collapse; table-layout: auto">
			<thead>
				<tr>
					<th class="text-left font-semibold py-3 border-bottom-1 surface-border white-space-nowrap">Description</th>
					<th class="text-right font-semibold py-3 border-bottom-1 surface-border white-space-nowrap px-3">Quantity</th>
					<th class="text-right font-semibold py-3 border-bottom-1 surface-border white-space-nowrap px-3">Unit Price</th>
					<th class="text-right font-semibold py-3 border-bottom-1 surface-border white-space-nowrap">Line Total</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td class="text-left py-3 border-bottom-1 surface-border white-space-nowrap">Green T-Shirt</td>
					<td class="text-right py-3 border-bottom-1 surface-border px-3">1</td>
					<td class="text-right py-3 border-bottom-1 surface-border px-3">$49.00</td>
					<td class="text-right py-3 border-bottom-1 surface-border">$49.00</td>
				</tr>
				<tr>
					<td class="text-left py-3 border-bottom-1 surface-border white-space-nowrap">Game Controller</td>
					<td class="text-right py-3 border-bottom-1 surface-border px-3">2</td>
					<td class="text-right py-3 border-bottom-1 surface-border px-3">$99.00</td>
					<td class="text-right py-3 border-bottom-1 surface-border">$198.00</td>
				</tr>
				<tr>
					<td class="text-left py-3 border-bottom-1 surface-border white-space-nowrap">Mini Speakers</td>
					<td class="text-right py-3 border-bottom-1 surface-border px-3">1</td>
					<td class="text-right py-3 border-bottom-1 surface-border px-3">$85.00</td>
					<td class="text-right py-3 border-bottom-1 surface-border">$85.00</td>
				</tr>
			</tbody>
		</table>
	</div>

	<div class="flex flex-column md:flex-row md:align-items-start md:justify-content-between mt-8">
		<div class="font-semibold mb-3 md:mb-0">NOTES</div>
		<div class="flex flex-column">
			<div class="flex justify-content-between align-items-center mb-2">
				<span class="font-semibold mr-6">SUBTOTAL</span>
				<span>$332.00</span>
			</div>
			<div class="flex justify-content-between align-items-center mb-2">
				<span class="font-semibold mr-6">VAT #</span>
				<span>0</span>
			</div>
			<div class="flex justify-content-between align-items-center">
				<span class="font-semibold mr-6">TOTAL</span>
				<span>$332.00</span>
			</div>
		</div>
	</div>
</div>

================
File: src/app/demo/components/pages/invoice/invoice.component.ts
================
import { Component } from '@angular/core';

@Component({
    templateUrl: './invoice.component.html'
})
export class InvoiceComponent { }

================
File: src/app/demo/components/pages/invoice/invoice.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { InvoiceRoutingModule } from './invoice-routing.module';
import { ButtonModule } from 'primeng/button';
import { TableModule } from 'primeng/table';
import { InvoiceComponent } from './invoice.component';

@NgModule({
	imports: [
		CommonModule,
		InvoiceRoutingModule,
		ButtonModule,
		TableModule
	],
	declarations: [InvoiceComponent]
})
export class InvoiceModule { }

================
File: src/app/demo/components/pages/pages-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';

@NgModule({
    imports: [RouterModule.forChild([
        { path: 'aboutus', data: { breadcrumb: 'About' }, loadChildren: () => import('./aboutus/aboutus.module').then(m => m.AboutUsModule) },
        { path: 'contact', data: { breadcrumb: 'Contact' }, loadChildren: () => import('./contact/contact.module').then(m => m.ContactModule) },
        { path: 'crud', data: { breadcrumb: 'Crud' }, loadChildren: () => import('./crud/crud.module').then(m => m.CrudModule) },
        { path: 'empty', data: { breadcrumb: 'Empty' }, loadChildren: () => import('./empty/emptydemo.module').then(m => m.EmptyDemoModule) },
        { path: 'faq', data: { breadcrumb: 'FAQ' }, loadChildren: () => import('./faq/faq.module').then(m => m.FaqModule) },
        { path: 'help', data: { breadcrumb: 'Help' }, loadChildren: () => import('./help/help.module').then(m => m.HelpModule) },
        { path: 'invoice', data: { breadcrumb: 'Invoice' }, loadChildren: () => import('./invoice/invoice.module').then(m => m.InvoiceModule) },
        { path: 'timeline', data: { breadcrumb: 'Timeline' }, loadChildren: () => import('./timeline/timelinedemo.module').then(m => m.TimelineDemoModule) },
        { path: '**', redirectTo: '/notfound' }
    ])],
    exports: [RouterModule]
})
export class PagesRoutingModule { }

================
File: src/app/demo/components/pages/pages.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { PagesRoutingModule } from './pages-routing.module';

@NgModule({
    declarations: [],
    imports: [
        CommonModule,
        PagesRoutingModule
    ]
})
export class PagesModule { }

================
File: src/app/demo/components/pages/timeline/timelinedemo-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { TimelineDemoComponent } from './timelinedemo.component';

@NgModule({
    imports: [RouterModule.forChild([
        { path: '', component: TimelineDemoComponent }
    ])],
    exports: [RouterModule]
})
export class TimelineDemoRoutingModule { }

================
File: src/app/demo/components/pages/timeline/timelinedemo.component.html
================
<div class="grid">
    <div class="col-12 md:col-6">
        <div class="card">
            <h5>Left Align</h5>
            <p-timeline [value]="events1">
                <ng-template pTemplate="content" let-event>
                    {{event.status}}
                </ng-template>
            </p-timeline>
        </div>
    </div>
    <div class="col-12 md:col-6">
        <div class="card">
            <h5>Right Align</h5>
            <p-timeline [value]="events1" align="right">
                <ng-template pTemplate="content" let-event>
                    {{event.status}}
                </ng-template>
            </p-timeline>
        </div>
    </div>
    <div class="col-12 md:col-6">
        <div class="card">
            <h5>Alternate Align</h5>
            <p-timeline [value]="events1" align="alternate">
                <ng-template pTemplate="content" let-event>
                    {{event.status}}
                </ng-template>
            </p-timeline>
        </div>
    </div>
    <div class="col-12 md:col-6">
        <div class="card">
            <h5>Opposite Content</h5>
            <p-timeline [value]="events1">
                <ng-template pTemplate="content" let-event>
                    <small class="p-text-secondary">{{event.date}}</small>
                </ng-template>
                <ng-template pTemplate="opposite" let-event>
                    {{event.status}}
                </ng-template>
            </p-timeline>
        </div>
    </div>
</div>

<div class="card">
    <h5>Customized</h5>
    <p-timeline [value]="events1" align="alternate" styleClass="customized-timeline">
        <ng-template pTemplate="marker" let-event>
        <span class="flex z-1 w-2rem h-2rem align-items-center justify-content-center text-white border-circle shadow-2" [style.backgroundColor]="event.color">
            <i [ngClass]="event.icon"></i>
        </span>
        </ng-template>
        <ng-template pTemplate="content" let-event>
            <p-card [header]="event.status" [subheader]="event.date">
                <img *ngIf="event.image" [src]="'assets/demo/images/product/' + event.image" [alt]="event.name" width="200" class="shadow-2" />
                <p class="line-height-3 my-3">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam deserunt
                    quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate neque quas!</p>
                <button pButton label="Read more" class="p-button-outlined mb-5"></button>
            </p-card>
        </ng-template>
    </p-timeline>
</div>

<div class="card">
    <h5>Horizontal</h5>
    <h6>Top Align</h6>
    <p-timeline [value]="events2" layout="horizontal" align="top">
        <ng-template pTemplate="content" let-event>
            {{event}}
        </ng-template>
    </p-timeline>

    <h6>Bottom Align</h6>
    <p-timeline [value]="events2" layout="horizontal" align="bottom">
        <ng-template pTemplate="content" let-event>
            {{event}}
        </ng-template>
    </p-timeline>

    <h6>Alternate Align</h6>
    <p-timeline [value]="events2" layout="horizontal" align="alternate">
        <ng-template pTemplate="content" let-event>
            {{event}}
        </ng-template>
        <ng-template pTemplate="opposite" let-event>
            &nbsp;
        </ng-template>
    </p-timeline>

================
File: src/app/demo/components/pages/timeline/timelinedemo.component.ts
================
import { Component, OnInit } from '@angular/core';
import { PrimeIcons } from 'primeng/api';

@Component({
    templateUrl: './timelinedemo.component.html',
    styleUrls: ['./timelinedemo.scss']
})
export class TimelineDemoComponent implements OnInit {

    events1: any[] = [];

    events2: any[] = [];

    ngOnInit() {
        this.events1 = [
            { status: 'Ordered', date: '15/10/2020 10:30', icon: PrimeIcons.SHOPPING_CART, color: '#9C27B0', image: 'game-controller.jpg' },
            { status: 'Processing', date: '15/10/2020 14:00', icon: PrimeIcons.COG, color: '#673AB7' },
            { status: 'Shipped', date: '15/10/2020 16:15', icon: PrimeIcons.ENVELOPE, color: '#FF9800' },
            { status: 'Delivered', date: '16/10/2020 10:00', icon: PrimeIcons.CHECK, color: '#607D8B' }
        ];

        this.events2 = [
            "2020", "2021", "2022", "2023"
        ];
    }

}

================
File: src/app/demo/components/pages/timeline/timelinedemo.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { TimelineDemoRoutingModule } from './timelinedemo-routing.module';
import { TimelineDemoComponent } from './timelinedemo.component';
import { TimelineModule } from 'primeng/timeline';
import { ButtonModule } from 'primeng/button';
import { CardModule } from 'primeng/card';

@NgModule({
    imports: [
        CommonModule,
        TimelineModule,
        ButtonModule,
        CardModule,
        TimelineDemoRoutingModule
    ],
    declarations: [TimelineDemoComponent]
})
export class TimelineDemoModule { }

================
File: src/app/demo/components/pages/timeline/timelinedemo.scss
================
@media screen and (max-width: 960px) {
    ::ng-deep {
        .customized-timeline {
            .p-timeline-event:nth-child(even) {
                flex-direction: row !important;
                
                .p-timeline-event-content {
                    text-align: left !important;
                }
            }

            .p-timeline-event-opposite {
                flex: 0;
            }

            .p-card {
                margin-top: 1rem;
            }
        }
    }
}

================
File: src/app/demo/components/primeblocks/blocks/blocks.component.html
================
<block-viewer header="Hero" [code]="block1" [free]="true">
    <div class="grid grid-nogutter surface-section text-800">
        <div class="col-12 md:col-6 p-6 text-center md:text-left flex align-items-center ">
            <section>
                <span class="block text-6xl font-bold mb-1">Create the screens</span>
                <div class="text-6xl text-primary font-bold mb-3">your visitors deserve to see</div>
                <p class="mt-0 mb-4 text-700 line-height-3">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
                
                <button pButton pRipple label="Learn More" type="button" class="mr-3 p-button-raised"></button>
                <button pButton pRipple label="Live Demo" type="button" class="p-button-outlined"></button>
            </section>
        </div>
        <div class="col-12 md:col-6 overflow-hidden">
            <img src="assets/demo/images/blocks/hero/hero-1.png" alt="Image" class="md:ml-auto block md:h-full" style="clip-path: polygon(8% 0, 100% 0%, 100% 100%, 0 100%)">
        </div>
    </div>
</block-viewer>

<block-viewer header="Feature" [code]="block2" [free]="true">
    <div class="surface-section px-4 py-8 md:px-6 lg:px-8 text-center">
        <div class="mb-3 font-bold text-3xl">
            <span class="text-900">One Product, </span>
            <span class="text-blue-600">Many Solutions</span>
        </div>
        <div class="text-700 mb-6">Ac turpis egestas maecenas pharetra convallis posuere morbi leo urna.</div>
        <div class="grid">
            <div class="col-12 md:col-4 mb-4 px-5">
                <span class="p-3 shadow-2 mb-3 inline-block surface-card" style="border-radius: 10px">
                    <i class="pi pi-desktop text-4xl text-blue-500"></i>
                </span>
                <div class="text-900 text-xl mb-3 font-medium">Built for Developers</div>
                <span class="text-700 line-height-3">Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</span>
            </div>
            <div class="col-12 md:col-4 mb-4 px-5">
                <span class="p-3 shadow-2 mb-3 inline-block surface-card" style="border-radius: 10px">
                    <i class="pi pi-lock text-4xl text-blue-500"></i>
                </span>
                <div class="text-900 text-xl mb-3 font-medium">End-to-End Encryption</div>
                <span class="text-700 line-height-3">Risus nec feugiat in fermentum posuere urna nec. Posuere sollicitudin aliquam ultrices sagittis.</span>
            </div>
            <div class="col-12 md:col-4 mb-4 px-5">
                <span class="p-3 shadow-2 mb-3 inline-block surface-card" style="border-radius: 10px">
                    <i class="pi pi-check-circle text-4xl text-blue-500"></i>
                </span>
                <div class="text-900 text-xl mb-3 font-medium">Easy to Use</div>
                <span class="text-700 line-height-3">Ornare suspendisse sed nisi lacus sed viverra tellus. Neque volutpat ac tincidunt vitae semper.</span>
            </div>
            <div class="col-12 md:col-4 mb-4 px-5">
                <span class="p-3 shadow-2 mb-3 inline-block surface-card" style="border-radius: 10px">
                    <i class="pi pi-globe text-4xl text-blue-500"></i>
                </span>
                <div class="text-900 text-xl mb-3 font-medium">Fast & Global Support</div>
                <span class="text-700 line-height-3">Fermentum et sollicitudin ac orci phasellus egestas tellus rutrum tellus.</span>
            </div>
            <div class="col-12 md:col-4 mb-4 px-5">
                <span class="p-3 shadow-2 mb-3 inline-block surface-card" style="border-radius: 10px">
                    <i class="pi pi-github text-4xl text-blue-500"></i>
                </span>
                <div class="text-900 text-xl mb-3 font-medium">Open Source</div>
                <span class="text-700 line-height-3">Nec tincidunt praesent semper feugiat. Sed adipiscing diam donec adipiscing tristique risus nec feugiat. </span>
            </div>
            <div class="col-12 md:col-4 md:mb-4 mb-0 px-3">
                <span class="p-3 shadow-2 mb-3 inline-block surface-card" style="border-radius: 10px">
                    <i class="pi pi-shield text-4xl text-blue-500"></i>
                </span>
                <div class="text-900 text-xl mb-3 font-medium">Trusted Securitty</div>
                <span class="text-700 line-height-3">Mattis rhoncus urna neque viverra justo nec ultrices. Id cursus metus aliquam eleifend.</span>
            </div>
        </div>
    </div>
</block-viewer>

<block-viewer header="Pricing" [code]="block3" [free]="true">
    <div class="surface-ground px-4 py-8 md:px-6 lg:px-8">
        <div class="text-900 font-bold text-6xl mb-4 text-center">Pricing Plans</div>
        <div class="text-700 text-xl mb-6 text-center line-height-3">Lorem ipsum dolor sit, amet consectetur adipisicing elit. Velit numquam eligendi quos.</div>

        <div class="grid">
            <div class="col-12 lg:col-4">
                <div class="p-3 h-full">
                    <div class="shadow-2 p-3 h-full flex flex-column surface-card" style="border-radius: 6px">
                        <div class="text-900 font-medium text-xl mb-2">Basic</div>
                        <div class="text-600">Plan description</div>
                        <hr class="my-3 mx-0 border-top-1 border-none surface-border" />
                        <div class="flex align-items-center">
                            <span class="font-bold text-2xl text-900">$9</span>
                            <span class="ml-2 font-medium text-600">per month</span>
                        </div>
                        <hr class="my-3 mx-0 border-top-1 border-none surface-border" />
                        <ul class="list-none p-0 m-0 flex-grow-1">
                            <li class="flex align-items-center mb-3">
                                <i class="pi pi-check-circle text-green-500 mr-2"></i>
                                <span class="text-900">Arcu vitae elementum</span>
                            </li>
                            <li class="flex align-items-center mb-3">
                                <i class="pi pi-check-circle text-green-500 mr-2"></i>
                                <span class="text-900">Dui faucibus in ornare</span>
                            </li>
                            <li class="flex align-items-center mb-3">
                                <i class="pi pi-check-circle text-green-500 mr-2"></i>
                                <span class="text-900">Morbi tincidunt augue</span>
                            </li>
                        </ul>
                        <hr class="mb-3 mx-0 border-top-1 border-none surface-border mt-auto" />
                        <button pButton pRipple label="Buy Now" class="p-3 w-full mt-auto"></button>
                    </div>
                </div>
            </div>

            <div class="col-12 lg:col-4">
                <div class="p-3 h-full">
                    <div class="shadow-2 p-3 h-full flex flex-column surface-card" style="border-radius: 6px">
                        <div class="text-900 font-medium text-xl mb-2">Premium</div>
                        <div class="text-600">Plan description</div>
                        <hr class="my-3 mx-0 border-top-1 border-none surface-border" />
                        <div class="flex align-items-center">
                            <span class="font-bold text-2xl text-900">$29</span>
                            <span class="ml-2 font-medium text-600">per month</span>
                        </div>
                        <hr class="my-3 mx-0 border-top-1 border-none surface-border" />
                        <ul class="list-none p-0 m-0 flex-grow-1">
                            <li class="flex align-items-center mb-3">
                                <i class="pi pi-check-circle text-green-500 mr-2"></i>
                                <span class="text-900">Arcu vitae elementum</span>
                            </li>
                            <li class="flex align-items-center mb-3">
                                <i class="pi pi-check-circle text-green-500 mr-2"></i>
                                <span class="text-900">Dui faucibus in ornare</span>
                            </li>
                            <li class="flex align-items-center mb-3">
                                <i class="pi pi-check-circle text-green-500 mr-2"></i>
                                <span class="text-900">Morbi tincidunt augue</span>
                            </li>
                            <li class="flex align-items-center mb-3">
                                <i class="pi pi-check-circle text-green-500 mr-2"></i>
                                <span class="text-900">Duis ultricies lacus sed</span>
                            </li>
                        </ul>
                        <hr class="mb-3 mx-0 border-top-1 border-none surface-border" />
                        <button pButton pRipple label="Buy Now" class="p-3 w-full"></button>
                    </div>
                </div>
            </div>

            <div class="col-12 lg:col-4">
                <div class="p-3 h-full">
                    <div class="shadow-2 p-3 flex flex-column surface-card" style="border-radius: 6px">
                        <div class="text-900 font-medium text-xl mb-2">Enterprise</div>
                        <div class="text-600">Plan description</div>
                        <hr class="my-3 mx-0 border-top-1 border-none surface-border" />
                        <div class="flex align-items-center">
                            <span class="font-bold text-2xl text-900">$49</span>
                            <span class="ml-2 font-medium text-600">per month</span>
                        </div>
                        <hr class="my-3 mx-0 border-top-1 border-none surface-border" />
                        <ul class="list-none p-0 m-0 flex-grow-1">
                            <li class="flex align-items-center mb-3">
                                <i class="pi pi-check-circle text-green-500 mr-2"></i>
                                <span class="text-900">Arcu vitae elementum</span>
                            </li>
                            <li class="flex align-items-center mb-3">
                                <i class="pi pi-check-circle text-green-500 mr-2"></i>
                                <span class="text-900">Dui faucibus in ornare</span>
                            </li>
                            <li class="flex align-items-center mb-3">
                                <i class="pi pi-check-circle text-green-500 mr-2"></i>
                                <span class="text-900">Morbi tincidunt augue</span>
                            </li>
                            <li class="flex align-items-center mb-3">
                                <i class="pi pi-check-circle text-green-500 mr-2"></i>
                                <span class="text-900">Duis ultricies lacus sed</span>
                            </li>
                            <li class="flex align-items-center mb-3">
                                <i class="pi pi-check-circle text-green-500 mr-2"></i>
                                <span class="text-900">Imperdiet proin</span>
                            </li>
                            <li class="flex align-items-center mb-3">
                                <i class="pi pi-check-circle text-green-500 mr-2"></i>
                                <span class="text-900">Nisi scelerisque</span>
                            </li>
                        </ul>
                        <hr class="mb-3 mx-0 border-top-1 border-none surface-border" />
                        <button pButton pRipple label="Buy Now" class="p-3 w-full p-button-outlined"></button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</block-viewer>

<block-viewer header="Call to Action" [code]="block4" [free]="true">
    <div class="surface-section px-4 py-8 md:px-6 lg:px-8">
        <div class="text-700 text-center">
            <div class="text-blue-600 font-bold mb-3"><i class="pi pi-discord"></i>&nbsp;POWERED BY DISCORD</div>
            <div class="text-900 font-bold text-5xl mb-3">Join Our Design Community</div>
            <div class="text-700 text-2xl mb-5">Lorem ipsum dolor sit, amet consectetur adipisicing elit. Velit numquam eligendi quos.</div>
            <button pButton pRipple label="Join Now" icon="pi pi-discord" class="font-bold px-5 py-3 p-button-raised p-button-rounded white-space-nowrap"></button>
        </div>
    </div>
</block-viewer>

<block-viewer header="Banner" [code]="block5" containerClass="surface-section py-8" [free]="true">
    <div class="bg-bluegray-900 text-gray-100 p-3 flex justify-content-between lg:justify-content-center align-items-center flex-wrap">
        <div class="font-bold mr-8">🔥 Hot Deals!</div>
        <div class="align-items-center hidden lg:flex">
            <span class="line-height-3">Libero voluptatum atque exercitationem praesentium provident odit.</span>
        </div>
        <a class="flex align-items-center ml-2 mr-8">
            <a class="text-white" href="#"><span class="underline font-bold">Learn More</span></a>
        </a>
        <a pRipple class="flex align-items-center no-underline justify-content-center border-circle text-gray-50 hover:bg-bluegray-700 cursor-pointer transition-colors transition-duration-150" style="width:2rem; height: 2rem">
            <i class="pi pi-times"></i>
        </a>
    </div>
</block-viewer>

<div class="block-category-title">Application UI</div>
<block-viewer header="Page Heading" [code]="block6" [free]="true">
    <div class="surface-section px-4 py-5 md:px-6 lg:px-8">
        <ul class="list-none p-0 m-0 flex align-items-center font-medium mb-3">
            <li>
                <a class="text-500 no-underline line-height-3 cursor-pointer">Application</a>
            </li>
            <li class="px-2">
                <i class="pi pi-angle-right text-500 line-height-3"></i>
            </li>
            <li>
                <span class="text-900 line-height-3">Analytics</span>
            </li>
        </ul>
        <div class="flex align-items-start flex-column lg:justify-content-between lg:flex-row">
            <div>
                <div class="font-medium text-3xl text-900">Customers</div>
                <div class="flex align-items-center text-700 flex-wrap">
                    <div class="mr-5 flex align-items-center mt-3">
                        <i class="pi pi-users mr-2"></i>
                        <span>332 Active Users</span>
                    </div>
                    <div class="mr-5 flex align-items-center mt-3">
                        <i class="pi pi-globe mr-2"></i>
                        <span>9402 Sessions</span>
                    </div>
                    <div class="flex align-items-center mt-3">
                        <i class="pi pi-clock mr-2"></i>
                        <span>2.32m Avg. Duration</span>
                    </div>
                </div>
            </div>
            <div class="mt-3 lg:mt-0">
                <button pButton pRipple label="Add" class="p-button-outlined mr-2" icon="pi pi-user-plus"></button>
                <button pButton pRipple label="Save" icon="pi pi-check"></button>
            </div>
        </div>
    </div>
</block-viewer>

<block-viewer header="Stats" [code]="block7" [free]="true">
    <div class="surface-ground px-4 py-5 md:px-6 lg:px-8">
        <div class="grid">
            <div class="col-12 md:col-6 lg:col-3">
                <div class="surface-card shadow-2 p-3 border-round">
                    <div class="flex justify-content-between mb-3">
                        <div>
                            <span class="block text-500 font-medium mb-3">Orders</span>
                            <div class="text-900 font-medium text-xl">152</div>
                        </div>
                        <div class="flex align-items-center justify-content-center bg-blue-100 border-round" style="width:2.5rem;height:2.5rem">
                            <i class="pi pi-shopping-cart text-blue-500 text-xl"></i>
                        </div>
                    </div>
                    <span class="text-green-500 font-medium">24 new </span>
                    <span class="text-500">since last visit</span>
                </div>
            </div>
            <div class="col-12 md:col-6 lg:col-3">
                <div class="surface-card shadow-2 p-3 border-round">
                    <div class="flex justify-content-between mb-3">
                        <div>
                            <span class="block text-500 font-medium mb-3">Revenue</span>
                            <div class="text-900 font-medium text-xl">$2.100</div>
                        </div>
                        <div class="flex align-items-center justify-content-center bg-orange-100 border-round" style="width:2.5rem;height:2.5rem">
                            <i class="pi pi-map-marker text-orange-500 text-xl"></i>
                        </div>
                    </div>
                    <span class="text-green-500 font-medium">%52+ </span>
                    <span class="text-500">since last week</span>
                </div>
            </div>
            <div class="col-12 md:col-6 lg:col-3">
                <div class="surface-card shadow-2 p-3 border-round">
                    <div class="flex justify-content-between mb-3">
                        <div>
                            <span class="block text-500 font-medium mb-3">Customers</span>
                            <div class="text-900 font-medium text-xl">28441</div>
                        </div>
                        <div class="flex align-items-center justify-content-center bg-cyan-100 border-round" style="width:2.5rem;height:2.5rem">
                            <i class="pi pi-inbox text-cyan-500 text-xl"></i>
                        </div>
                    </div>
                    <span class="text-green-500 font-medium">520  </span>
                    <span class="text-500">newly registered</span>
                </div>
            </div>
            <div class="col-12 md:col-6 lg:col-3">
                <div class="surface-card shadow-2 p-3 border-round">
                    <div class="flex justify-content-between mb-3">
                        <div>
                            <span class="block text-500 font-medium mb-3">Comments</span>
                            <div class="text-900 font-medium text-xl">152 Unread</div>
                        </div>
                        <div class="flex align-items-center justify-content-center bg-purple-100 border-round" style="width:2.5rem;height:2.5rem">
                            <i class="pi pi-comment text-purple-500 text-xl"></i>
                        </div>
                    </div>
                    <span class="text-green-500 font-medium">85 </span>
                    <span class="text-500">responded</span>
                </div>
            </div>
        </div>
    </div>
</block-viewer>

<block-viewer header="Sign-In" [code]="block8" [free]="true" containerClass="surface-ground px-4 py-8 md:px-6 lg:px-8 flex align-items-center justify-content-center">
    <div class="surface-card p-4 shadow-2 border-round w-full lg:w-6">
        <div class="text-center mb-5">
            <img src="assets/demo/images/blocks/logos/hyper.svg" alt="Image" height="50" class="mb-3">
            <div class="text-900 text-3xl font-medium mb-3">Welcome Back</div>
            <span class="text-600 font-medium line-height-3">Don't have an account?</span>
            <a class="font-medium no-underline ml-2 text-blue-500 cursor-pointer">Create today!</a>
        </div>

        <div>
            <label for="email1" class="block text-900 font-medium mb-2">Email</label>
            <input id="email1" type="text" placeholder="Email address" pInputText class="w-full mb-3">

            <label for="password1" class="block text-900 font-medium mb-2">Password</label>
            <input id="password1" type="password" placeholder="Password" pInputText class="w-full mb-3">

            <div class="flex align-items-center justify-content-between mb-6">
                <div class="flex align-items-center">
                    <p-checkbox id="rememberme1" [binary]="true" styleClass="mr-2"></p-checkbox>
                    <label for="rememberme1" class="text-900">Remember me</label>
                </div>
                <a class="font-medium no-underline ml-2 text-blue-500 text-right cursor-pointer">Forgot password?</a>
            </div>

            <button pButton pRipple label="Sign In" icon="pi pi-user" class="w-full"></button>
        </div>
    </div>
</block-viewer>

<block-viewer header="Description List" [code]="block9" containerClass="surface-section px-4 py-8 md:px-6 lg:px-8" [free]="true">
    <div class="surface-section">
        <div class="font-medium text-3xl text-900 mb-3">Movie Information</div>
        <div class="text-500 mb-5">Morbi tristique blandit turpis. In viverra ligula id nulla hendrerit rutrum.</div>
        <ul class="list-none p-0 m-0">
            <li class="flex align-items-center py-3 px-2 border-top-1 surface-border flex-wrap">
                <div class="text-500 w-6 md:w-2 font-medium">Title</div>
                <div class="text-900 w-full md:w-8 md:flex-order-0 flex-order-1">Heat</div>
                <div class="w-6 md:w-2 flex justify-content-end">
                    <button pButton pRipple label="Edit" icon="pi pi-pencil" class="p-button-text"></button>
                </div>
            </li>
            <li class="flex align-items-center py-3 px-2 border-top-1 surface-border flex-wrap">
                <div class="text-500 w-6 md:w-2 font-medium">Genre</div>
                <div class="text-900 w-full md:w-8 md:flex-order-0 flex-order-1">
                    <p-chip label="Crime" class="mr-2"></p-chip>
                    <p-chip label="Drama" class="mr-2"></p-chip>
                    <p-chip label="Thriller"></p-chip>
                </div>
                <div class="w-6 md:w-2 flex justify-content-end">
                    <button pButton pRipple label="Edit" icon="pi pi-pencil" class="p-button-text"></button>
                </div>
            </li>
            <li class="flex align-items-center py-3 px-2 border-top-1 surface-border flex-wrap">
                <div class="text-500 w-6 md:w-2 font-medium">Director</div>
                <div class="text-900 w-full md:w-8 md:flex-order-0 flex-order-1">Michael Mann</div>
                <div class="w-6 md:w-2 flex justify-content-end">
                    <button pButton pRipple label="Edit" icon="pi pi-pencil" class="p-button-text"></button>
                </div>
            </li>
            <li class="flex align-items-center py-3 px-2 border-top-1 surface-border flex-wrap">
                <div class="text-500 w-6 md:w-2 font-medium">Actors</div>
                <div class="text-900 w-full md:w-8 md:flex-order-0 flex-order-1">Robert De Niro, Al Pacino</div>
                <div class="w-6 md:w-2 flex justify-content-end">
                    <button pButton pRipple label="Edit" icon="pi pi-pencil" class="p-button-text"></button>
                </div>
            </li>
            <li class="flex align-items-center py-3 px-2 border-top-1 border-bottom-1 surface-border flex-wrap">
                <div class="text-500 w-6 md:w-2 font-medium">Plot</div>
                <div class="text-900 w-full md:w-8 md:flex-order-0 flex-order-1 line-height-3">
                    A group of professional bank robbers start to feel the heat from police
                     when they unknowingly leave a clue at their latest heist.</div>
                <div class="w-6 md:w-2 flex justify-content-end">
                    <button pButton pRipple label="Edit" icon="pi pi-pencil" class="p-button-text"></button>
                </div>
            </li>
        </ul>
    </div>
</block-viewer>

<block-viewer header="Card" [code]="block10" containerClass="px-4 py-8 md:px-6 lg:px-8" [free]="true">
    <div class="surface-card p-4 shadow-2 border-round">
        <div class="text-3xl font-medium text-900 mb-3">Card Title</div>
        <div class="font-medium text-500 mb-3">Vivamus id nisl interdum, blandit augue sit amet, eleifend mi.</div>
        <div style="height: 150px" class="border-2 border-dashed surface-border"></div>
    </div>
</block-viewer>

================
File: src/app/demo/components/primeblocks/blocks/blocks.component.ts
================
import { Component } from '@angular/core';

@Component({
    templateUrl: './blocks.component.html'
})
export class BlocksComponent{

    block1: string = `
<div class="grid grid-nogutter surface-section text-800">
    <div class="col-12 md:col-6 p-6 text-center md:text-left flex align-items-center ">
        <section>
            <span class="block text-6xl font-bold mb-1">Create the screens</span>
            <div class="text-6xl text-primary font-bold mb-3">your visitors deserve to see</div>
            <p class="mt-0 mb-4 text-700 line-height-3">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
            
            <button pButton pRipple label="Learn More" type="button" class="mr-3 p-button-raised"></button>
            <button pButton pRipple label="Live Demo" type="button" class="p-button-outlined"></button>
        </section>
    </div>
    <div class="col-12 md:col-6 overflow-hidden">
        <img src="assets/images/blocks/hero/hero-1.png" alt="Image" class="md:ml-auto block md:h-full" style="clip-path: polygon(8% 0, 100% 0%, 100% 100%, 0 100%)">
    </div>
</div>`;

    block2: string = `
<div class="surface-section px-4 py-8 md:px-6 lg:px-8 text-center">
    <div class="mb-3 font-bold text-3xl">
        <span class="text-900">One Product, </span>
        <span class="text-blue-600">Many Solutions</span>
    </div>
    <div class="text-700 mb-6">Ac turpis egestas maecenas pharetra convallis posuere morbi leo urna.</div>
    <div class="grid">
        <div class="col-12 md:col-4 mb-4 px-5">
            <span class="p-3 shadow-2 mb-3 inline-block surface-card" style="border-radius: 10px">
                <i class="pi pi-desktop text-4xl text-blue-500"></i>
            </span>
            <div class="text-900 text-xl mb-3 font-medium">Built for Developers</div>
            <span class="text-700 line-height-3">Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</span>
        </div>
        <div class="col-12 md:col-4 mb-4 px-5">
            <span class="p-3 shadow-2 mb-3 inline-block surface-card" style="border-radius: 10px">
                <i class="pi pi-lock text-4xl text-blue-500"></i>
            </span>
            <div class="text-900 text-xl mb-3 font-medium">End-to-End Encryption</div>
            <span class="text-700 line-height-3">Risus nec feugiat in fermentum posuere urna nec. Posuere sollicitudin aliquam ultrices sagittis.</span>
        </div>
        <div class="col-12 md:col-4 mb-4 px-5">
            <span class="p-3 shadow-2 mb-3 inline-block surface-card" style="border-radius: 10px">
                <i class="pi pi-check-circle text-4xl text-blue-500"></i>
            </span>
            <div class="text-900 text-xl mb-3 font-medium">Easy to Use</div>
            <span class="text-700 line-height-3">Ornare suspendisse sed nisi lacus sed viverra tellus. Neque volutpat ac tincidunt vitae semper.</span>
        </div>
        <div class="col-12 md:col-4 mb-4 px-5">
            <span class="p-3 shadow-2 mb-3 inline-block surface-card" style="border-radius: 10px">
                <i class="pi pi-globe text-4xl text-blue-500"></i>
            </span>
            <div class="text-900 text-xl mb-3 font-medium">Fast & Global Support</div>
            <span class="text-700 line-height-3">Fermentum et sollicitudin ac orci phasellus egestas tellus rutrum tellus.</span>
        </div>
        <div class="col-12 md:col-4 mb-4 px-5">
            <span class="p-3 shadow-2 mb-3 inline-block surface-card" style="border-radius: 10px">
                <i class="pi pi-github text-4xl text-blue-500"></i>
            </span>
            <div class="text-900 text-xl mb-3 font-medium">Open Source</div>
            <span class="text-700 line-height-3">Nec tincidunt praesent semper feugiat. Sed adipiscing diam donec adipiscing tristique risus nec feugiat. </span>
        </div>
        <div class="col-12 md:col-4 md:mb-4 mb-0 px-3">
            <span class="p-3 shadow-2 mb-3 inline-block surface-card" style="border-radius: 10px">
                <i class="pi pi-shield text-4xl text-blue-500"></i>
            </span>
            <div class="text-900 text-xl mb-3 font-medium">Trusted Securitty</div>
            <span class="text-700 line-height-3">Mattis rhoncus urna neque viverra justo nec ultrices. Id cursus metus aliquam eleifend.</span>
        </div>
    </div>
</div>`;

    block3: string = `
<div class="surface-ground px-4 py-8 md:px-6 lg:px-8">
    <div class="text-900 font-bold text-6xl mb-4 text-center">Pricing Plans</div>
    <div class="text-700 text-xl mb-6 text-center line-height-3">Lorem ipsum dolor sit, amet consectetur adipisicing elit. Velit numquam eligendi quos.</div>

    <div class="grid">
        <div class="col-12 lg:col-4">
            <div class="p-3 h-full">
                <div class="shadow-2 p-3 h-full flex flex-column surface-card" style="border-radius: 6px">
                    <div class="text-900 font-medium text-xl mb-2">Basic</div>
                    <div class="text-600">Plan description</div>
                    <hr class="my-3 mx-0 border-top-1 border-none surface-border" />
                    <div class="flex align-items-center">
                        <span class="font-bold text-2xl text-900">$9</span>
                        <span class="ml-2 font-medium text-600">per month</span>
                    </div>
                    <hr class="my-3 mx-0 border-top-1 border-none surface-border" />
                    <ul class="list-none p-0 m-0 flex-grow-1">
                        <li class="flex align-items-center mb-3">
                            <i class="pi pi-check-circle text-green-500 mr-2"></i>
                            <span class="text-900">Arcu vitae elementum</span>
                        </li>
                        <li class="flex align-items-center mb-3">
                            <i class="pi pi-check-circle text-green-500 mr-2"></i>
                            <span class="text-900">Dui faucibus in ornare</span>
                        </li>
                        <li class="flex align-items-center mb-3">
                            <i class="pi pi-check-circle text-green-500 mr-2"></i>
                            <span class="text-900">Morbi tincidunt augue</span>
                        </li>
                    </ul>
                    <hr class="mb-3 mx-0 border-top-1 border-none surface-border mt-auto" />
                    <button pButton pRipple label="Buy Now" class="p-3 w-full mt-auto"></button>
                </div>
            </div>
        </div>

        <div class="col-12 lg:col-4">
            <div class="p-3 h-full">
                <div class="shadow-2 p-3 h-full flex flex-column surface-card" style="border-radius: 6px">
                    <div class="text-900 font-medium text-xl mb-2">Premium</div>
                    <div class="text-600">Plan description</div>
                    <hr class="my-3 mx-0 border-top-1 border-none surface-border" />
                    <div class="flex align-items-center">
                        <span class="font-bold text-2xl text-900">$29</span>
                        <span class="ml-2 font-medium text-600">per month</span>
                    </div>
                    <hr class="my-3 mx-0 border-top-1 border-none surface-border" />
                    <ul class="list-none p-0 m-0 flex-grow-1">
                        <li class="flex align-items-center mb-3">
                            <i class="pi pi-check-circle text-green-500 mr-2"></i>
                            <span class="text-900">Arcu vitae elementum</span>
                        </li>
                        <li class="flex align-items-center mb-3">
                            <i class="pi pi-check-circle text-green-500 mr-2"></i>
                            <span class="text-900">Dui faucibus in ornare</span>
                        </li>
                        <li class="flex align-items-center mb-3">
                            <i class="pi pi-check-circle text-green-500 mr-2"></i>
                            <span class="text-900">Morbi tincidunt augue</span>
                        </li>
                        <li class="flex align-items-center mb-3">
                            <i class="pi pi-check-circle text-green-500 mr-2"></i>
                            <span class="text-900">Duis ultricies lacus sed</span>
                        </li>
                    </ul>
                    <hr class="mb-3 mx-0 border-top-1 border-none surface-border" />
                    <button pButton pRipple label="Buy Now" class="p-3 w-full"></button>
                </div>
            </div>
        </div>

        <div class="col-12 lg:col-4">
            <div class="p-3 h-full">
                <div class="shadow-2 p-3 flex flex-column surface-card" style="border-radius: 6px">
                    <div class="text-900 font-medium text-xl mb-2">Enterprise</div>
                    <div class="text-600">Plan description</div>
                    <hr class="my-3 mx-0 border-top-1 border-none surface-border" />
                    <div class="flex align-items-center">
                        <span class="font-bold text-2xl text-900">$49</span>
                        <span class="ml-2 font-medium text-600">per month</span>
                    </div>
                    <hr class="my-3 mx-0 border-top-1 border-none surface-border" />
                    <ul class="list-none p-0 m-0 flex-grow-1">
                        <li class="flex align-items-center mb-3">
                            <i class="pi pi-check-circle text-green-500 mr-2"></i>
                            <span class="text-900">Arcu vitae elementum</span>
                        </li>
                        <li class="flex align-items-center mb-3">
                            <i class="pi pi-check-circle text-green-500 mr-2"></i>
                            <span class="text-900">Dui faucibus in ornare</span>
                        </li>
                        <li class="flex align-items-center mb-3">
                            <i class="pi pi-check-circle text-green-500 mr-2"></i>
                            <span class="text-900">Morbi tincidunt augue</span>
                        </li>
                        <li class="flex align-items-center mb-3">
                            <i class="pi pi-check-circle text-green-500 mr-2"></i>
                            <span class="text-900">Duis ultricies lacus sed</span>
                        </li>
                        <li class="flex align-items-center mb-3">
                            <i class="pi pi-check-circle text-green-500 mr-2"></i>
                            <span class="text-900">Imperdiet proin</span>
                        </li>
                        <li class="flex align-items-center mb-3">
                            <i class="pi pi-check-circle text-green-500 mr-2"></i>
                            <span class="text-900">Nisi scelerisque</span>
                        </li>
                    </ul>
                    <hr class="mb-3 mx-0 border-top-1 border-none surface-border" />
                    <button pButton pRipple label="Buy Now" class="p-3 w-full p-button-outlined"></button>
                </div>
            </div>
        </div>
    </div>
</div>`;

    block4: string = `
<div class="surface-section px-4 py-8 md:px-6 lg:px-8">
    <div class="text-700 text-center">
        <div class="text-blue-600 font-bold mb-3"><i class="pi pi-discord"></i>&nbsp;POWERED BY DISCORD</div>
        <div class="text-900 font-bold text-5xl mb-3">Join Our Design Community</div>
        <div class="text-700 text-2xl mb-5">Lorem ipsum dolor sit, amet consectetur adipisicing elit. Velit numquam eligendi quos.</div>
        <button pButton pRipple label="Join Now" icon="pi pi-discord" class="font-bold px-5 py-3 p-button-raised p-button-rounded white-space-nowrap"></button>
    </div>
</div>`;

    block5: string = `
<div class="bg-bluegray-900 text-gray-100 p-3 flex justify-content-between lg:justify-content-center align-items-center flex-wrap">
    <div class="font-bold mr-8">🔥 Hot Deals!</div>
    <div class="align-items-center hidden lg:flex">
        <span class="line-height-3">Libero voluptatum atque exercitationem praesentium provident odit.</span>
    </div>
    <a class="flex align-items-center ml-2 mr-8">
        <a class="text-white" href="#"><span class="underline font-bold">Learn More</span></a>
    </a>
    <a pRipple class="flex align-items-center no-underline justify-content-center border-circle text-gray-50 hover:bg-bluegray-700 cursor-pointer transition-colors transition-duration-150" style="width:2rem; height: 2rem">
        <i class="pi pi-times"></i>
    </a>
</div>`;

    block6: string = `
<div class="surface-section px-4 py-5 md:px-6 lg:px-8">
    <ul class="list-none p-0 m-0 flex align-items-center font-medium mb-3">
        <li>
            <a class="text-500 no-underline line-height-3 cursor-pointer">Application</a>
        </li>
        <li class="px-2">
            <i class="pi pi-angle-right text-500 line-height-3"></i>
        </li>
        <li>
            <span class="text-900 line-height-3">Analytics</span>
        </li>
    </ul>
    <div class="flex align-items-start flex-column lg:justify-content-between lg:flex-row">
        <div>
            <div class="font-medium text-3xl text-900">Customers</div>
            <div class="flex align-items-center text-700 flex-wrap">
                <div class="mr-5 flex align-items-center mt-3">
                    <i class="pi pi-users mr-2"></i>
                    <span>332 Active Users</span>
                </div>
                <div class="mr-5 flex align-items-center mt-3">
                    <i class="pi pi-globe mr-2"></i>
                    <span>9402 Sessions</span>
                </div>
                <div class="flex align-items-center mt-3">
                    <i class="pi pi-clock mr-2"></i>
                    <span>2.32m Avg. Duration</span>
                </div>
            </div>
        </div>
        <div class="mt-3 lg:mt-0">
            <button pButton pRipple label="Add" class="p-button-outlined mr-2" icon="pi pi-user-plus"></button>
            <button pButton pRipple label="Save" icon="pi pi-check"></button>
        </div>
    </div>
</div>`;

    block7: string = `
<div class="surface-ground px-4 py-5 md:px-6 lg:px-8">
    <div class="grid">
        <div class="col-12 md:col-6 lg:col-3">
            <div class="surface-card shadow-2 p-3 border-round">
                <div class="flex justify-content-between mb-3">
                    <div>
                        <span class="block text-500 font-medium mb-3">Orders</span>
                        <div class="text-900 font-medium text-xl">152</div>
                    </div>
                    <div class="flex align-items-center justify-content-center bg-blue-100 border-round" style="width:2.5rem;height:2.5rem">
                        <i class="pi pi-shopping-cart text-blue-500 text-xl"></i>
                    </div>
                </div>
                <span class="text-green-500 font-medium">24 new </span>
                <span class="text-500">since last visit</span>
            </div>
        </div>
        <div class="col-12 md:col-6 lg:col-3">
            <div class="surface-card shadow-2 p-3 border-round">
                <div class="flex justify-content-between mb-3">
                    <div>
                        <span class="block text-500 font-medium mb-3">Revenue</span>
                        <div class="text-900 font-medium text-xl">$2.100</div>
                    </div>
                    <div class="flex align-items-center justify-content-center bg-orange-100 border-round" style="width:2.5rem;height:2.5rem">
                        <i class="pi pi-map-marker text-orange-500 text-xl"></i>
                    </div>
                </div>
                <span class="text-green-500 font-medium">%52+ </span>
                <span class="text-500">since last week</span>
            </div>
        </div>
        <div class="col-12 md:col-6 lg:col-3">
            <div class="surface-card shadow-2 p-3 border-round">
                <div class="flex justify-content-between mb-3">
                    <div>
                        <span class="block text-500 font-medium mb-3">Customers</span>
                        <div class="text-900 font-medium text-xl">28441</div>
                    </div>
                    <div class="flex align-items-center justify-content-center bg-cyan-100 border-round" style="width:2.5rem;height:2.5rem">
                        <i class="pi pi-inbox text-cyan-500 text-xl"></i>
                    </div>
                </div>
                <span class="text-green-500 font-medium">520  </span>
                <span class="text-500">newly registered</span>
            </div>
        </div>
        <div class="col-12 md:col-6 lg:col-3">
            <div class="surface-card shadow-2 p-3 border-round">
                <div class="flex justify-content-between mb-3">
                    <div>
                        <span class="block text-500 font-medium mb-3">Comments</span>
                        <div class="text-900 font-medium text-xl">152 Unread</div>
                    </div>
                    <div class="flex align-items-center justify-content-center bg-purple-100 border-round" style="width:2.5rem;height:2.5rem">
                        <i class="pi pi-comment text-purple-500 text-xl"></i>
                    </div>
                </div>
                <span class="text-green-500 font-medium">85 </span>
                <span class="text-500">responded</span>
            </div>
        </div>
    </div>
</div>`;

    block8: string = `
<div class="surface-card p-4 shadow-2 border-round w-full lg:w-6">
    <div class="text-center mb-5">
        <img src="assets/images/blocks/logos/hyper.svg" alt="Image" height="50" class="mb-3">
        <div class="text-900 text-3xl font-medium mb-3">Welcome Back</div>
        <span class="text-600 font-medium line-height-3">Don't have an account?</span>
        <a class="font-medium no-underline ml-2 text-blue-500 cursor-pointer">Create today!</a>
    </div>

    <div>
        <label for="email1" class="block text-900 font-medium mb-2">Email</label>
        <input id="email1" type="text" placeholder="Email address" pInputText class="w-full mb-3">

        <label for="password1" class="block text-900 font-medium mb-2">Password</label>
        <input id="password1" type="password" placeholder="Password" pInputText class="w-full mb-3">

        <div class="flex align-items-center justify-content-between mb-6">
            <div class="flex align-items-center">
                <p-checkbox id="rememberme1" [binary]="true" styleClass="mr-2"></p-checkbox>
                <label for="rememberme1" class="text-900">Remember me</label>
            </div>
            <a class="font-medium no-underline ml-2 text-blue-500 text-right cursor-pointer">Forgot password?</a>
        </div>

        <button pButton pRipple label="Sign In" icon="pi pi-user" class="w-full"></button>
    </div>
</div>`;

    block9: string = `
<div class="surface-section">
    <div class="font-medium text-3xl text-900 mb-3">Movie Information</div>
    <div class="text-500 mb-5">Morbi tristique blandit turpis. In viverra ligula id nulla hendrerit rutrum.</div>
    <ul class="list-none p-0 m-0">
        <li class="flex align-items-center py-3 px-2 border-top-1 surface-border flex-wrap">
            <div class="text-500 w-6 md:w-2 font-medium">Title</div>
            <div class="text-900 w-full md:w-8 md:flex-order-0 flex-order-1">Heat</div>
            <div class="w-6 md:w-2 flex justify-content-end">
                <button pButton pRipple label="Edit" icon="pi pi-pencil" class="p-button-text"></button>
            </div>
        </li>
        <li class="flex align-items-center py-3 px-2 border-top-1 surface-border flex-wrap">
            <div class="text-500 w-6 md:w-2 font-medium">Genre</div>
            <div class="text-900 w-full md:w-8 md:flex-order-0 flex-order-1">
                <p-chip label="Crime" class="mr-2"></p-chip>
                <p-chip label="Drama" class="mr-2"></p-chip>
                <p-chip label="Thriller"></p-chip>
            </div>
            <div class="w-6 md:w-2 flex justify-content-end">
                <button pButton pRipple label="Edit" icon="pi pi-pencil" class="p-button-text"></button>
            </div>
        </li>
        <li class="flex align-items-center py-3 px-2 border-top-1 surface-border flex-wrap">
            <div class="text-500 w-6 md:w-2 font-medium">Director</div>
            <div class="text-900 w-full md:w-8 md:flex-order-0 flex-order-1">Michael Mann</div>
            <div class="w-6 md:w-2 flex justify-content-end">
                <button pButton pRipple label="Edit" icon="pi pi-pencil" class="p-button-text"></button>
            </div>
        </li>
        <li class="flex align-items-center py-3 px-2 border-top-1 surface-border flex-wrap">
            <div class="text-500 w-6 md:w-2 font-medium">Actors</div>
            <div class="text-900 w-full md:w-8 md:flex-order-0 flex-order-1">Robert De Niro, Al Pacino</div>
            <div class="w-6 md:w-2 flex justify-content-end">
                <button pButton pRipple label="Edit" icon="pi pi-pencil" class="p-button-text"></button>
            </div>
        </li>
        <li class="flex align-items-center py-3 px-2 border-top-1 border-bottom-1 surface-border flex-wrap">
            <div class="text-500 w-6 md:w-2 font-medium">Plot</div>
            <div class="text-900 w-full md:w-8 md:flex-order-0 flex-order-1 line-height-3">
                A group of professional bank robbers start to feel the heat from police
                 when they unknowingly leave a clue at their latest heist.</div>
            <div class="w-6 md:w-2 flex justify-content-end">
                <button pButton pRipple label="Edit" icon="pi pi-pencil" class="p-button-text"></button>
            </div>
        </li>
    </ul>
</div>`;

    block10: string = `
<div class="surface-card p-4 shadow-2 border-round">
    <div class="text-3xl font-medium text-900 mb-3">Card Title</div>
    <div class="font-medium text-500 mb-3">Vivamus id nisl interdum, blandit augue sit amet, eleifend mi.</div>
    <div style="height: 150px" class="border-2 border-dashed surface-border"></div>
</div>`;
    
}

================
File: src/app/demo/components/primeblocks/blockviewer/blockviewer.component.scss
================
.block-section {
    margin-bottom: 4rem;
}

.block-header {
    padding: 1rem 2rem;
    background-color: var(--surface-section);
    border-top-left-radius: 4px;
    border-top-right-radius: 4px;
    border:1px solid var(--surface-border);
    display: flex;
    align-items: center;
    justify-content: space-between;

    .block-title {
        font-weight: 700;
        display: inline-flex;
        align-items: center;

        .badge-free {
            border-radius: 4px;
            padding: .25rem .5rem;
            background-color: var(--orange-500);
            color: white;
            margin-left: 1rem;
            font-weight: 700;
            font-size: .875rem;
        }
    }

    .block-actions {
        display: flex;
        align-items: center;
        justify-content: space-between;
        user-select: none;
        margin-left: 1rem;

        a {
            display: flex;
            align-items: center;
            margin-right: .75rem;
            padding: .5rem 1rem;
            border-radius: 4px;
            border: 1px solid transparent;
            transition: background-color .2s;
            cursor: pointer;

            &:last-child {
                margin-right: 0;
            }

            &:not(.block-action-disabled):hover {
                background-color: var(--surface-hover);
            }

            &.block-action-active {
                border-color: var(--primary-color);
                color: var(--primary-color);
            }

            &.block-action-copy {
                i {
                    color: var(--primary-color);
                    font-size: 1.25rem;
                }
            }

            &.block-action-disabled {
                opacity: .6;
                cursor: auto !important;
            }

            i {
                margin-right: .5rem;
            }
        }
    }
}

.block-content {
    padding: 0;
    border:1px solid var(--surface-border);
    border-top: 0 none;
}

pre[class*="language-"] {
    margin: 0 !important;

    &:before, &:after {
        display: none !important;
    } 

    code {
        border-left: 0 none !important;
        box-shadow: none !important;
        background: var(--surface-card) !important;
        margin: 0;
        color: var(--text-color);
        font-size: 14px;
        padding: 0 2rem !important;
    
        .token {
            &.tag,
            &.keyword {
                color: #2196F3 !important;
            }
    
            &.attr-name,
            &.attr-string {
                color: #2196F3 !important;
            }
    
            &.attr-value {
                color: #4CAF50 !important;
            }
    
            &.punctuation {
                color: var(--text-color);
            }
    
            &.operator,
            &.string {
                background: transparent;
            }
        }
    }
}

@media screen and (max-width: 575px) {
    .block-header {
        flex-direction: column;
        align-items: start;

        .block-actions {
            margin-top: 1rem;
            margin-left: 0;
        }
    }
}

================
File: src/app/demo/components/primeblocks/blockviewer/blockviewer.component.ts
================
import { Component, Input, ViewEncapsulation } from '@angular/core';

enum BlockView {
	PREVIEW,
	CODE
}

@Component({
    // eslint-disable-next-line @angular-eslint/component-selector
	selector: 'block-viewer',
	template: `
    <div class="block-section">
        <div class="block-header">
            <span class="block-title">
                <span>{{header}}</span>
                <span class="badge-free" *ngIf="free">Free</span>
                <span class="badge-new" *ngIf="new">New</span>
            </span>
            <div class="block-actions">
                <a tabindex="0" [ngClass]="{'block-action-active': blockView === BlockView.PREVIEW}" (click)="activateView($event, BlockView.PREVIEW)"><span>Preview</span></a>
                <a [attr.tabindex]="'0'" [ngClass]="{'block-action-active': blockView === BlockView.CODE}" (click)="activateView($event, BlockView.CODE)">
                    <span>Code</span>
                </a>
                <a [attr.tabindex]="'0'" class="block-action-copy" (click)="copyCode($event)" 
                    pTooltip="Copied to clipboard" tooltipEvent="focus" tooltipPosition="bottom"><i class="pi pi-copy m-0"></i></a>
            </div>
        </div>
        <div class="block-content">
            <div [class]="containerClass" [ngStyle]="previewStyle" *ngIf="blockView === BlockView.PREVIEW">
                <ng-content></ng-content>
            </div>
            <div *ngIf="blockView === BlockView.CODE">
                <pre class="app-code"><code>{{code}}</code></pre>
            </div>
        </div>
    </div>
  `,
	styleUrls: ['./blockviewer.component.scss'],
	encapsulation: ViewEncapsulation.None
})
export class BlockViewerComponent {

	@Input() header!: string;

	@Input() code!: string;

	@Input() containerClass!: string;

	@Input() previewStyle!: object;

	@Input() free: boolean = true;

	@Input() new: boolean = false;

	BlockView = BlockView;

	blockView: BlockView = BlockView.PREVIEW;

	activateView(event: Event, blockView: BlockView) {

		this.blockView = blockView;
		event.preventDefault();
	}

	async copyCode(event: Event) {
		await navigator.clipboard.writeText(this.code);
		event.preventDefault();
	}

}

================
File: src/app/demo/components/primeblocks/primeblocks-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { BlocksComponent } from './blocks/blocks.component';


@NgModule({
	imports: [RouterModule.forChild([
		{ path: '', data: { breadcrumb: 'Free Blocks' }, component: BlocksComponent }
	])],
	exports: [RouterModule]
})
export class PrimeBlocksRoutingModule { }

================
File: src/app/demo/components/primeblocks/primeblocks.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { BlocksComponent } from './blocks/blocks.component';
import { PrimeBlocksRoutingModule } from './primeblocks-routing.module';
import { BlockViewerComponent } from './blockviewer/blockviewer.component'
import { ChipModule } from 'primeng/chip';
import { CheckboxModule } from 'primeng/checkbox';
import { ButtonModule } from 'primeng/button';
import { RippleModule } from 'primeng/ripple';
import { FormsModule } from '@angular/forms';
import { InputTextModule } from 'primeng/inputtext';
import { PasswordModule } from 'primeng/password';
import { TooltipModule } from 'primeng/tooltip';

@NgModule({
    imports: [
        CommonModule,
        ButtonModule,
        RippleModule,
        ChipModule,
        CheckboxModule,
        FormsModule,
        InputTextModule,
        PasswordModule,
        PrimeBlocksRoutingModule,
        TooltipModule
    ],
    declarations: [BlocksComponent, BlockViewerComponent]
})
export class PrimeBlocksModule { }

================
File: src/app/demo/components/profile/create/profilecreate-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { ProfileCreateComponent } from './profilecreate.component';

@NgModule({
	imports: [RouterModule.forChild([
		{ path: '', component: ProfileCreateComponent }
	])],
	exports: [RouterModule]
})
export class ProfileCreateRoutingModule { }

================
File: src/app/demo/components/profile/create/profilecreate.component.html
================
<div class="card">
    <span class="text-900 text-xl font-bold mb-4 block">Create User</span>
    <div class="grid">
        <div class="col-12 lg:col-2">
            <div class="text-900 font-medium text-xl mb-3">Profile</div>
            <p class="m-0 p-0 text-600 line-height-3 mr-3">Odio euismod lacinia at quis risus sed vulputate odio.</p>
        </div>
        <div class="col-12 lg:col-10">
            <div class="grid formgrid p-fluid">
                <div class="field mb-4 col-12">
                    <label for="nickname" class="font-medium text-900">Nickname</label>
                    <input id="nickname" type="text" pInputText>
                </div>
                <div class="field mb-4 col-12">
                    <label for="avatar" class="font-medium text-900">Avatar</label>
                    <p-fileUpload mode="basic" name="avatar" url="./upload.php" accept="image/*" [maxFileSize]="1000000" styleClass="p-button-outlined p-button-plain" chooseLabel="Upload Image"></p-fileUpload>
                </div>
                <div class="field mb-4 col-12">
                    <label for="bio" class="font-medium text-900">Bio</label>
                    <textarea id="bio" type="text" pInputTextarea rows="5" [autoResize]="true"></textarea>
                </div>
                <div class="field mb-4 col-12 md:col-6">
                    <label for="email" class="font-medium text-900">Email</label>
                    <input id="email" type="text" pInputText>
                </div>
                <div class="field mb-4 col-12 md:col-6">
                    <label for="country" class="font-medium text-900">Country</label>
                    <p-dropdown inputId="country" [options]="countries" optionLabel="name" [filter]="true" filterBy="name" [showClear]="true" placeholder="Select a Country">
                        <ng-template let-country pTemplate="item">
                            <div class="flex align-items-center">
                                <img src="assets/demo/images/flag/flag_placeholder.png" [class]="'mr-2 flag flag-' + country.code.toLowerCase()" style="width:18px"/>
                                <div>{{country.name}}</div>
                            </div>
                        </ng-template>
                    </p-dropdown>
                </div>
                <div class="field mb-4 col-12 md:col-6">
                    <label for="city" class="font-medium text-900">City</label>
                    <input id="city" type="text" pInputText>
                </div>
                <div class="field mb-4 col-12 md:col-6">
                    <label for="state" class="font-medium text-900">State</label>
                    <input id="state" type="text" pInputText>
                </div>
                <div class="field mb-4 col-12">
                    <label for="website" class="font-medium text-900">Website</label>
                    <p-inputGroup>
                        <p-inputGroupAddon>
                           <span>www</span>
                        </p-inputGroupAddon>
                        <input id="website" type="text" pInputText>      
                    </p-inputGroup>
                </div>
                <div class="col-12">
                    <button pButton pRipple label="Create User" class="w-auto mt-3"></button>
                </div>
            </div>
        </div>
    </div>
</div>

================
File: src/app/demo/components/profile/create/profilecreate.component.ts
================
import { Component, OnInit } from '@angular/core';

@Component({
    templateUrl: './profilecreate.component.html'
})
export class ProfileCreateComponent implements OnInit { 

    countries: any[] = [];

    ngOnInit() {
        this.countries = [
            {name: 'Australia', code: 'AU'},
            {name: 'Brazil', code: 'BR'},
            {name: 'China', code: 'CN'},
            {name: 'Egypt', code: 'EG'},
            {name: 'France', code: 'FR'},
            {name: 'Germany', code: 'DE'},
            {name: 'India', code: 'IN'},
            {name: 'Japan', code: 'JP'},
            {name: 'Spain', code: 'ES'},
            {name: 'United States', code: 'US'}
        ]; 
    }
    
}

================
File: src/app/demo/components/profile/create/profilecreate.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { RippleModule } from 'primeng/ripple';
import { ButtonModule } from 'primeng/button';
import { InputTextModule } from 'primeng/inputtext';
import { DropdownModule } from 'primeng/dropdown';
import { FileUploadModule } from 'primeng/fileupload';
import { InputTextareaModule } from 'primeng/inputtextarea';
import { ProfileCreateComponent } from './profilecreate.component';
import { ProfileCreateRoutingModule } from './profilecreate-routing.module';
import { InputGroupAddonModule } from 'primeng/inputgroupaddon';
import { InputGroupModule } from 'primeng/inputgroup';

@NgModule({
	imports: [
		CommonModule,
		FormsModule,
		ProfileCreateRoutingModule,
		ButtonModule,
		RippleModule,
		InputTextModule,
		DropdownModule,
		FileUploadModule,
		InputTextareaModule,
		InputGroupModule,
        InputGroupAddonModule
	],
	declarations: [ProfileCreateComponent]
})
export class ProfileCreateModule { }

================
File: src/app/demo/components/profile/list/profilelist-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { ProfileListComponent } from './profilelist.component';

@NgModule({
	imports: [RouterModule.forChild([
		{ path: '', component: ProfileListComponent }
	])],
	exports: [RouterModule]
})
export class ProfileListRoutingModule { }

================
File: src/app/demo/components/profile/list/profilelist.component.html
================
<div class="card">
    <p-table #dt [value]="customers" [paginator]="true" [rows]="10" [showCurrentPageReport]="true" responsiveLayout="scroll"
        currentPageReportTemplate="Showing {first} to {last} of {totalRecords} entries" [rowsPerPageOptions]="[10,25,50]"
        [globalFilterFields]="['name','country.name','representative.name']">
        <ng-template pTemplate="caption">
            <div class="flex flex-wrap gap-2 align-items-center justify-content-between">
                <span class="p-input-icon-left w-full sm:w-20rem flex-order-1 sm:flex-order-0">
                    <i class="pi pi-search"></i>
                    <input pInputText type="text" (input)="onGlobalFilter(dt, $event)" placeholder="Global Search" class="w-full" />
                </span>
                <button (click)="navigateToCreateUser()" pButton class="p-button-outlined w-full sm:w-auto flex-order-0 sm:flex-order-1" icon="pi pi-user-plus" label="Add New"></button>
            </div>
        </ng-template>
        <ng-template pTemplate="header">
            <tr>
                <th pSortableColumn="name" class="white-space-nowrap" style="width:25%">Name <p-sortIcon field="name"></p-sortIcon></th>
                <th pSortableColumn="country.name" class="white-space-nowrap" style="width:25%">Country <p-sortIcon field="country.name"></p-sortIcon></th>
                <th pSortableColumn="date" class="white-space-nowrap" style="width:25%">Join Date <p-sortIcon field="date"></p-sortIcon></th>
                <th pSortableColumn="representative.name" class="white-space-nowrap" style="width:25%">Created By <p-sortIcon field="representative.name"></p-sortIcon></th>
                <th pSortableColumn="activity" class="white-space-nowrap" style="width:25%">Activity <p-sortIcon field="activity"></p-sortIcon></th>
            </tr>
        </ng-template>
        <ng-template pTemplate="body" let-customer>
            <tr>
                <td>{{customer.name}}</td>
                <td>
                    <img src="assets/demo/images/flag/flag_placeholder.png" [class]="'flag flag-' + customer.country.code" class="w-2rem mr-2">
                    <span class="image-text">{{customer.country.name}}</span>
                </td>
                <td>{{customer.date | date: 'MM/dd/yyyy'}}</td>
                <td>
                    <div class="inline-flex align-items-center">
                        <img [alt]="customer.representative.name" src="assets/demo/images/avatar/{{customer.representative.image}}" class="w-2rem mr-2" />
                        <span>{{customer.representative.name}}</span>
                    </div>
                </td>
                <td><p-progressBar [value]="customer.activity" [showValue]="false" [style]="{'height':'.5rem'}"></p-progressBar></td>
            </tr>
        </ng-template>
    </p-table>
</div>

================
File: src/app/demo/components/profile/list/profilelist.component.ts
================
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { Table } from 'primeng/table';
import { Customer } from 'src/app/demo/api/customer';
import { CustomerService } from 'src/app/demo/service/customer.service';

@Component({
    templateUrl: './profilelist.component.html'
})
export class ProfileListComponent implements OnInit {

    customers: Customer[] = [];

    constructor(private customerService: CustomerService, private router: Router) { }

    ngOnInit() {
        this.customerService.getCustomersLarge().then(customers => this.customers = customers);
    }

    onGlobalFilter(table: Table, event: Event) {
        table.filterGlobal((event.target as HTMLInputElement).value, 'contains')
    }

    navigateToCreateUser(){
        this.router.navigate(['profile/create'])
    }

}

================
File: src/app/demo/components/profile/list/profilelist.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RippleModule } from 'primeng/ripple';
import { ButtonModule } from 'primeng/button';
import { InputTextModule } from 'primeng/inputtext';
import { TableModule } from 'primeng/table';
import { ProgressBarModule } from 'primeng/progressbar';
import { ProfileListComponent } from './profilelist.component';
import { ProfileListRoutingModule } from './profilelist-routing.module';

@NgModule({
	imports: [
		CommonModule,
		ProfileListRoutingModule,
		RippleModule,
		ButtonModule,
		InputTextModule,
		TableModule,
		ProgressBarModule
	],
	declarations: [ProfileListComponent]
})
export class ProfileListModule { }

================
File: src/app/demo/components/profile/profile-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';

@NgModule({
    imports: [RouterModule.forChild([
        { path: 'list', data: {breadcrumb: 'List'}, loadChildren: () => import('./list/profilelist.module').then(m => m.ProfileListModule) },
        { path: 'create', data: {breadcrumb: 'Create'}, loadChildren: () => import('./create/profilecreate.module').then(m => m.ProfileCreateModule) },
        { path: '**', redirectTo: '/notfound' }
    ])],
    exports: [RouterModule]
})
export class ProfileRoutingModule { }

================
File: src/app/demo/components/profile/profile.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ProfileRoutingModule } from './profile-routing.module';

@NgModule({
    imports: [
        CommonModule,
        ProfileRoutingModule
    ],
    declarations: []
})
export class ProfileModule { }

================
File: src/app/demo/components/signalr/signalr.component.html
================
<div class="grid">
    <div class="card">
      <div class="flex flex-column md:flex-row md:align-items-start md:justify-content-between mb-3">
        <div class="text-900 text-xl font-semibold mb-3 md:mb-0">RDS Products Table Data</div>
        <div class="inline-flex align-items-center">
          <span class="p-input-icon-left flex-auto">
            <i class="pi pi-search"></i>
            <input
              pInputText
              type="text"
              (input)="onGlobalFilter(dt, $event)"
              placeholder="Search"
              class="w-full"
              style="border-radius: 2rem"
            />
          </span>
          <button
            pButton
            pRipple
            icon="pi pi-upload"
            class="p-button-rounded mx-3"
            (click)="dt.exportCSV()"
          ></button>
        </div>
      </div>
      <p-table
        #dt
        [value]="products"
        [columns]="cols"
        [paginator]="true"
        [rows]="20"
        responsiveLayout="scroll"
        [responsive]="true"
        [globalFilterFields]="globalFilterFields"
      >
        <ng-template pTemplate="header">
          <tr>
            <th
              *ngFor="let col of cols"
              pSortableColumn="{{ col.field }}"
              style="min-width:10rem"
              class="white-space-nowrap"
            >
              {{ col.header }}
              <p-sortIcon field="{{ col.field }}"></p-sortIcon>
            </th>
          </tr>
        </ng-template>
        <ng-template pTemplate="body" let-product>
          <tr>
            <td *ngFor="let col of cols">{{ product[col.field] }}</td>
          </tr>
        </ng-template>
      </p-table>
    </div>
  </div>

================
File: src/app/demo/components/signalr/signalr.component.spec.ts
================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { SignalrComponent } from './signalr.component';

describe('SignalrComponent', () => {
  let component: SignalrComponent;
  let fixture: ComponentFixture<SignalrComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [SignalrComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(SignalrComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

================
File: src/app/demo/components/signalr/signalr.component.ts
================
//Note: This component is for demonstration purposes and requires a dotnet SignalR server 

import { ChangeDetectorRef } from '@angular/core';
import { Component, OnDestroy, OnInit } from '@angular/core';
import { Subscription } from 'rxjs';
import { LayoutService } from 'src/app/layout/service/app.layout.service';
import { SignalRService } from 'src/app/demo/service/signalr.service';
import { Product } from '../../../models/product.model';
import { Table } from 'primeng/table';


@Component({
  selector: 'app-signalr',
  standalone: true,
  imports: [],
  templateUrl: './signalr.component.html',
  styleUrl: './signalr.component.scss'
})

export class SignalrComponent implements OnInit, OnDestroy {
  products: Product[] = [];
  cols: any[] = [];
  globalFilterFields: string[] = [];
  private subscriptions: Subscription = new Subscription();
  

  constructor(
    private signalRService: SignalRService,
    private layoutService: LayoutService,
    private cdr: ChangeDetectorRef
  ) {}

  ngOnInit(): void {
    // Subscribe to SignalRService for real-time updates
    const signalRSubscription = this.signalRService.dataReceived.subscribe(
      (newProduct: Product) => this.handleNewProduct(newProduct)
    );
    this.subscriptions.add(signalRSubscription);

    // Subscribe to layout configuration updates
    const layoutSubscription = this.layoutService.configUpdate$
      .pipe(/* Add any necessary operators, e.g., debounceTime */)
      .subscribe(() => {
        this.initCharts();
      });
    this.subscriptions.add(layoutSubscription);
  }

  private handleNewProduct(newProduct: Product): void {
    console.log('New product received via SignalR:', newProduct);
  
    // Find the index of the existing product
    const existingProductIndex = this.products.findIndex((product) => product.id === newProduct.id);
  
    if (existingProductIndex > -1) {
      // Update the existing product with the new fields
      this.products[existingProductIndex] = {
        ...this.products[existingProductIndex],
        ...newProduct, // Merge the updated fields
      };
      console.log('Updated existing product:', this.products[existingProductIndex]);
    } else {
      // If columns are not initialized, initialize them based on the first product
      if (this.cols.length === 0) {
        this.initializeTableColumns(newProduct);
      } else {
        // Check for new fields and update columns if necessary
        const newFields = Object.keys(newProduct).filter(
          (key) => !this.cols.some((col) => col.field === key)
        );
  
        if (newFields.length > 0) {
          newFields.forEach((field) => {
            this.cols.push({
              header: this.capitalizeFirstLetter(field),
              field: field,
            });
            this.globalFilterFields.push(field);
          });
        }
      }
  
      // Add the new product to the products array
      this.products.push(newProduct);
      console.log('Added new product:', newProduct);
    }
  
    // Trigger Angular's Change Detection to update the view
    this.cdr.detectChanges();
  }
  
  private initializeTableColumns(product: Product): void {
    this.cols = Object.keys(product).map((key) => ({
      header: this.capitalizeFirstLetter(key),
      field: key,
    }));

    // Precompute global filterable fields
    this.globalFilterFields = this.cols.map((col) => col.field);
  }

  private capitalizeFirstLetter(text: string): string {
    if (!text) return '';
    return text.charAt(0).toUpperCase() + text.slice(1);
  }


  onGlobalFilter(table: Table, event: Event): void {
    table.filterGlobal((event.target as HTMLInputElement).value, 'contains');
  }


  initCharts(): void {

  }

  ngOnDestroy(): void {
    // Unsubscribe from all subscriptions to prevent memory leaks
    if (this.subscriptions) {
      this.subscriptions.unsubscribe();
    }
  }
}

================
File: src/app/demo/components/uikit/banner/banner.component.html
================
<div class="banner" [ngStyle]="getBannerStyles()">
    <span class="banner-text">{{ text }}</span>
  </div>

================
File: src/app/demo/components/uikit/banner/banner.component.scss
================
.banner {
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 5px;
    padding: 0 10px;
    text-align: center;
  }
  
  .banner-text {
    font-weight: bold;
  }

================
File: src/app/demo/components/uikit/banner/banner.component.spec.ts
================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { BannerComponent } from './banner.component';

describe('BannerComponent', () => {
  let component: BannerComponent;
  let fixture: ComponentFixture<BannerComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [BannerComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(BannerComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

================
File: src/app/demo/components/uikit/banner/banner.component.ts
================
import { CommonModule } from '@angular/common';
import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-banner',
  standalone: true,
  templateUrl: './banner.component.html',
  styleUrls: ['./banner.component.scss'],
  imports: [CommonModule]
})
export class BannerComponent {
  @Input() width: string = '100%';
  @Input() height: string = '50px';
  @Input() minWidth: string = '150px';
  @Input() minHeight: string = '50px';
  @Input() backgroundColor: string = '#0066CC'; 
  @Input() textColor: string = '#FFFFFF'; 
  @Input() textSize: string = '18px'; 
  @Input() text: string = 'Default Banner Text';

  // Method to return the banner styles
  getBannerStyles(): { [key: string]: string } {
    return {
      width: this.width,
      height: this.height,
      'min-width': this.minWidth,
      'min-height': this.minHeight,
      'background-color': this.backgroundColor,
      color: this.textColor,
      'font-size': this.textSize,
    };
  }
}



// Example usage: 

// <app-banner
//   width="100%"
//   height="60px"
//   backgroundColor="#28A745"
//   textColor="#FFFFFF"
//   textSize="20px"
//   text="Sales Performance"
// ></app-banner>

// <app-banner
//   width="100%"
//   height="60px"
//   backgroundColor="#007BFF"
//   textColor="#FFFFFF"
//   textSize="20px"
//   text="Labor Productivity"
// ></app-banner>

================
File: src/app/demo/components/uikit/button/buttondemo-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { ButtonDemoComponent } from './buttondemo.component';

@NgModule({
	imports: [RouterModule.forChild([
		{ path: '', component: ButtonDemoComponent }
	])],
	exports: [RouterModule]
})
export class ButtonDemoRoutingModule { }

================
File: src/app/demo/components/uikit/button/buttondemo.component.html
================
<div class="grid">
	<div class="col-12 md:col-6">
		<div class="card">
			<h5>Default</h5>
			<div class="flex flex-wrap gap-2">
				<button pButton pRipple label="Submit"></button>
				<button pButton pRipple label="Disabled" disabled="true"></button>
				<p-button label="Link" styleClass="p-button-link"></p-button>
			</div>
		</div>

		<div class="card">
			<h5>Severities</h5>
			<div class="flex flex-wrap gap-2">
				<button pButton pRipple type="button" label="Primary"></button>
				<button pButton pRipple type="button" label="Secondary" class="p-button-secondary"></button>
				<button pButton pRipple type="button" label="Success" class="p-button-success"></button>
				<button pButton pRipple type="button" label="Info" class="p-button-info"></button>
				<button pButton pRipple type="button" label="Warning" class="p-button-warning"></button>
				<button pButton pRipple type="button" label="Help" class="p-button-help"></button>
				<button pButton pRipple type="button" label="Danger" class="p-button-danger"></button>
			</div>
		</div>

		<div class="card">
			<h5>Text</h5>
			<div class="flex flex-wrap gap-2">
				<button pButton pRipple type="button" label="Primary" class="p-button-text"></button>
				<button pButton pRipple type="button" label="Secondary" class="p-button-secondary p-button-text"></button>
				<button pButton pRipple type="button" label="Success" class="p-button-success p-button-text"></button>
				<button pButton pRipple type="button" label="Info" class="p-button-info p-button-text"></button>
				<button pButton pRipple type="button" label="Warning" class="p-button-warning p-button-text"></button>
				<button pButton pRipple type="button" label="Help" class="p-button-help p-button-text"></button>
				<button pButton pRipple type="button" label="Danger" class="p-button-danger p-button-text"></button>
				<button pButton pRipple type="button" label="Plain" class="p-button-text p-button-plain"></button>
			</div>
		</div>

		<div class="card">
			<h5>Outlined</h5>
			<div class="flex flex-wrap gap-2">
				<button pButton pRipple type="button" label="Primary" class="p-button-outlined"></button>
				<button pButton pRipple type="button" label="Secondary" class="p-button-outlined p-button-secondary"></button>
				<button pButton pRipple type="button" label="Success" class="p-button-outlined p-button-success"></button>
				<button pButton pRipple type="button" label="Info" class="p-button-outlined p-button-info"></button>
				<button pButton pRipple type="button" label="Warning" class="p-button-outlined p-button-warning"></button>
				<button pButton pRipple type="button" label="Help" class="p-button-outlined p-button-help"></button>
				<button pButton pRipple type="button" label="Danger" class="p-button-outlined p-button-danger"></button>
			</div>
		</div>

		<div class="card">
			<h5>Button Set</h5>
			<span class="p-buttonset">
				<button pButton pRipple label="Save" icon="pi pi-check"></button>
				<button pButton pRipple label="Delete" icon="pi pi-trash"></button>
			</span>
		</div>

		<div class="card">
			<h5>SplitButton</h5>
			<div class="flex flex-wrap gap-2">
				<p-splitButton label="Save" icon="pi pi-plus" [model]="items" styleClass="p-button-info"></p-splitButton>
				<p-splitButton label="Save" icon="pi pi-plus" [model]="items" styleClass="p-button-success"></p-splitButton>
				<p-splitButton label="Save" icon="pi pi-plus" [model]="items" styleClass="p-button-warning"></p-splitButton>
				<p-splitButton label="Save" icon="pi pi-plus" [model]="items" styleClass="p-button-help"></p-splitButton>
				<p-splitButton label="Save" icon="pi pi-plus" [model]="items" styleClass="p-button-danger"></p-splitButton>
			</div>
		</div>
		<div class="card">
			<h5>Templating</h5>
			<div class="flex flex-wrap gap-2">
				<p-button>
					<img alt="logo" src="https://primefaces.org/cdn/primeng/images/primeng-icon.svg" style="width: 1.5rem"/>
				</p-button>
	
				<p-button styleClass="p-button-outlined">
					<img alt="logo" src="https://primefaces.org/cdn/primeng/images/primeng-icon.svg" style="width: 1.5rem"/>
					<span class="ml-2 font-bold">PrimeNG</span>
				</p-button>
			</div>
		</div>
	</div>
	<div class="col-12 md:col-6">
		<div class="card">
			<h5>Icons</h5>
			<div class="flex flex-wrap gap-2">
				<button pButton pRipple icon="pi pi-star-fill"></button>
				<button pButton pRipple label="Submit" icon="pi pi-bookmark"></button>
				<button pButton pRipple label="Submit" icon="pi pi-bookmark" iconPos="right"></button>
			</div>
		</div>

		<div class="card">
			<h5>Raised</h5>
			<div class="flex flex-wrap gap-2">
				<button pButton pRipple type="button" label="Primary" class="p-button-raised"></button>
				<button pButton pRipple type="button" label="Secondary" class="p-button-raised p-button-secondary"></button>
				<button pButton pRipple type="button" label="Success" class="p-button-raised p-button-success"></button>
				<button pButton pRipple type="button" label="Info" class="p-button-raised p-button-info"></button>
				<button pButton pRipple type="button" label="Warning" class="p-button-raised p-button-warning"></button>
				<button pButton pRipple type="button" label="Help" class="p-button-raised p-button-help"></button>
				<button pButton pRipple type="button" label="Danger" class="p-button-raised p-button-danger"></button>
			</div>
		</div>

		<div class="card">
			<h5>Rounded</h5>
			<div class="flex flex-wrap gap-2">
				<button pButton pRipple type="button" label="Primary" class="p-button-rounded"></button>
				<button pButton pRipple type="button" label="Secondary" class="p-button-rounded p-button-secondary"></button>
				<button pButton pRipple type="button" label="Success" class="p-button-rounded p-button-success"></button>
				<button pButton pRipple type="button" label="Info" class="p-button-rounded p-button-info"></button>
				<button pButton pRipple type="button" label="Warning" class="p-button-rounded p-button-warning"></button>
				<button pButton pRipple type="button" label="Help" class="p-button-rounded p-button-help"></button>
				<button pButton pRipple type="button" label="Danger" class="p-button-rounded p-button-danger"></button>
			</div>
		</div>

		<div class="card">
			<h5>Rounded Icons</h5>
			<div class="flex flex-wrap gap-2">
				<button pButton pRipple type="button" icon="pi pi-check" class="p-button-rounded"></button>
				<button pButton pRipple type="button" icon="pi pi-bookmark" class="p-button-rounded p-button-secondary"></button>
				<button pButton pRipple type="button" icon="pi pi-search" class="p-button-rounded p-button-success"></button>
				<button pButton pRipple type="button" icon="pi pi-user" class="p-button-rounded p-button-info"></button>
				<button pButton pRipple type="button" icon="pi pi-bell" class="p-button-rounded p-button-warning"></button>
				<button pButton pRipple type="button" icon="pi pi-heart" class="p-button-rounded p-button-help"></button>
				<button pButton pRipple type="button" icon="pi pi-times" class="p-button-rounded p-button-danger"></button>
			</div>
		</div>

		<div class="card">
			<h5>Rounded Text</h5>
			<div class="flex flex-wrap gap-2">
				<button pButton pRipple type="button" icon="pi pi-check" class="p-button-rounded p-button-text"></button>
				<button pButton pRipple type="button" icon="pi pi-bookmark" class="p-button-rounded p-button-secondary p-button-text"></button>
				<button pButton pRipple type="button" icon="pi pi-search" class="p-button-rounded p-button-success p-button-text"></button>
				<button pButton pRipple type="button" icon="pi pi-user" class="p-button-rounded p-button-info p-button-text"></button>
				<button pButton pRipple type="button" icon="pi pi-bell" class="p-button-rounded p-button-warning p-button-text"></button>
				<button pButton pRipple type="button" icon="pi pi-heart" class="p-button-rounded p-button-help p-button-text"></button>
				<button pButton pRipple type="button" icon="pi pi-times" class="p-button-rounded p-button-danger p-button-text"></button>
				<button pButton pRipple type="button" icon="pi pi-filter" class="p-button-rounded p-button-text p-button-plain"></button>
			</div>
		</div>
		
		<div class="card">
			<h5>Rounded Outlined</h5>
			<div class="flex flex-wrap gap-2">
				<button pButton pRipple type="button" icon="pi pi-check" class="p-button-rounded p-button-outlined"></button>
				<button pButton pRipple type="button" icon="pi pi-bookmark" class="p-button-rounded p-button-secondary p-button-outlined"></button>
				<button pButton pRipple type="button" icon="pi pi-search" class="p-button-rounded p-button-success p-button-outlined"></button>
				<button pButton pRipple type="button" icon="pi pi-user" class="p-button-rounded p-button-info p-button-outlined"></button>
				<button pButton pRipple type="button" icon="pi pi-bell" class="p-button-rounded p-button-warning p-button-outlined"></button>
				<button pButton pRipple type="button" icon="pi pi-heart" class="p-button-rounded p-button-help p-button-outlined"></button>
				<button pButton pRipple type="button" icon="pi pi-times" class="p-button-rounded p-button-danger p-button-outlined"></button>
			</div>
		</div>

		<div class="card">
			<h5>Loading</h5>
			<div class="flex flex-wrap gap-2">
				<p-button label="Search" icon="pi pi-search" [loading]="loading[0]" (onClick)="load(0)"></p-button>
				<p-button label="Search" icon="pi pi-search" iconPos="right" [loading]="loading[1]" (onClick)="load(1)"></p-button>
				<p-button icon="pi pi-search" [loading]="loading[2]" (onClick)="load(2)"></p-button>
				<p-button label="Search" [loading]="loading[3]" (onClick)="load(3)"></p-button>
			</div>
		</div>
	</div>
</div>

================
File: src/app/demo/components/uikit/button/buttondemo.component.ts
================
import { Component, OnInit } from '@angular/core';
import { MenuItem } from 'primeng/api';

@Component({
    templateUrl: './buttondemo.component.html'
})
export class ButtonDemoComponent implements OnInit {

    items: MenuItem[] = [];

    loading = [false, false, false, false];

    ngOnInit() {
        this.items = [
            { label: 'Update', icon: 'pi pi-refresh' },
            { label: 'Delete', icon: 'pi pi-times' },
            { label: 'Angular.io', icon: 'pi pi-info', url: 'http://angular.io' },
            { separator: true },
            { label: 'Setup', icon: 'pi pi-cog' }
        ];
    }

    load(index: number) {
        this.loading[index] = true;
        setTimeout(() => this.loading[index] = false, 1000);
    }
    
}

================
File: src/app/demo/components/uikit/button/buttondemo.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ButtonDemoRoutingModule } from './buttondemo-routing.module';
import { ButtonDemoComponent } from './buttondemo.component';
import { ButtonModule } from 'primeng/button';
import { RippleModule } from 'primeng/ripple';
import { SplitButtonModule } from 'primeng/splitbutton';
import { ToggleButtonModule } from 'primeng/togglebutton';

@NgModule({
	imports: [
		CommonModule,
		ButtonDemoRoutingModule,
		ButtonModule,
		RippleModule,
		SplitButtonModule,
		ToggleButtonModule,
	],
	declarations: [ButtonDemoComponent]
})
export class ButtonDemoModule { }

================
File: src/app/demo/components/uikit/charts/chartsdemo-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { ChartsDemoComponent } from './chartsdemo.component';

@NgModule({
	imports: [RouterModule.forChild([
		{ path: '', component: ChartsDemoComponent }
	])],
	exports: [RouterModule]
})
export class ChartsDemoRoutingModule { }

================
File: src/app/demo/components/uikit/charts/chartsdemo.component.html
================
<div class="grid p-fluid">
    <div class="col-12 lg:col-6">
        <div class="card">
            <h5>Linear Chart</h5>
            <p-chart type="line" [data]="lineData" [options]="lineOptions"></p-chart>
        </div>

        <div class="card flex flex-column align-items-center">
            <h5 class="text-left w-full">Pie Chart</h5>
            <p-chart type="pie" [data]="pieData" [options]="pieOptions"></p-chart>
        </div>

        <div class="card flex flex-column align-items-center">
            <h5 class="text-left w-full">Polar Area Chart</h5>
            <p-chart type="polarArea" [data]="polarData" [options]="polarOptions"></p-chart>
        </div>
    </div>
    <div class="col-12 lg:col-6">
        <div class="card">
            <h5>Bar Chart</h5>
            <p-chart type="bar" [data]="barData" [options]="barOptions"></p-chart>
        </div>

        <div class="card flex flex-column align-items-center">
            <h5 class="text-left w-full">Doughnut Chart</h5>
            <p-chart type="doughnut" [data]="pieData" [options]="pieOptions"></p-chart>
        </div>

        <div class="card flex flex-column align-items-center">
            <h5 class="text-left w-full">Radar Chart</h5>
            <p-chart type="radar" [data]="radarData" [options]="radarOptions"></p-chart>
        </div>
    </div>
</div>

================
File: src/app/demo/components/uikit/charts/chartsdemo.component.ts
================
import { Component, OnDestroy, OnInit } from '@angular/core';
import { Subscription, debounceTime } from 'rxjs';
import { LayoutService } from 'src/app/layout/service/app.layout.service';

@Component({
    templateUrl: './chartsdemo.component.html',
})
export class ChartsDemoComponent implements OnInit, OnDestroy {
    lineData: any;

    barData: any;

    pieData: any;

    polarData: any;

    radarData: any;

    lineOptions: any;

    barOptions: any;

    pieOptions: any;

    polarOptions: any;

    radarOptions: any;

    subscription: Subscription;

    constructor(public layoutService: LayoutService) {
        this.subscription = this.layoutService.configUpdate$
            .pipe(debounceTime(25))
            .subscribe((config) => {
                this.initCharts();
            });
    }

    ngOnInit() {
        this.initCharts();
    }

    initCharts() {
        const documentStyle = getComputedStyle(document.documentElement);
        const textColor = documentStyle.getPropertyValue('--text-color');
        const textColorSecondary = documentStyle.getPropertyValue(
            '--text-color-secondary'
        );
        const surfaceBorder =
            documentStyle.getPropertyValue('--surface-border');

        this.barData = {
            labels: [
                'January',
                'February',
                'March',
                'April',
                'May',
                'June',
                'July',
            ],
            datasets: [
                {
                    label: 'My First dataset',
                    backgroundColor:
                        documentStyle.getPropertyValue('--primary-500'),
                    borderColor:
                        documentStyle.getPropertyValue('--primary-500'),
                    data: [65, 59, 80, 81, 56, 55, 40],
                },
                {
                    label: 'My Second dataset',
                    backgroundColor:
                        documentStyle.getPropertyValue('--primary-200'),
                    borderColor:
                        documentStyle.getPropertyValue('--primary-200'),
                    data: [28, 48, 40, 19, 86, 27, 90],
                },
            ],
        };

        this.barOptions = {
            plugins: {
                legend: {
                    labels: {
                        fontColor: textColor,
                    },
                },
            },
            scales: {
                x: {
                    ticks: {
                        color: textColorSecondary,
                        font: {
                            weight: 500,
                        },
                    },
                    grid: {
                        display: false,
                        drawBorder: false,
                    },
                },
                y: {
                    ticks: {
                        color: textColorSecondary,
                    },
                    grid: {
                        color: surfaceBorder,
                        drawBorder: false,
                    },
                },
            },
        };

        this.pieData = {
            labels: ['A', 'B', 'C'],
            datasets: [
                {
                    data: [540, 325, 702],
                    backgroundColor: [
                        documentStyle.getPropertyValue('--indigo-500'),
                        documentStyle.getPropertyValue('--purple-500'),
                        documentStyle.getPropertyValue('--teal-500'),
                    ],
                    hoverBackgroundColor: [
                        documentStyle.getPropertyValue('--indigo-400'),
                        documentStyle.getPropertyValue('--purple-400'),
                        documentStyle.getPropertyValue('--teal-400'),
                    ],
                },
            ],
        };

        this.pieOptions = {
            plugins: {
                legend: {
                    labels: {
                        usePointStyle: true,
                        color: textColor,
                    },
                },
            },
        };

        this.lineData = {
            labels: [
                'January',
                'February',
                'March',
                'April',
                'May',
                'June',
                'July',
            ],
            datasets: [
                {
                    label: 'First Dataset',
                    data: [65, 59, 80, 81, 56, 55, 40],
                    fill: false,
                    backgroundColor:
                        documentStyle.getPropertyValue('--primary-500'),
                    borderColor:
                        documentStyle.getPropertyValue('--primary-500'),
                    tension: 0.4,
                },
                {
                    label: 'Second Dataset',
                    data: [28, 48, 40, 19, 86, 27, 90],
                    fill: false,
                    backgroundColor:
                        documentStyle.getPropertyValue('--primary-200'),
                    borderColor:
                        documentStyle.getPropertyValue('--primary-200'),
                    tension: 0.4,
                },
            ],
        };

        this.lineOptions = {
            plugins: {
                legend: {
                    labels: {
                        fontColor: textColor,
                    },
                },
            },
            scales: {
                x: {
                    ticks: {
                        color: textColorSecondary,
                    },
                    grid: {
                        color: surfaceBorder,
                        drawBorder: false,
                    },
                },
                y: {
                    ticks: {
                        color: textColorSecondary,
                    },
                    grid: {
                        color: surfaceBorder,
                        drawBorder: false,
                    },
                },
            },
        };

        this.polarData = {
            datasets: [
                {
                    data: [11, 16, 7, 3],
                    backgroundColor: [
                        documentStyle.getPropertyValue('--indigo-500'),
                        documentStyle.getPropertyValue('--purple-500'),
                        documentStyle.getPropertyValue('--teal-500'),
                        documentStyle.getPropertyValue('--orange-500'),
                    ],
                    label: 'My dataset',
                },
            ],
            labels: ['Indigo', 'Purple', 'Teal', 'Orange'],
        };

        this.polarOptions = {
            plugins: {
                legend: {
                    labels: {
                        color: textColor,
                    },
                },
            },
            scales: {
                r: {
                    grid: {
                        color: surfaceBorder,
                    },
                },
            },
        };

        this.radarData = {
            labels: [
                'Eating',
                'Drinking',
                'Sleeping',
                'Designing',
                'Coding',
                'Cycling',
                'Running',
            ],
            datasets: [
                {
                    label: 'My First dataset',
                    borderColor: documentStyle.getPropertyValue('--indigo-400'),
                    pointBackgroundColor:
                        documentStyle.getPropertyValue('--indigo-400'),
                    pointBorderColor:
                        documentStyle.getPropertyValue('--indigo-400'),
                    pointHoverBackgroundColor: textColor,
                    pointHoverBorderColor:
                        documentStyle.getPropertyValue('--indigo-400'),
                    data: [65, 59, 90, 81, 56, 55, 40],
                },
                {
                    label: 'My Second dataset',
                    borderColor: documentStyle.getPropertyValue('--purple-400'),
                    pointBackgroundColor:
                        documentStyle.getPropertyValue('--purple-400'),
                    pointBorderColor:
                        documentStyle.getPropertyValue('--purple-400'),
                    pointHoverBackgroundColor: textColor,
                    pointHoverBorderColor:
                        documentStyle.getPropertyValue('--purple-400'),
                    data: [28, 48, 40, 19, 96, 27, 100],
                },
            ],
        };

        this.radarOptions = {
            plugins: {
                legend: {
                    labels: {
                        fontColor: textColor,
                    },
                },
            },
            scales: {
                r: {
                    grid: {
                        color: textColorSecondary,
                    },
                },
            },
        };
    }

    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}

================
File: src/app/demo/components/uikit/charts/chartsdemo.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ChartsDemoRoutingModule } from './chartsdemo-routing.module';
import { ChartModule } from 'primeng/chart'
import { ChartsDemoComponent } from './chartsdemo.component';

@NgModule({
	imports: [
		CommonModule,
		ChartsDemoRoutingModule,
		ChartModule
	],
	declarations: [ChartsDemoComponent]
})
export class ChartsDemoModule { }

================
File: src/app/demo/components/uikit/file/filedemo-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { FileDemoComponent } from './filedemo.component';

@NgModule({
	imports: [RouterModule.forChild([
		{ path: '', component: FileDemoComponent }
	])],
	exports: [RouterModule]
})
export class FileDemoRoutingModule { }

================
File: src/app/demo/components/uikit/file/filedemo.component.html
================
<div class="grid">
    <div class="col-12">
        <div class="card">
            <h5>Advanced</h5>
            <p-fileUpload name="demo[]" url="./upload.php" (onUpload)="onUpload($event)"
                          [multiple]="true" accept="image/*" [maxFileSize]="1000000">
                <ng-template pTemplate="content">
                    <ul *ngIf="uploadedFiles.length">
                        <li *ngFor="let file of uploadedFiles">{{file.name}} - {{file.size}} bytes</li>
                    </ul>
                </ng-template>
            </p-fileUpload>

            <h5>Basic</h5>
            <p-fileUpload mode="basic" name="demo[]" url="./upload.php" accept="image/*" [maxFileSize]="1000000" (onUpload)="onBasicUpload()"></p-fileUpload>

        </div>
    </div>
</div>

================
File: src/app/demo/components/uikit/file/filedemo.component.ts
================
import { Component } from '@angular/core';
import { MessageService } from 'primeng/api';

@Component({
    templateUrl: './filedemo.component.html',
    providers: [MessageService]
})
export class FileDemoComponent {

    uploadedFiles: any[] = [];

    constructor(private messageService: MessageService) {}

    onUpload(event: any) {
        for (const file of event.files) {
            this.uploadedFiles.push(file);
        }

        this.messageService.add({ severity: 'info', summary: 'Success', detail: 'File Uploaded' });
    }

    onBasicUpload() {
        this.messageService.add({ severity: 'info', summary: 'Success', detail: 'File Uploaded with Basic Mode' });
    }

}

================
File: src/app/demo/components/uikit/file/filedemo.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { FileUploadModule } from 'primeng/fileupload';
import { FileDemoRoutingModule } from './filedemo-routing.module';
import { FileDemoComponent } from './filedemo.component';


@NgModule({
	imports: [
		CommonModule,
		FormsModule,
		FileDemoRoutingModule,
		FileUploadModule
	],
	declarations: [FileDemoComponent],
})
export class FileDemoModule { }

================
File: src/app/demo/components/uikit/floatlabel/floatlabeldemo-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { FloatLabelDemoComponent } from './floatlabeldemo.component';

@NgModule({
	imports: [RouterModule.forChild([
		{ path: '', component: FloatLabelDemoComponent }
	])],
	exports: [RouterModule]
})
export class FloatlabelDemoRoutingModule { }

================
File: src/app/demo/components/uikit/floatlabel/floatlabeldemo.component.html
================
<div class="card">
    <h5>Float Label</h5>
    <p>All input text components support floating labels by adding (<mark>.p-float-label</mark>) to wrapper class.</p>
    <div class="grid p-fluid mt-3">
        <div class="field col-12 md:col-4">
            <span class="p-float-label">
                <input type="text" id="inputtext" pInputText [(ngModel)]="value1">
                <label for="inputtext">InputText</label>
            </span>
        </div>
        <div class="field col-12 md:col-4">
            <span class="p-float-label">
                <p-autoComplete inputId="autocomplete" [(ngModel)]="value2" [suggestions]="filteredCountries"
                (completeMethod)="searchCountry($event)" field="name"></p-autoComplete>
                <label for="autocomplete">AutoComplete</label>
            </span>
        </div>
        <div class="field col-12 md:col-4">
            <span class="p-float-label p-input-icon-left">
                <i class="pi pi-search"></i>
                <input type="text" id="lefticon" pInputText [(ngModel)]="value3">
                <label for="lefticon">Left Icon</label>
            </span>
        </div>
        <div class="field col-12 md:col-4">
            <span class="p-float-label p-input-icon-right">
                <input type="text" id="righticon" pInputText [(ngModel)]="value4">
                <label for="righticon">Right Icon</label>
                <i class="pi pi-spin pi-spinner"></i>
            </span>
        </div>
        <div class="field col-12 md:col-4">
            <span class="p-float-label">
                <p-calendar inputId="calendar" [(ngModel)]="value5"></p-calendar>
                <label for="calendar">Calendar</label>
            </span>
        </div>
        <div class="field col-12 md:col-4">
            <span class="p-float-label">
                <p-chips inputId="chips" [(ngModel)]="value6"></p-chips>
                <label for="chips">Chips</label>
            </span>
        </div>
        <div class="field col-12 md:col-4">
            <span class="p-float-label">
                <p-inputMask inputId="inputmask" mask="99/99/9999" [(ngModel)]="value7"></p-inputMask>
                <label for="inputmask">InputMask</label>
            </span>
        </div>
        <div class="field col-12 md:col-4">
            <span class="p-float-label">
                <p-inputNumber inputId="inputnumber" [(ngModel)]="value8"></p-inputNumber>
                <label for="inputnumber">InputNumber</label>
            </span>
        </div>
        <div class="field col-12 md:col-4">
            <p-inputGroup>
                <p-inputGroupAddon>
                    <i class="pi pi-user"></i>
                </p-inputGroupAddon>
                <span class="p-float-label">
                    <input
                        type="text"
                        inputId="inputgroup"
                        pInputText
                        [(ngModel)]="value9"
                    />
                    <label for="inputgroup">InputGroup</label>
                </span>
            </p-inputGroup>
        </div>
        <div class="field col-12 md:col-4">
            <span class="p-float-label">
                <p-dropdown inputId="dropdown" [autoDisplayFirst]="false" [options]="cities" [(ngModel)]="value10" optionLabel="name"></p-dropdown>
                <label for="dropdown">Dropdown</label>
            </span>
        </div>
        <div class="field col-12 md:col-4">
            <span class="p-float-label">
                <p-multiSelect inputId="multiselect" [options]="cities" [(ngModel)]="value11" optionLabel="name" [filter]="false"></p-multiSelect>
                <label for="multiselect">MultiSelect</label>
            </span>
        </div>
        <div class="field col-12 md:col-4">
            <span class="p-float-label">
                <textarea inputId="textarea" rows="3" cols="30" [(ngModel)]="value12" pInputTextarea></textarea>
                <label for="textarea">Textarea</label>
            </span>
        </div>
    </div>
</div>

================
File: src/app/demo/components/uikit/floatlabel/floatlabeldemo.component.ts
================
import { Component, OnInit } from '@angular/core';
import { CountryService } from 'src/app/demo/service/country.service';

@Component({
    templateUrl: './floatlabeldemo.component.html',
})
export class FloatLabelDemoComponent implements OnInit {

    countries: any[] = [];

    cities: any[];

    filteredCountries: any[] = [];

    value1: any;

    value2: any;

    value3: any;

    value4: any;

    value5: any;

    value6: any;

    value7: any;

    value8: any;

    value9: any;

    value10: any;

    value11: any;

    value12: any;

    constructor(private countryService: CountryService) {
        this.cities = [
            {name: 'New York', code: 'NY'},
            {name: 'Rome', code: 'RM'},
            {name: 'London', code: 'LDN'},
            {name: 'Istanbul', code: 'IST'},
            {name: 'Paris', code: 'PRS'}
        ];
    }

    ngOnInit() {
        this.countryService.getCountries().then(countries => {
            this.countries = countries;
        });
    }

    searchCountry(event: any) {
        // in a real application, make a request to a remote url with the query and
        // return filtered results, for demo we filter at client side
        const filtered: any[] = [];
        const query = event.query;
        // tslint:disable-next-line:prefer-for-of
        for (let i = 0; i < this.countries.length; i++) {
            const country = this.countries[i];
            if (country.name.toLowerCase().indexOf(query.toLowerCase()) == 0) {
                filtered.push(country);
            }
        }

        this.filteredCountries = filtered;
    }
}

================
File: src/app/demo/components/uikit/floatlabel/floatlabeldemo.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { FloatLabelDemoComponent } from './floatlabeldemo.component';
import { FloatlabelDemoRoutingModule } from './floatlabeldemo-routing.module';
import { AutoCompleteModule } from 'primeng/autocomplete';
import { CalendarModule } from 'primeng/calendar';
import { ChipsModule } from 'primeng/chips';
import { DropdownModule } from 'primeng/dropdown';
import { InputMaskModule } from 'primeng/inputmask';
import { InputNumberModule } from 'primeng/inputnumber';
import { CascadeSelectModule } from 'primeng/cascadeselect';
import { MultiSelectModule } from 'primeng/multiselect';
import { InputTextareaModule } from 'primeng/inputtextarea';
import { InputTextModule } from 'primeng/inputtext';
import { InputGroupModule } from 'primeng/inputgroup';
import { InputGroupAddonModule } from 'primeng/inputgroupaddon';

@NgModule({
    imports: [
        CommonModule,
        FormsModule,
        FloatlabelDemoRoutingModule,
        AutoCompleteModule,
        CalendarModule,
        ChipsModule,
        DropdownModule,
        InputMaskModule,
        InputNumberModule,
        CascadeSelectModule,
        MultiSelectModule,
        InputTextareaModule,
        InputTextModule,
        InputGroupModule,
        InputGroupAddonModule,
    ],
    declarations: [FloatLabelDemoComponent],
})
export class FloatlabelDemoModule {}

================
File: src/app/demo/components/uikit/formlayout/formlayoutdemo-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { FormLayoutDemoComponent } from './formlayoutdemo.component';

@NgModule({
	imports: [RouterModule.forChild([
		{ path: '', component: FormLayoutDemoComponent }
	])],
	exports: [RouterModule]
})
export class FormLayoutDemoRoutingModule { }

================
File: src/app/demo/components/uikit/formlayout/formlayoutdemo.component.html
================
<div class="grid">
	<div class="col-12 md:col-6">
		<div class="card p-fluid">
			<h5>Vertical</h5>
			<div class="field">
				<label htmlFor="name1">Name</label>
				<input pInputText id="name1" type="text" />
			</div>
			<div class="field">
				<label htmlFor="email1">Email</label>
				<input pInputText id="email1" type="text" />
			</div>
			<div class="field">
				<label htmlFor="age1">Age</label>
				<input pInputText id="age1" type="text" />
			</div>
		</div>
		
		<div class="card p-fluid">
			<h5>Vertical Grid</h5>
			<div class="p-formgrid grid">
				<div class="field col">
					<label htmlFor="name2">Name</label>
					<input pInputText id="name2" type="text" />
				</div>
				<div class="field col">
					<label htmlFor="email2">Email</label>
					<input pInputText id="email2" type="text" />
				</div>
			</div>
		</div>
	</div>

	<div class="col-12 md:col-6">
		<div class="card p-fluid">
			<h5>Horizontal</h5>
			<div class="field grid">
				<label htmlFor="name3" class="col-12 mb-2 md:col-2 md:mb-0">Name</label>
				<div class="col-12 md:col-10">
					<input pInputText id="name3" type="text" />
				</div>
			</div>
			<div class="field grid">
				<label htmlFor="email3" class="col-12 mb-2 md:col-2 md:mb-0">Email</label>
				<div class="col-12 md:col-10">
					<input pInputText id="email3" type="text" />
				</div>
			</div>
		</div>

		<div class="card">
			<h5>Inline</h5>
			<div class="formgroup-inline">
				<div class="field">
					<label htmlFor="firstname1" class="p-sr-only">Firstname</label>
					<input pInputText id="firstname1" type="text" placeholder="Firstname" />
				</div>
				<div class="field">
					<label htmlFor="lastname1" class="p-sr-only">Lastname</label>
					<input pInputText id="lastname1" type="text" placeholder="Lastname" />
				</div>
				<button pButton label="Submit"></button>
			</div>
		</div>

		<div class="card">
			<h5>Help Text</h5>
			<div class="field p-fluid">
				<label htmlFor="username">Username</label>
				<input pInputText id="username" type="text" />
				<small>Enter your username to reset your password.</small>
			</div>
		</div>
	</div>

	<div class="col-12">
		<div class="card">
			<h5>Advanced</h5>
			<div class="p-fluid p-formgrid grid">
				<div class="field col-12 md:col-6">
					<label htmlFor="firstname2">Firstname</label>
					<input pInputText id="firstname2" type="text" />
				</div>
				<div class="field col-12 md:col-6">
					<label htmlFor="lastname2">Lastname</label>
					<input pInputText id="lastname2" type="text" />
				</div>
				<div class="field col-12">
					<label htmlFor="address">Address</label>
					<input pInputTextarea id="address" rows="4" />
				</div>
				<div class="field col-12 md:col-6">
					<label htmlFor="city">City</label>
					<input pInputText id="city" type="text" />
				</div>
				<div class="field col-12 md:col-3">
					<label htmlFor="state">State</label>
					<p-dropdown [options]="dropdownItems" optionLabel="name" [(ngModel)]="selectedState"></p-dropdown>
				</div>
				<div class="field col-12 md:col-3">
					<label htmlFor="zip">Zip</label>
					<input pInputText id="zip" type="text" />
				</div>
			</div>
		</div>
	</div>
</div>

================
File: src/app/demo/components/uikit/formlayout/formlayoutdemo.component.ts
================
import { Component } from '@angular/core';

@Component({
    templateUrl: './formlayoutdemo.component.html'
})
export class FormLayoutDemoComponent {

    selectedState: any = null;

    states: any[] = [
        {name: 'Arizona', code: 'Arizona'},
        {name: 'California', value: 'California'},
        {name: 'Florida', code: 'Florida'},
        {name: 'Ohio', code: 'Ohio'},
        {name: 'Washington', code: 'Washington'}
    ];

    dropdownItems = [
        { name: 'Option 1', code: 'Option 1' },
        { name: 'Option 2', code: 'Option 2' },
        { name: 'Option 3', code: 'Option 3' }
    ];

    cities1: any[] = [];

    cities2: any[] = [];

    city1: any = null;

    city2: any = null;

}

================
File: src/app/demo/components/uikit/formlayout/formlayoutdemo.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { FormLayoutDemoComponent } from './formlayoutdemo.component';
import { FormLayoutDemoRoutingModule } from './formlayoutdemo-routing.module';
import { AutoCompleteModule } from "primeng/autocomplete";
import { CalendarModule } from "primeng/calendar";
import { ChipsModule } from "primeng/chips";
import { DropdownModule } from "primeng/dropdown";
import { InputMaskModule } from "primeng/inputmask";
import { InputNumberModule } from "primeng/inputnumber";
import { CascadeSelectModule } from "primeng/cascadeselect";
import { MultiSelectModule } from "primeng/multiselect";
import { InputTextareaModule } from "primeng/inputtextarea";
import { InputTextModule } from "primeng/inputtext";

@NgModule({
	imports: [
		CommonModule,
		FormsModule,
		FormLayoutDemoRoutingModule,
		AutoCompleteModule,
		CalendarModule,
		ChipsModule,
		DropdownModule,
		InputMaskModule,
		InputNumberModule,
		CascadeSelectModule,
		MultiSelectModule,
		InputTextareaModule,
		InputTextModule
	],
	declarations: [FormLayoutDemoComponent]
})
export class FormLayoutDemoModule { }

================
File: src/app/demo/components/uikit/input/inputdemo-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { InputDemoComponent } from './inputdemo.component';

@NgModule({
	imports: [RouterModule.forChild([
		{ path: '', component: InputDemoComponent }
	])],
	exports: [RouterModule]
})
export class InputDemoRoutingModule { }

================
File: src/app/demo/components/uikit/input/inputdemo.component.html
================
<div class="grid p-fluid">
    <div class="col-12 md:col-6">
        <div class="card">
            <h5>InputText</h5>
            <div class="grid formgrid">
                <div class="col-12 mb-2 lg:col-4 lg:mb-0">
                    <input type="text" pInputText placeholder="Default">
                </div>
                <div class="col-12 mb-2 lg:col-4 lg:mb-0">
                    <input type="text" pInputText placeholder="Disabled" [disabled]="true" />
                </div>
                <div class="col-12 mb-2 lg:col-4 lg:mb-0">
                    <input type="text" pInputText placeholder="Invalid" class="ng-dirty ng-invalid" />
                </div>
            </div>

            <h5>Icons</h5>
            <div class="grid formgrid">
                <div class="col-12 mb-2 lg:col-4 lg:mb-0">
                    <span class="p-input-icon-left">
                        <i class="pi pi-user"></i>
                        <input type="text" pInputText placeholder="Username" />
                    </span>
                </div>
                <div class="col-12 mb-2 lg:col-4 lg:mb-0">
                    <span class="p-input-icon-right">
                        <input type="text" pInputText placeholder="Search" />
                        <i class="pi pi-search"></i>
                    </span>
                </div>
                <div class="col-12 mb-2 lg:col-4 lg:mb-0">
                    <span class="p-input-icon-left p-input-icon-right">
                        <i class="pi pi-user"></i>
                        <input type="text" pInputText placeholder="Search" />
                        <i class="pi pi-search"></i>
                    </span>
                </div>
            </div>

            <h5>Float Label</h5>
            <span class="p-float-label">
                <input id="float-input" type="text" pInputText>
                <label for="float-input">Username</label>
            </span>

            <h5>Textarea</h5>
            <textarea rows="5" cols="30" placeholder="Your Message" pInputTextarea></textarea>

            <h5>AutoComplete</h5>
            <p-autoComplete [(ngModel)]="selectedCountryAdvanced" [suggestions]="filteredCountries"
                (completeMethod)="filterCountry($event)" field="name" [dropdown]="true">
            </p-autoComplete>

            <h5>Calendar</h5>
            <p-calendar [showIcon]="true" inputId="icon"></p-calendar>

            <h5>InputNumber</h5>
            <p-inputNumber mode="decimal" [showButtons]="true" [min]="0" [max]="100">
            </p-inputNumber>

            <h5>Chips</h5>
            <p-chips></p-chips>
        </div>

        <div class="card">
            <div class="grid">
                <div class="col-12">
                    <h5>Slider</h5>
                    <input type="text" pInputText [(ngModel)]="valSlider" readonly />
                    <p-slider [(ngModel)]="valSlider"></p-slider>
                </div>
                <div class="col-12 md:col-6">
                    <h5>Rating</h5>
                    <p-rating></p-rating>
                </div>
                <div class="col-12 md:col-6">
                    <h5>ColorPicker</h5>
                    <p-colorPicker [(ngModel)]="valColor" [style]="{'width': '2rem'}"></p-colorPicker>
                </div>
                <div class="col-12">
                    <h5>Knob</h5>
                    <p-knob [(ngModel)]="valueKnob" valueTemplate="{value}%" [step]="10" [min]="-50"
                        [max]="50"></p-knob>
                </div>
            </div>
        </div>
    </div>

    <div class="col-12 md:col-6">
        <div class="card">
            <h5>RadioButton</h5>
            <div class="grid formgrid">
                <div class="col-12 md:col-4">
                    <div class="field-radiobutton">
                        <p-radioButton name="city" value="Chicago" [(ngModel)]="valRadio" id="city1"></p-radioButton>
                        <label for="city1">Chicago</label>
                    </div>
                </div>
                <div class="col-12 md:col-4">
                    <div class="field-radiobutton">
                        <p-radioButton name="city" value="Los Angeles" [(ngModel)]="valRadio"
                            id="city2"></p-radioButton>
                        <label for="city2">Los Angeles</label>
                    </div>
                </div>
                <div class="col-12 md:col-4">
                    <div class="field-radiobutton">
                        <p-radioButton name="city" value="New York" [(ngModel)]="valRadio" id="city3"></p-radioButton>
                        <label for="city3">New York</label>
                    </div>
                </div>
            </div>

            <h5>Checkbox</h5>
            <div class="grid formgrid">
                <div class="col-12 md:col-4">
                    <div class="field-checkbox">
                        <p-checkbox name="group1" value="New York" [(ngModel)]="valCheck" id="ny"></p-checkbox>
                        <label for="ny">New York</label>
                    </div>
                </div>
                <div class="col-12 md:col-4">
                    <div class="field-checkbox">
                        <p-checkbox name="group1" value="San Francisco" [(ngModel)]="valCheck" id="sf"></p-checkbox>
                        <label for="sf">San Francisco</label>
                    </div>
                </div>
                <div class="col-12 md:col-4">
                    <div class="field-checkbox">
                        <p-checkbox name="group1" value="Los Angeles" [(ngModel)]="valCheck" id="la"></p-checkbox>
                        <label for="la">Los Angeles</label>
                    </div>
                </div>
            </div>

            <h5>Input Switch</h5>
            <p-inputSwitch [(ngModel)]="valSwitch"></p-inputSwitch>
        </div>

        <div class="card">
            <h5>Listbox</h5>
            <p-listbox [options]="cities" [(ngModel)]="selectedList" [filter]="true"></p-listbox>

            <h5>Dropdown</h5>
            <p-dropdown [options]="cities" [(ngModel)]="selectedDrop" placeholder="Select a City"
                [showClear]="true"></p-dropdown>

            <h5>Multiselect</h5>
            <p-multiSelect [options]="countries" [(ngModel)]="selectedMulti" placeholder="Select a Country"
                optionLabel="name" class="multiselect-custom" display="chip">
                <ng-template let-country pTemplate="item">
                    <div class="flex align-items-center">
                        <img src="assets/demo/images/flag/flag_placeholder.png"
                            [class]="'flag flag-' + country.code.toLowerCase()" style="width:21px" />
                        <span class="ml-2">{{country.name}}</span>
                    </div>
                </ng-template>
            </p-multiSelect>
        </div>

        <div class="card">
            <h5>ToggleButton</h5>
            <p-toggleButton [(ngModel)]="valToggle" onLabel="Yes" offLabel="No"
                [style]="{'width': '10em'}"></p-toggleButton>

            <h5>SelectOneButton</h5>
            <p-selectButton [options]="paymentOptions" [(ngModel)]="valSelect1" optionLabel="name"></p-selectButton>

            <h5>SelectManyButton</h5>
            <p-selectButton [options]="paymentOptions" [(ngModel)]="valSelect2" [multiple]="true"
                optionLabel="name"></p-selectButton>
        </div>
    </div>

    <div class="col-12">
        <div class="card">
            <h5>InputGroup</h5>
            <div class="grid">
                <div class="col-12 md:col-6">
                    <p-inputGroup>
                        <p-inputGroupAddon>
                            <i class="pi pi-user"></i>
                        </p-inputGroupAddon>
                        <input pInputText type="text" placeholder="Username" />
                    </p-inputGroup>
                </div>
                <div class="col-12 md:col-6">
                    <p-inputGroup class="w-full">
                        <p-inputGroupAddon>
                            <i class="pi pi-tags" style="line-height: 1.25"></i>
                        </p-inputGroupAddon>

                        <p-inputGroupAddon>
                            <i class="pi pi-shopping-cart" style="line-height: 1.25"></i>
                        </p-inputGroupAddon>

                        <input type="text" pInputText placeholder="Price" />
                        <p-inputGroupAddon>$</p-inputGroupAddon>
                        <p-inputGroupAddon>.00</p-inputGroupAddon>
                    </p-inputGroup>
                </div>
                <div class="col-12 md:col-6">
                    <p-inputGroup>
                        <button type="button" pButton label="Search"></button>
                        <input type="text" pInputText placeholder="Keyword" />
                    </p-inputGroup>
                </div>
                <div class="col-12 md:col-6">
                    <p-inputGroup>
                        <p-inputGroupAddon><p-checkbox [(ngModel)]="valCheck2"
                                [binary]="true"></p-checkbox></p-inputGroupAddon>
                        <input type="text" pInputText placeholder="Username" />
                    </p-inputGroup>
                </div>
            </div>
        </div>
    </div>
</div>

================
File: src/app/demo/components/uikit/input/inputdemo.component.ts
================
import { Component, OnInit } from '@angular/core';
import { SelectItem } from 'primeng/api';
import { CountryService } from 'src/app/demo/service/country.service';

@Component({
    templateUrl: './inputdemo.component.html'
})
export class InputDemoComponent implements OnInit {
    
    countries: any[] = [];

    filteredCountries: any[] = [];

    selectedCountryAdvanced: any[] = [];

    valSlider = 50;

    valColor = '#424242';

    valRadio: string = '';

    valCheck: string[] = [];

    valCheck2: boolean = false;

    valSwitch: boolean = false;

    cities: SelectItem[] = [];

    selectedList: SelectItem = { value: '' };

    selectedDrop: SelectItem = { value: '' };

    selectedMulti: any[] = [];

    valToggle = false;

    paymentOptions: any[] = [];

    valSelect1: string = "";

    valSelect2: string = "";

    valueKnob = 20;

    constructor(private countryService: CountryService) { }

    ngOnInit() {
        this.countryService.getCountries().then(countries => {
            this.countries = countries;
        });

        this.cities = [
            { label: 'New York', value: { id: 1, name: 'New York', code: 'NY' } },
            { label: 'Rome', value: { id: 2, name: 'Rome', code: 'RM' } },
            { label: 'London', value: { id: 3, name: 'London', code: 'LDN' } },
            { label: 'Istanbul', value: { id: 4, name: 'Istanbul', code: 'IST' } },
            { label: 'Paris', value: { id: 5, name: 'Paris', code: 'PRS' } }
        ];

        this.paymentOptions = [
            { name: 'Option 1', value: 1 },
            { name: 'Option 2', value: 2 },
            { name: 'Option 3', value: 3 }
        ];
    }

    filterCountry(event: any) {
        const filtered: any[] = [];
        const query = event.query;
        for (let i = 0; i < this.countries.length; i++) {
            const country = this.countries[i];
            if (country.name.toLowerCase().indexOf(query.toLowerCase()) == 0) {
                filtered.push(country);
            }
        }

        this.filteredCountries = filtered;
    }
}

================
File: src/app/demo/components/uikit/input/inputdemo.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { InputDemoComponent } from './inputdemo.component';
import { InputDemoRoutingModule } from './inputdemo-routing.module';
import { AutoCompleteModule } from 'primeng/autocomplete';
import { CalendarModule } from 'primeng/calendar';
import { ChipsModule } from 'primeng/chips';
import { ChipModule } from 'primeng/chip';
import { DropdownModule } from 'primeng/dropdown';
import { InputMaskModule } from 'primeng/inputmask';
import { InputNumberModule } from 'primeng/inputnumber';
import { CascadeSelectModule } from 'primeng/cascadeselect';
import { MultiSelectModule } from 'primeng/multiselect';
import { InputTextareaModule } from 'primeng/inputtextarea';
import { InputTextModule } from 'primeng/inputtext';
import { RatingModule } from 'primeng/rating';
import { KnobModule } from 'primeng/knob';
import { ListboxModule } from 'primeng/listbox';
import { SelectButtonModule } from 'primeng/selectbutton';
import { CheckboxModule } from 'primeng/checkbox';
import { ButtonModule } from 'primeng/button';
import { InputSwitchModule } from 'primeng/inputswitch';
import { RadioButtonModule } from 'primeng/radiobutton';
import { ColorPickerModule } from 'primeng/colorpicker';
import { ToggleButtonModule } from 'primeng/togglebutton';
import { SliderModule } from 'primeng/slider';
import { InputGroupModule } from 'primeng/inputgroup';
import { InputGroupAddonModule } from 'primeng/inputgroupaddon';

@NgModule({
    imports: [
        CommonModule,
        FormsModule,
        InputDemoRoutingModule,
        AutoCompleteModule,
        CalendarModule,
        ChipsModule,
        DropdownModule,
        InputMaskModule,
        InputNumberModule,
        ColorPickerModule,
        CascadeSelectModule,
        MultiSelectModule,
        ToggleButtonModule,
        SliderModule,
        InputTextareaModule,
        RadioButtonModule,
        InputTextModule,
        RatingModule,
        ChipModule,
        KnobModule,
        InputSwitchModule,
        ListboxModule,
        SelectButtonModule,
        CheckboxModule,
        ButtonModule,
        InputGroupModule,
        InputGroupAddonModule,
    ],
    declarations: [InputDemoComponent],
})
export class InputDemoModule {}

================
File: src/app/demo/components/uikit/invalid/invalidstatedemo-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { InvalidStateDemoComponent } from './invalidstatedemo.component';

@NgModule({
	imports: [RouterModule.forChild([
		{ path: '', component: InvalidStateDemoComponent }
	])],
	exports: [RouterModule]
})
export class InvalidStateDemoRoutingModule { }

================
File: src/app/demo/components/uikit/invalid/invalidstatedemo.component.html
================
<div class="card">
    <h5>Invalid State</h5>
    <p>All form components have an invalid state style to display the validation errors when ng-invalid ng-dirty combination is applied by Angular.</p>
    <div class="grid p-fluid">
        <div class="col-12 md:col-6">
            <div class="field mt-3">
                <label for="inputtext">InputText</label>
                <input type="text" id="inputtext" pInputText class="ng-invalid ng-dirty">
            </div>
            <div class="field">
                <label for="autocomplete">AutoComplete</label>
                <p-autoComplete inputId="autocomplete" [(ngModel)]="value1" [suggestions]="filteredCountries" (completeMethod)="searchCountry($event)" field="name" class="ng-invalid ng-dirty"></p-autoComplete>

            </div>
            <div class="field">
                <label for="calendar">Calendar</label>
                <p-calendar inputId="calendar" [(ngModel)]="value2" class="ng-invalid ng-dirty" [showIcon]="true"></p-calendar>
            </div>
            <div class="field">
                <label for="chips">Chips</label>
                <p-chips inputId="chips" [(ngModel)]="value3" class="ng-invalid ng-dirty"></p-chips>
            </div>
            <div class="field">
                <label for="password">Password</label>
                <p-password [(ngModel)]="value8" class="ng-invalid ng-dirty"></p-password>
            </div>
        </div>
        
        <div class="col-12 md:col-6">                    
            <div class="field mt-3">
                <label for="inputmask">InputMask</label>
                <p-inputMask inputId="inputmask" mask="99/99/9999" [(ngModel)]="value5" class="ng-invalid ng-dirty"></p-inputMask>
            </div>
            <div class="field">
                <label for="inputnumber">InputNumber</label>
                <p-inputNumber inputId="inputnumber" [(ngModel)]="value6" class="ng-invalid ng-dirty"></p-inputNumber>
            </div>
            <div class="field">
                <label for="dropdown">Dropdown</label>
                <p-dropdown inputId="dropdown" [autoDisplayFirst]="false" [options]="cities" [(ngModel)]="value9" optionLabel="name" class="ng-invalid ng-dirty"></p-dropdown>
            </div>
            <div class="field">
                <label for="multiselect">MultiSelect</label>
                <p-multiSelect inputId="multiselect" [options]="cities" [(ngModel)]="value10" optionLabel="name" [filter]="false" class="ng-invalid ng-dirty"></p-multiSelect>
            </div>
            <div class="field">
                <label for="textarea">Textarea</label>
                <textarea inputId="textarea" rows="3" cols="30" [(ngModel)]="value4" pInputTextarea class="ng-invalid ng-dirty"></textarea>
            </div>
        </div>
    </div>
</div>

================
File: src/app/demo/components/uikit/invalid/invalidstatedemo.component.ts
================
import { Component, OnInit } from '@angular/core';
import { CountryService } from 'src/app/demo/service/country.service';

@Component({
    templateUrl: './invalidstatedemo.component.html'
})
export class InvalidStateDemoComponent implements OnInit {

    countries: any[] = [];

    cities: any[];

    filteredCountries: any[] = [];

    value1: any;

    value2: any;

    value3: any;

    value4: any;

    value5: any;

    value6: any;

    value7: any;

    value8: any;

    value9: any;

    value10: any;

    constructor(private countryService: CountryService) {
        this.cities = [
            { name: 'New York', code: 'NY' },
            { name: 'Rome', code: 'RM' },
            { name: 'London', code: 'LDN' },
            { name: 'Istanbul', code: 'IST' },
            { name: 'Paris', code: 'PRS' }
        ];
    }

    ngOnInit() {
        this.countryService.getCountries().then(countries => {
            this.countries = countries;
        });
    }

    searchCountry(event: any) {
        // in a real application, make a request to a remote url with the query and return filtered results,
        // for demo we filter at client side
        const filtered: any[] = [];
        const query = event.query;
        for (let i = 0; i < this.countries.length; i++) {
            const country = this.countries[i];
            if (country.name.toLowerCase().indexOf(query.toLowerCase()) == 0) {
                filtered.push(country);
            }
        }

        this.filteredCountries = filtered;
    }
    
}

================
File: src/app/demo/components/uikit/invalid/invalidstatedemo.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { InvalidStateDemoComponent } from './invalidstatedemo.component';
import { InvalidStateDemoRoutingModule } from './invalidstatedemo-routing.module';
import { AutoCompleteModule } from "primeng/autocomplete";
import { CalendarModule } from "primeng/calendar";
import { ChipsModule } from "primeng/chips";
import { DropdownModule } from "primeng/dropdown";
import { InputMaskModule } from "primeng/inputmask";
import { InputNumberModule } from "primeng/inputnumber";
import { CascadeSelectModule } from "primeng/cascadeselect";
import { MultiSelectModule } from "primeng/multiselect";
import { InputTextareaModule } from "primeng/inputtextarea";
import { InputTextModule } from "primeng/inputtext";
import { PasswordModule } from "primeng/password";

@NgModule({
	imports: [
		CommonModule,
		FormsModule,
		InvalidStateDemoRoutingModule,
		AutoCompleteModule,
		CalendarModule,
		ChipsModule,
		DropdownModule,
		InputMaskModule,
		InputNumberModule,
		CascadeSelectModule,
		MultiSelectModule,
		PasswordModule,
		InputTextareaModule,
		InputTextModule
	],
	declarations: [InvalidStateDemoComponent]
})
export class InvalidStateDemoModule { }

================
File: src/app/demo/components/uikit/list/listdemo-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { ListDemoComponent } from './listdemo.component';

@NgModule({
	imports: [RouterModule.forChild([
		{ path: '', component: ListDemoComponent }
	])],
	exports: [RouterModule]
})
export class ListDemoRoutingModule { }

================
File: src/app/demo/components/uikit/list/listdemo.component.html
================
<div class="grid">
	<div class="col-12">
		<div class="card">
			<h5>DataView</h5>
			<p-dataView #dv [value]="products" [paginator]="true" [rows]="9" filterBy="name" [sortField]="sortField" [sortOrder]="sortOrder" layout="grid">
				<ng-template pTemplate="header">
					<div class="flex flex-column md:flex-row md:justify-content-between gap-2">
						<p-dropdown [options]="sortOptions" placeholder="Sort By Price" (onChange)="onSortChange($event)"></p-dropdown>
						<span class="p-input-icon-left">
                            <i class="pi pi-search"></i>
                            <input type="search" pInputText placeholder="Search by Name" (input)="onFilter(dv, $event)">
                        </span>	
						<p-dataViewLayoutOptions></p-dataViewLayoutOptions>
					</div>
				</ng-template>

				<ng-template let-products pTemplate="listItem">
                    <div class="grid grid-nogutter">
                        <div class="col-12" *ngFor="let product of products">
                            <div class="flex flex-column md:flex-row align-items-center p-3 w-full">
                                <img [src]="'assets/demo/images/product/' + product.image" [alt]="product.name" class="my-4 md:my-0 w-9 md:w-10rem shadow-2 mr-5"/>
                                <div class="flex-1 flex flex-column align-items-center text-center md:text-left">
                                    <div class="font-bold text-2xl">{{product.name}}</div>
                                    <div class="mb-2">{{product.description}}</div>
                                    <p-rating [ngModel]="product.rating" [readonly]="true" [cancel]="false" styleClass="mb-2"></p-rating>
                                    <div class="flex align-items-center mt-2">
                                        <i class="pi pi-tag mr-2"></i>
                                        <span class="font-semibold">{{product.category}}</span>
                                    </div>
                                </div>
                                <div class="flex flex-row md:flex-column justify-content-between w-full md:w-auto align-items-center md:align-items-end mt-5 md:mt-0">
                                    <span class="text-2xl font-semibold mb-2 align-self-center md:align-self-end">${{product.price}}</span>
                                    <p-button icon="pi pi-shopping-cart" label="Add to Cart" [disabled]="product.inventoryStatus === 'OUTOFSTOCK'" styleClass="mb-2 p-button-sm"></p-button>
                                    <span [class]="'product-badge status-' + product.inventoryStatus.toLowerCase()">{{product.inventoryStatus}}</span>
                                </div>
                            </div>
                        </div>
                    </div>
				</ng-template>

				<ng-template let-products pTemplate="gridItem">
                    <div class="grid grid-nogutter">
                        <div class="col-12 md:col-4" *ngFor="let product of products">
                            <div class="card m-3 border-1 surface-border">
                                <div class="flex flex-wrap gap-2 align-items-center justify-content-between mb-2">
                                    <div class="flex align-items-center">
                                        <i class="pi pi-tag mr-2"></i>
                                        <span class="font-semibold">{{product.category}}</span>
                                    </div>
                                    <span [class]="'product-badge status-' + product.inventoryStatus.toLowerCase()">{{product.inventoryStatus}}</span>
                                </div>
                                <div class="flex flex-column align-items-center text-center mb-3">
                                    <img [src]="'assets/demo/images/product/' + product.image" [alt]="product.name" class="w-9 shadow-2 my-3 mx-0"/>
                                    <div class="text-2xl font-bold">{{product.name}}</div>
                                    <div class="mb-3">{{product.description}}</div>
                                    <p-rating [ngModel]="product.rating" [readonly]="true" [cancel]="false"></p-rating>
                                </div>
                                <div class="flex align-items-center justify-content-between">
                                    <span class="text-2xl font-semibold">${{product.price}}</span>
                                    <p-button icon="pi pi-shopping-cart" [disabled]="product.inventoryStatus === 'OUTOFSTOCK'"></p-button>
                                </div>
                            </div>
                        </div>
                    </div>
				</ng-template>
			</p-dataView>
		</div>
	</div>

	<div class="col-12 xl:col-8">
		<div class="card">
			<h5>PickList</h5>
			<p-pickList [source]="sourceCities" [target]="targetCities" sourceHeader="From" targetHeader="To" [dragdrop]="true"
						[responsive]="true" [sourceStyle]="{'height':'250px'}" [targetStyle]="{'height':'250px'}">
				<ng-template let-city pTemplate="item">
					<div>{{city.name}}</div>
				</ng-template>
			</p-pickList>
		</div>
	</div>

	<div class="col-12 xl:col-4">
		<div class="card">
			<h5>OrderList</h5>
			<p-orderList [value]="orderCities" header="Cities" [dragdrop]="true" [listStyle]="{'height':'250px'}">
				<ng-template let-city pTemplate="item">
					<div>{{city.name}}</div>
				</ng-template>
			</p-orderList>
		</div>
	</div>
</div>

================
File: src/app/demo/components/uikit/list/listdemo.component.ts
================
import { Component, OnInit } from '@angular/core';
import { SelectItem } from 'primeng/api';
import { DataView } from 'primeng/dataview';
import { Product } from 'src/app/demo/api/product';
import { ProductService } from 'src/app/demo/service/product.service';

@Component({
    templateUrl: './listdemo.component.html'
})
export class ListDemoComponent implements OnInit {

    products: Product[] = [];

    sortOptions: SelectItem[] = [];

    sortOrder: number = 0;

    sortField: string = '';

    sourceCities: any[] = [];

    targetCities: any[] = [];

    orderCities: any[] = [];

    constructor(private productService: ProductService) { }

    ngOnInit() {
        this.productService.getProducts().then(data => this.products = data);

        this.sourceCities = [
            { name: 'San Francisco', code: 'SF' },
            { name: 'London', code: 'LDN' },
            { name: 'Paris', code: 'PRS' },
            { name: 'Istanbul', code: 'IST' },
            { name: 'Berlin', code: 'BRL' },
            { name: 'Barcelona', code: 'BRC' },
            { name: 'Rome', code: 'RM' }];

        this.targetCities = [];

        this.orderCities = [
            { name: 'San Francisco', code: 'SF' },
            { name: 'London', code: 'LDN' },
            { name: 'Paris', code: 'PRS' },
            { name: 'Istanbul', code: 'IST' },
            { name: 'Berlin', code: 'BRL' },
            { name: 'Barcelona', code: 'BRC' },
            { name: 'Rome', code: 'RM' }];

        this.sortOptions = [
            { label: 'Price High to Low', value: '!price' },
            { label: 'Price Low to High', value: 'price' }
        ];
    }

    onSortChange(event: any) {
        const value = event.value;

        if (value.indexOf('!') === 0) {
            this.sortOrder = -1;
            this.sortField = value.substring(1, value.length);
        } else {
            this.sortOrder = 1;
            this.sortField = value;
        }
    }

    onFilter(dv: DataView, event: Event) {
        dv.filter((event.target as HTMLInputElement).value);
    }
    
}

================
File: src/app/demo/components/uikit/list/listdemo.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ListDemoComponent } from './listdemo.component';
import { ListDemoRoutingModule } from './listdemo-routing.module';
import { DataViewModule } from 'primeng/dataview';
import { PickListModule } from 'primeng/picklist';
import { OrderListModule } from 'primeng/orderlist';
import { InputTextModule } from 'primeng/inputtext';
import { DropdownModule } from 'primeng/dropdown';
import { RatingModule } from 'primeng/rating';
import { ButtonModule } from 'primeng/button';

@NgModule({
	imports: [
		CommonModule,
		FormsModule,
		ListDemoRoutingModule,
		DataViewModule,
		PickListModule,
		OrderListModule,
		InputTextModule,
		DropdownModule,
		RatingModule,
		ButtonModule
	],
	declarations: [ListDemoComponent]
})
export class ListDemoModule { }

================
File: src/app/demo/components/uikit/media/mediademo-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { MediaDemoComponent } from './mediademo.component';

@NgModule({
	imports: [RouterModule.forChild([
		{ path: '', component: MediaDemoComponent }
	])],
	exports: [RouterModule]
})
export class MediaDemoRoutingModule { }

================
File: src/app/demo/components/uikit/media/mediademo.component.html
================
<div class="grid p-fluid">
    <div class="col-12">
        <div class="card">
            <h5>Carousel</h5>
            <p-carousel [value]="products" [numVisible]="3" [numScroll]="3" [circular]="false" [responsiveOptions]="carouselResponsiveOptions">
                <ng-template let-product pTemplate="item">
                        <div class="border-round m-2 text-center p-2" style="border: 1px solid var(--surface-d)">
                            <div class="my-5">
                                <img src="assets/demo/images/product/{{product.image}}" [alt]="product.name" class="shadow-4" width="50%"/>
                            </div>
                            <div>
                                <h5 class="mb-1">{{product.name}}</h5>
                                <h6 class="mt-0 mb-3">${{product.price}}</h6>
                                <span [class]="'product-badge status-'+product.inventoryStatus.toLowerCase()">{{product.inventoryStatus}}</span>
                                <div class="my-5">
                                    <button pButton pRipple icon="pi pi-search" class="mr-2 p-button-rounded"></button>
                                    <button pButton pRipple icon="pi pi-star-fill" class="mr-2 p-button-rounded p-button-success"></button>
                                    <button pButton pRipple icon="pi pi-cog" class="p-button-rounded p-button-info"></button>
                                </div>
                            </div>
                        </div>
                </ng-template>
            </p-carousel>
        </div>
    </div>

    <div class="col-12">
        <div class="card">
            <h5>Image</h5>
            <div class="flex justify-content-center">
                <p-image src="assets/demo/images/galleria/galleria10.jpg" alt="Image" width="250" [preview]="true"></p-image>
            </div>
        </div>
    </div>

    <div class="col-12">
        <div class="card">
            <h5>Galleria</h5>
            <p-galleria [value]="images" [responsiveOptions]="galleriaResponsiveOptions"
                        [containerStyle]="{'max-width': '800px', 'margin':'auto'}" [numVisible]="6" [circular]="true">
                <ng-template pTemplate="item" let-item>
                    <img [src]="item.itemImageSrc" style="width: 100%; display: block;"/>
                </ng-template>
                <ng-template pTemplate="thumbnail" let-item>
                    <div class="grid nogutter justify-center">
                        <img [src]="item.thumbnailImageSrc" style="display: block;"/>
                    </div>
                </ng-template>
            </p-galleria>
        </div>
    </div>
</div>

================
File: src/app/demo/components/uikit/media/mediademo.component.ts
================
import { Component, OnInit } from '@angular/core';
import { ProductService } from 'src/app/demo/service/product.service';
import { PhotoService } from 'src/app/demo/service/photo.service';
import { Product } from 'src/app/demo/api/product';

@Component({
    templateUrl: './mediademo.component.html'
})
export class MediaDemoComponent implements OnInit {

    products!: Product[];

    images!: any[];

    galleriaResponsiveOptions: any[] = [
        {
            breakpoint: '1024px',
            numVisible: 5
        },
        {
            breakpoint: '960px',
            numVisible: 4
        },
        {
            breakpoint: '768px',
            numVisible: 3
        },
        {
            breakpoint: '560px',
            numVisible: 1
        }
    ];

    carouselResponsiveOptions: any[] = [
        {
            breakpoint: '1024px',
            numVisible: 3,
            numScroll: 3
        },
        {
            breakpoint: '768px',
            numVisible: 2,
            numScroll: 2
        },
        {
            breakpoint: '560px',
            numVisible: 1,
            numScroll: 1
        }
    ];

    constructor(private productService: ProductService, private photoService: PhotoService) { }

    ngOnInit() {
        this.productService.getProductsSmall().then(products => {
            this.products = products;
        });

        this.photoService.getImages().then(images => {
            this.images = images;
        });
    }
    
}

================
File: src/app/demo/components/uikit/media/mediademo.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MediaDemoComponent } from './mediademo.component';
import { MediaDemoRoutingModule } from './mediademo-routing.module';
import { ButtonModule } from 'primeng/button';
import { ImageModule } from 'primeng/image';
import { GalleriaModule } from 'primeng/galleria';
import { CarouselModule } from 'primeng/carousel';

@NgModule({
	imports: [
		CommonModule,
		MediaDemoRoutingModule,
		ButtonModule,
		ImageModule,
		GalleriaModule,
		CarouselModule
	],
	declarations: [MediaDemoComponent]
})
export class MediaDemoModule { }

================
File: src/app/demo/components/uikit/menus/confirmation.component.ts
================
import { Component } from '@angular/core';

@Component({
  template: `
  <div class="flex flex-column align-items-center justify-content-center h-full py-5 px-3">
    <i class="pi pi-fw pi-check mr-2 text-2xl"></i>
    <p class="m-0 mt-5 text-center text-lg">Confirmation Component Content via Child Route</p>
  </div>
  `
})
export class ConfirmationComponent {

  constructor() { }
}

================
File: src/app/demo/components/uikit/menus/menus.component.html
================
<div class="grid p-fluid">
    <div class="col-12">
        <div class="card card-w-title">
            <h5>MenuBar</h5>
            <p-menubar [model]="tieredItems">
                <ng-template pTemplate="end">
                    <span class="p-input-icon-right">
                        <input type="text" pInputText placeholder="Search">
                        <i class="pi pi-search"></i>
                    </span>
                </ng-template>
            </p-menubar>
        </div>
    </div>

    <div class="col-12">
        <div class="card card-w-title">
            <h5>Breadcrumb</h5>
            <p-breadcrumb [model]="breadcrumbItems" [home]="{icon: 'pi pi-home'}"></p-breadcrumb>
        </div>
    </div>

    <div class="col-12">
        <div class="card card-w-title flex flex-wrap">
            <div class="col-12 md:col-8 h-full">
                <h5>TabMenu</h5>
                <p-tabMenu styleClass="mb-5" [model]="routeItems"></p-tabMenu>

                <h5>Steps</h5>
                <p-steps [model]="routeItems" styleClass="mt-5" [readonly]="false"></p-steps>
            </div>
            <div class="col-12 md:col-4 mt-5 md:mt-0">
                <router-outlet></router-outlet>
            </div>
        </div>
    </div>

    <div class="col-12 md:col-4">
        <div class="card card-w-title">
            <h5>TieredMenu</h5>
            <p-tieredMenu [model]="tieredItems"></p-tieredMenu>
        </div>
    </div>

    <div class="col-12 md:col-4">
        <div class="card card-w-title">
            <h5>Plain Menu</h5>
            <p-menu [model]="plainMenuItems"></p-menu>
        </div>
    </div>

    <div class="col-12 md:col-4">

        <div class="card card-w-title">
            <h5>Overlay Menu</h5>

            <p-menu #menu [popup]="true" [model]="menuItems"></p-menu>
            <button type="button" pButton icon="pi pi-chevron-down" label="Options" (click)="menu.toggle($event)" style="width:auto"></button>
        </div>

        <div class="card card-w-title" #anchor>
            <h5>ContextMenu</h5>
            Right click to display.
            <p-contextMenu [target]="anchor" [model]="menuItems"></p-contextMenu>
        </div>
    </div>

    <div class="col-12 md:col-6">
        <div class="card card-w-title">
            <h5>MegaMenu - Horizontal</h5>
            <p-megaMenu [model]="megaMenuItems"></p-megaMenu>

            <h5>MegaMenu - Vertical</h5>
            <p-megaMenu [model]="megaMenuItems" orientation="vertical" [style]="{'width':'200px'}"></p-megaMenu>
        </div>
    </div>

    <div class="col-12 md:col-6">
        <div class="card card-w-title">
            <h5>PanelMenu</h5>
            <p-panelMenu [model]="panelMenuItems"></p-panelMenu>
        </div>
    </div>
</div>

================
File: src/app/demo/components/uikit/menus/menus.component.ts
================
import { Component, OnInit } from '@angular/core';
import { MegaMenuItem, MenuItem } from 'primeng/api';

@Component({
    templateUrl: './menus.component.html',
    styles: [`
        :host ::ng-deep .p-menubar-root-list {
            flex-wrap: wrap;
        }
    `]
})
export class MenusComponent implements OnInit {

    breadcrumbItems: MenuItem[] = [];

    tieredItems: MenuItem[] = [];

    items: MenuItem[] = [];

    routeItems: MenuItem[] = [];

    megaMenuItems: MegaMenuItem[] = [];

    panelMenuItems: MenuItem[] = [];

    stepsItems: MenuItem[] = [];

    slideItems: MenuItem[] = [];

    menuItems: MenuItem[] = [];

    plainMenuItems: MenuItem[] = [];

    pageIndex: number = 0;

    ngOnInit() {
        this.tieredItems = [
            {
                label: 'Customers',
                icon: 'pi pi-fw pi-table',
                items: [
                    {
                        label: 'New',
                        icon: 'pi pi-fw pi-plus',
                        items: [
                            {
                                label: 'Customer',
                                icon: 'pi pi-fw pi-plus'
                            },
                            {
                                label: 'Duplicate',
                                icon: 'pi pi-fw pi-copy'
                            },

                        ]
                    },
                    {
                        label: 'Edit',
                        icon: 'pi pi-fw pi-user-edit'
                    }
                ]
            },
            {
                label: 'Orders',
                icon: 'pi pi-fw pi-shopping-cart',
                items: [
                    {
                        label: 'View',
                        icon: 'pi pi-fw pi-list'
                    },
                    {
                        label: 'Search',
                        icon: 'pi pi-fw pi-search'
                    }

                ]
            },
            {
                label: 'Shipments',
                icon: 'pi pi-fw pi-envelope',
                items: [
                    {
                        label: 'Tracker',
                        icon: 'pi pi-fw pi-compass',

                    },
                    {
                        label: 'Map',
                        icon: 'pi pi-fw pi-map-marker',

                    },
                    {
                        label: 'Manage',
                        icon: 'pi pi-fw pi-pencil'
                    }
                ]
            },
            {
                label: 'Profile',
                icon: 'pi pi-fw pi-user',
                items: [
                    {
                        label: 'Settings',
                        icon: 'pi pi-fw pi-cog'
                    },
                    {
                        label: 'Billing',
                        icon: 'pi pi-fw pi-file'
                    }
                ]
            },
            { separator: true },
            {
                label: 'Quit',
                icon: 'pi pi-fw pi-sign-out'
            }
        ];

        this.items = [
            {
                label: 'Customers',
                items: [
                    {
                        label: 'New',
                        icon: 'pi pi-fw pi-plus'
                    },
                    {
                        label: 'Edit',
                        icon: 'pi pi-fw pi-user-edit'
                    }
                ]
            },
            {
                label: 'Orders',
                items: [
                    {
                        label: 'View',
                        icon: 'pi pi-fw pi-list'
                    },
                    {
                        label: 'Search',
                        icon: 'pi pi-fw pi-search'
                    }

                ]
            },
            {
                label: 'Shipments',
                items: [
                    {
                        label: 'Tracker',
                        icon: 'pi pi-fw pi-compass',

                    },
                    {
                        label: 'Map',
                        icon: 'pi pi-fw pi-map-marker',

                    },
                    {
                        label: 'Manage',
                        icon: 'pi pi-fw pi-pencil'
                    }
                ]
            }
        ];

        this.menuItems = [
            {
                label: 'Save', icon: 'pi pi-fw pi-check'
            },
            {
                label: 'Update', icon: 'pi pi-fw pi-refresh'
            },
            {
                label: 'Delete', icon: 'pi pi-fw pi-trash'
            },
            {
                separator: true
            },
            {
                label: 'Home', icon: 'pi pi-fw pi-home'
            },
        ];

        this.slideItems = [
            {
                label: 'Customers',
                icon: 'pi pi-fw pi-table',
                items: [
                    {
                        label: 'New',
                        icon: 'pi pi-fw pi-plus'
                    },
                    {
                        label: 'Edit',
                        icon: 'pi pi-fw pi-user-edit'
                    }
                ]
            },
            {
                label: 'Orders',
                icon: 'pi pi-fw pi-shopping-cart',
                items: [
                    {
                        label: 'View',
                        icon: 'pi pi-fw pi-list'
                    },
                    {
                        label: 'Search',
                        icon: 'pi pi-fw pi-search'
                    }

                ]
            },
            {
                label: 'Shipments',
                icon: 'pi pi-fw pi-envelope',
                items: [
                    {
                        label: 'Tracker',
                        icon: 'pi pi-fw pi-compass',

                    },
                    {
                        label: 'Map',
                        icon: 'pi pi-fw pi-map-marker',

                    },
                    {
                        label: 'Manage',
                        icon: 'pi pi-fw pi-pencil'
                    }
                ]
            },
            {
                label: 'Profile',
                icon: 'pi pi-fw pi-user',
                items: [
                    {
                        label: 'Settings',
                        icon: 'pi pi-fw pi-cog'
                    },
                    {
                        label: 'Billing',
                        icon: 'pi pi-fw pi-file'
                    }
                ]
            }
        ];

        this.plainMenuItems = [
            {
                label: 'Customers',
                items: [
                    {
                        label: 'New',
                        icon: 'pi pi-fw pi-plus'
                    },
                    {
                        label: 'Edit',
                        icon: 'pi pi-fw pi-user-edit'
                    }
                ]
            },
            {
                label: 'Orders',
                items: [
                    {
                        label: 'View',
                        icon: 'pi pi-fw pi-list'
                    },
                    {
                        label: 'Search',
                        icon: 'pi pi-fw pi-search'
                    }

                ]
            }
        ];

        this.breadcrumbItems = [];
        this.breadcrumbItems.push({ label: 'Electronics' });
        this.breadcrumbItems.push({ label: 'Computer' });
        this.breadcrumbItems.push({ label: 'Notebook' });
        this.breadcrumbItems.push({ label: 'Accessories' });
        this.breadcrumbItems.push({ label: 'Backpacks' });
        this.breadcrumbItems.push({ label: 'Item' });

        this.routeItems = [
            { label: 'Personal', routerLink: 'personal' },
            { label: 'Seat', routerLink: 'seat' },
            { label: 'Payment', routerLink: 'payment' },
            { label: 'Confirmation', routerLink: 'confirmation' },
        ];

        this.megaMenuItems = [
            {
                label: 'Fashion', icon: 'pi pi-fw pi-tag',
                items: [
                    [
                        {
                            label: 'Women',
                            items: [{ label: 'Women Item' }, { label: 'Women Item' }, { label: 'Women Item' }]
                        },
                        {
                            label: 'Men',
                            items: [{ label: 'Men Item' }, { label: 'Men Item' }, { label: 'Men Item' }]
                        }
                    ],
                    [
                        {
                            label: 'Kids',
                            items: [{ label: 'Kids Item' }, { label: 'Kids Item' }]
                        },
                        {
                            label: 'Luggage',
                            items: [{ label: 'Luggage Item' }, { label: 'Luggage Item' }, { label: 'Luggage Item' }]
                        }
                    ]
                ]
            },
            {
                label: 'Electronics', icon: 'pi pi-fw pi-desktop',
                items: [
                    [
                        {
                            label: 'Computer',
                            items: [{ label: 'Computer Item' }, { label: 'Computer Item' }]
                        },
                        {
                            label: 'Camcorder',
                            items: [{ label: 'Camcorder Item' }, { label: 'Camcorder Item' }, { label: 'Camcorder Item' }]
                        }
                    ],
                    [
                        {
                            label: 'TV',
                            items: [{ label: 'TV Item' }, { label: 'TV Item' }]
                        },
                        {
                            label: 'Audio',
                            items: [{ label: 'Audio Item' }, { label: 'Audio Item' }, { label: 'Audio Item' }]
                        }
                    ],
                    [
                        {
                            label: 'Sports.7',
                            items: [{ label: 'Sports.7.1' }, { label: 'Sports.7.2' }]
                        }
                    ]
                ]
            },
            {
                label: 'Furniture', icon: 'pi pi-fw pi-image',
                items: [
                    [
                        {
                            label: 'Living Room',
                            items: [{ label: 'Living Room Item' }, { label: 'Living Room Item' }]
                        },
                        {
                            label: 'Kitchen',
                            items: [{ label: 'Kitchen Item' }, { label: 'Kitchen Item' }, { label: 'Kitchen Item' }]
                        }
                    ],
                    [
                        {
                            label: 'Bedroom',
                            items: [{ label: 'Bedroom Item' }, { label: 'Bedroom Item' }]
                        },
                        {
                            label: 'Outdoor',
                            items: [{ label: 'Outdoor Item' }, { label: 'Outdoor Item' }, { label: 'Outdoor Item' }]
                        }
                    ]
                ]
            },
            {
                label: 'Sports', icon: 'pi pi-fw pi-star',
                items: [
                    [
                        {
                            label: 'Basketball',
                            items: [{ label: 'Basketball Item' }, { label: 'Basketball Item' }]
                        },
                        {
                            label: 'Football',
                            items: [{ label: 'Football Item' }, { label: 'Football Item' }, { label: 'Football Item' }]
                        }
                    ],
                    [
                        {
                            label: 'Tennis',
                            items: [{ label: 'Tennis Item' }, { label: 'Tennis Item' }]
                        }
                    ]
                ]
            },
        ];

        this.panelMenuItems = [
            {
                label: 'Customers',
                items: [
                    {
                        label: 'New',
                        icon: 'pi pi-fw pi-plus',
                        items: [
                            {
                                label: 'Customer',
                                icon: 'pi pi-fw pi-plus'
                            },
                            {
                                label: 'Duplicate',
                                icon: 'pi pi-fw pi-copy'
                            },

                        ]
                    },
                    {
                        label: 'Edit',
                        icon: 'pi pi-fw pi-user-edit'
                    }
                ]
            },
            {
                label: 'Orders',
                items: [
                    {
                        label: 'View',
                        icon: 'pi pi-fw pi-list'
                    },
                    {
                        label: 'Search',
                        icon: 'pi pi-fw pi-search'
                    }

                ]
            },
            {
                label: 'Shipments',
                items: [
                    {
                        label: 'Tracker',
                        icon: 'pi pi-fw pi-compass',

                    },
                    {
                        label: 'Map',
                        icon: 'pi pi-fw pi-map-marker',

                    },
                    {
                        label: 'Manage',
                        icon: 'pi pi-fw pi-pencil'
                    }
                ]
            },
            {
                label: 'Profile',
                items: [
                    {
                        label: 'Settings',
                        icon: 'pi pi-fw pi-cog'
                    },
                    {
                        label: 'Billing',
                        icon: 'pi pi-fw pi-file'
                    }
                ]
            }
        ];
    }

}

================
File: src/app/demo/components/uikit/menus/menus.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { MenusComponent } from './menus.component';
import { PaymentComponent } from './payment.component';
import { SeatComponent } from './seat.component';
import { PersonalComponent } from './personal.component';
import { ConfirmationComponent } from './confirmation.component';
import { BreadcrumbModule } from 'primeng/breadcrumb';
import { MenubarModule } from 'primeng/menubar';
import { TabMenuModule } from 'primeng/tabmenu';
import { StepsModule } from 'primeng/steps';
import { TieredMenuModule } from 'primeng/tieredmenu';
import { MenuModule } from 'primeng/menu';
import { ButtonModule } from 'primeng/button';
import { ContextMenuModule } from 'primeng/contextmenu';
import { MegaMenuModule } from 'primeng/megamenu';
import { PanelMenuModule } from 'primeng/panelmenu';
import { InputTextModule } from 'primeng/inputtext';
@NgModule({
	imports: [
		CommonModule,
		BreadcrumbModule,
		MenubarModule,
		TabMenuModule,
		StepsModule,
		TieredMenuModule,
		MenuModule,
		ButtonModule,
		ContextMenuModule,
		MegaMenuModule,
		PanelMenuModule,
		InputTextModule,
		RouterModule.forChild([
			{
				path: '', component: MenusComponent, children: [
					{ path: '', redirectTo: 'personal', pathMatch: 'full' },
					{ path: 'personal', component: PersonalComponent },
					{ path: 'confirmation', component: ConfirmationComponent },
					{ path: 'seat', component: SeatComponent },
					{ path: 'payment', component: PaymentComponent }
				]
			}
		])
	],
	declarations: [MenusComponent],
	exports: [RouterModule]
})
export class MenusModule { }

================
File: src/app/demo/components/uikit/menus/payment.component.ts
================
import { Component } from '@angular/core';

@Component({
	template: `
		<div class="flex flex-column align-items-center justify-content-center h-full py-5 px-3">
		<i class="pi pi-fw pi-money-bill mr-2 text-2xl"></i>
		<p class="m-0 mt-5 text-center text-lg">Payment Component Content via Child Route</p>
		</div>
  	`
})
export class PaymentComponent {

	constructor() { }
}

================
File: src/app/demo/components/uikit/menus/personal.component.ts
================
import { Component } from '@angular/core';

@Component({
	template: `
		<div class="flex flex-column align-items-center justify-content-center h-full py-5 px-3">
			<i class="pi pi-fw pi-user mr-2 text-2xl"></i>
			<p class="mt-5 text-center text-lg">Personal Component Content via Child Route</p>
		</div>
  	`
})
export class PersonalComponent {

	constructor() { }
}

================
File: src/app/demo/components/uikit/menus/seat.component.ts
================
import { Component } from '@angular/core';

@Component({
	template: `
		<div class="flex flex-column align-items-center justify-content-center h-full py-5 px-3">
			<i class="pi pi-fw pi-ticket mr-2 text-2xl"></i>
			<p class="m-0 mt-5 text-center text-lg">Seat Component Content via Child Route</p>
		</div>
    `
})
export class SeatComponent {

	constructor() { }
}

================
File: src/app/demo/components/uikit/messages/messagesdemo-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { MessagesDemoComponent } from './messagesdemo.component';

@NgModule({
	imports: [RouterModule.forChild([
		{ path: '', component: MessagesDemoComponent }
	])],
	exports: [RouterModule]
})
export class MessagesDemoRoutingModule { }

================
File: src/app/demo/components/uikit/messages/messagesdemo.component.html
================
<div class="grid">
    <div class="col-12 lg:col-6">
        <div class="card">
            <h5>Toast</h5>
            <p-toast key="tst"></p-toast>
            <div class="flex flex-wrap gap-2">
                <button type="button" pButton (click)="showSuccessViaToast()" label="Success" class="p-button-success"></button>
                <button type="button" pButton (click)="showInfoViaToast()" label="Info" class="p-button-info"></button>
                <button type="button" pButton (click)="showWarnViaToast()" label="Warn" class="p-button-warning"></button>
                <button type="button" pButton (click)="showErrorViaToast()" label="Error" class="p-button-danger"></button>
            </div>
        </div>
    </div>

    <div class="col-12 lg:col-6">
        <div class="card z-3">
            <h5>Messages</h5>
            <div class="flex flex-wrap gap-2">
                <button type="button" pButton (click)="showSuccessViaMessages()" label="Success" class="p-button-success"></button>
                <button type="button" pButton (click)="showInfoViaMessages()" label="Info" class="p-button-info"></button>
                <button type="button" pButton (click)="showWarnViaMessages()" label="Warn" class="p-button-warning"></button>
                <button type="button" pButton (click)="showErrorViaMessages()" label="Error" class="p-button-danger"></button>
            </div>

            <p-messages [value]="msgs"></p-messages>
        </div>
    </div>

    <div class="col-12 lg:col-8">
        <div class="card">
            <h5>Inline</h5>
            <div class="flex align-items-center flex-wrap gap-2 mb-3">
                <label for="username" class="w-9rem">Username</label>
                <input id="username" type="text" #username pInputText placeholder="Username" class="ng-dirty ng-invalid">
                <p-message severity="error" text="Field is required"></p-message>
            </div>

            <div class="flex align-items-center flex-wrap gap-2">
                <label for="email" class="w-9rem">Email</label>
                <input type="text" #email pInputText placeholder="Email" label="email" class="ng-dirty ng-invalid">
                <p-message severity="error"></p-message>
            </div>
        </div>
    </div>

    <div class="col-12 lg:col-4">
        <div class="card">
            <h5>Help Text</h5>
            <div class="field p-fluid">
                <label for="username2">Username</label>
                <input id="username2" type="username" aria-describedby="username-help" class="ng-dirty ng-invalid" pInputText />
                <small id="username-help" class="p-error">Enter your username to reset your password.</small>
            </div>
        </div>
    </div>
</div>

================
File: src/app/demo/components/uikit/messages/messagesdemo.component.ts
================
import { Component } from '@angular/core';
import { Message, MessageService } from 'primeng/api';

@Component({
    templateUrl: './messagesdemo.component.html',
    providers: [MessageService]
})
export class MessagesDemoComponent {

    msgs: Message[] = [];

    constructor(private service: MessageService) { }

    showInfoViaToast() {
        this.service.add({ key: 'tst', severity: 'info', summary: 'Info Message', detail: 'PrimeNG rocks' });
    }

    showWarnViaToast() {
        this.service.add({ key: 'tst', severity: 'warn', summary: 'Warn Message', detail: 'There are unsaved changes' });
    }

    showErrorViaToast() {
        this.service.add({ key: 'tst', severity: 'error', summary: 'Error Message', detail: 'Validation failed' });
    }

    showSuccessViaToast() {
        this.service.add({ key: 'tst', severity: 'success', summary: 'Success Message', detail: 'Message sent' });
    }

    showInfoViaMessages() {
        this.msgs = [];
        this.msgs.push({ severity: 'info', summary: 'Info Message', detail: 'PrimeNG rocks' });
    }

    showWarnViaMessages() {
        this.msgs = [];
        this.msgs.push({ severity: 'warn', summary: 'Warn Message', detail: 'There are unsaved changes' });
    }

    showErrorViaMessages() {
        this.msgs = [];
        this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Validation failed' });
    }

    showSuccessViaMessages() {
        this.msgs = [];
        this.msgs.push({ severity: 'success', summary: 'Success Message', detail: 'Message sent' });
    }
    
}

================
File: src/app/demo/components/uikit/messages/messagesdemo.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MessagesDemoComponent } from './messagesdemo.component';
import { MessagesDemoRoutingModule } from './messagesdemo-routing.module';
import { MessagesModule } from 'primeng/messages';
import { MessageModule } from 'primeng/message';
import { ButtonModule } from 'primeng/button';
import { ToastModule } from 'primeng/toast';
import { InputTextModule } from 'primeng/inputtext';

@NgModule({
	imports: [
		CommonModule,
		MessagesDemoRoutingModule,
		MessagesModule,
		MessageModule,
		ButtonModule,
		ToastModule,
		InputTextModule
	],
	declarations: [MessagesDemoComponent]
})
export class MessagesDemoModule { }

================
File: src/app/demo/components/uikit/misc/miscdemo-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { MiscDemoComponent } from './miscdemo.component';

@NgModule({
	imports: [RouterModule.forChild([
		{ path: '', component: MiscDemoComponent }
	])],
	exports: [RouterModule]
})
export class MiscDemoRoutingModule { }

================
File: src/app/demo/components/uikit/misc/miscdemo.component.html
================
<div class="grid">
    <div class="col-12">
        <div class="card">
            <h5>ProgressBar</h5>
            <div class="grid">
                <div class="col">
                    <p-progressBar [value]="value" [showValue]="true"></p-progressBar>
                </div>
                <div class="col">
                    <p-progressBar [value]="50" [showValue]="false"></p-progressBar>
                </div>
            </div>
        </div>
    </div>
    <div class="col-12 lg:col-6">
        <div class="card">
            <h4>Badge</h4>
            <h5>Numbers</h5>
            <div class="flex flex-wrap gap-2">
                <p-badge value="2"></p-badge>
                <p-badge value="8" severity="success"></p-badge>
                <p-badge value="4" severity="info"></p-badge>
                <p-badge value="12" severity="warning"></p-badge>
                <p-badge value="3" severity="danger"></p-badge>
            </div>

            <h5>Positioned Badge</h5>
            <div class="flex flex-wrap gap-2">
                <i class="pi pi-bell mr-4 p-text-secondary" pBadge style="font-size: 2rem" value="2"></i>
                <i class="pi pi-calendar mr-4 p-text-secondary" pBadge style="font-size: 2rem" [value]="'10+'" severity="danger"></i>
                <i class="pi pi-envelope p-text-secondary" pBadge style="font-size: 2rem" severity="danger"></i>
            </div>


            <h5>Inline Button Badge</h5>
            <div class="flex flex-wrap gap-2">
                <p-button label="Emails" badge="8"></p-button>
                <p-button label="Messages" icon="pi pi-users" styleClass="p-button-warning" badge="8" badgeClass="p-badge-danger"></p-button>
            </div>


            <h5>Sizes</h5>
            <div class="flex flex-wrap gap-2 align-items-end">
                <p-badge value="2"></p-badge>
                <p-badge value="4" size="large" severity="warning"></p-badge>
                <p-badge value="6" size="xlarge" severity="success"></p-badge>
            </div>
        </div>

        <div class="card">
            <h4>Avatar</h4>
            <h5>Avatar Group</h5>
            <p-avatarGroup styleClass="mb-3">
                <p-avatar image="assets/demo/images/avatar/amyelsner.png" size="large" shape="circle"></p-avatar>
                <p-avatar image="assets/demo/images/avatar/asiyajavayant.png" size="large" shape="circle"></p-avatar>
                <p-avatar image="assets/demo/images/avatar/onyamalimba.png" size="large" shape="circle"></p-avatar>
                <p-avatar image="assets/demo/images/avatar/ionibowcher.png" size="large" shape="circle"></p-avatar>
                <p-avatar image="assets/demo/images/avatar/xuxuefeng.png" size="large"shape="circle"></p-avatar>
                <p-avatar label="+2" shape="circle" size="large" [style]="{'background-color':'#9c27b0', 'color': '#ffffff'}"></p-avatar>
            </p-avatarGroup>

            <h5>Label - Circle</h5>
            <div class="flex flex-wrap gap-2 align-items-end">
                <p-avatar label="P" size="xlarge" shape="circle"></p-avatar>
                <p-avatar label="V" size="large" [style]="{'background-color':'#2196F3', 'color': '#ffffff'}" shape="circle"></p-avatar>
                <p-avatar label="U" [style]="{'background-color': '#9c27b0', 'color': '#ffffff'}" shape="circle"></p-avatar>
            </div>

            <h5>Icon - Badge</h5>
            <p-avatar icon="pi pi-user" pBadge value="4" severity="success" size="xlarge"></p-avatar>
        </div>

        <div class="card">
            <h4>ScrollTop</h4>
            <p-scrollPanel [style]="{width: '250px', height: '200px'}">
                <p>
                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
                    Vitae et leo duis ut diam.
                    Ultricies mi quis hendrerit dolor magna eget est lorem. Amet consectetur adipiscing elit ut.
                    Nam libero justo laoreet sit amet. Pharetra massa massa ultricies mi quis hendrerit dolor magna.
                    Est ultricies integer quis auctor elit sed vulputate. Consequat ac felis donec et. Tellus orci ac auctor augue mauris.
                    Semper feugiat nibh sed pulvinar proin gravida hendrerit lectus a. Tincidunt arcu non sodales neque sodales.
                    Metus aliquam eleifend mi in nulla posuere sollicitudin aliquam ultrices. Sodales ut etiam sit amet nisl purus.
                    Cursus sit amet dictum sit amet. Tristique senectus et netus et malesuada fames ac turpis egestas.
                    Et tortor consequat id porta nibh venenatis cras sed. Diam maecenas ultricies mi eget mauris.
                    Eget egestas purus viverra accumsan in nisl nisi. Suscipit adipiscing bibendum est ultricies integer.
                    Mattis aliquam faucibus purus in massa tempor nec.
                </p>
                <p-scrollTop target="parent" styleClass="custom-scrolltop" [threshold]="100" icon="pi pi-arrow-up"></p-scrollTop>
            </p-scrollPanel>
        </div>
    </div>
    <div class="col-12 lg:col-6">
        <div class="card">
            <h4>Tag</h4>
            <h5>Tags</h5>
            <div class="flex flex-wrap gap-2">
                <p-tag value="Primary"></p-tag>
                <p-tag severity="success" value="Success"></p-tag>
                <p-tag severity="info" value="Info"></p-tag>
                <p-tag severity="warning" value="Warning"></p-tag>
                <p-tag severity="danger" value="Danger"></p-tag>
            </div>

            <h5>Pills</h5>
            <div class="flex flex-wrap gap-2">
                <p-tag value="Primary" [rounded]="true"></p-tag>
                <p-tag severity="success" value="Success" [rounded]="true"></p-tag>
                <p-tag severity="info" value="Info" [rounded]="true"></p-tag>
                <p-tag severity="warning" value="Warning" [rounded]="true"></p-tag>
                <p-tag severity="danger" value="Danger" [rounded]="true"></p-tag>
            </div>

            <h5>Icons</h5>
            <div class="flex flex-wrap gap-2">
                <p-tag icon="pi pi-user" value="Primary"></p-tag>
                <p-tag icon="pi pi-check" severity="success" value="Success"></p-tag>
                <p-tag icon="pi pi-info-circle" severity="info" value="Info"></p-tag>
                <p-tag con="pi pi-exclamation-triangle" severity="warning" value="Warning"></p-tag>
                <p-tag icon="pi pi-times" severity="danger" value="Danger"></p-tag>
            </div>
        </div>

        <div class="card">
            <h4>Chip</h4>
            <h5>Basic</h5>
            <div class="flex flex-wrap align-items-center">
                <p-chip label="Action" styleClass="m-1"></p-chip>
                <p-chip label="Comedy" styleClass="m-1"></p-chip>
                <p-chip label="Mystery" styleClass="m-1"></p-chip>
                <p-chip label="Thriller" styleClass="m-1" [removable]="true"></p-chip>
            </div>

            <h5>Icon</h5>
            <div class="flex flex-wrap align-items-center">
                <p-chip label="Apple" icon="pi pi-apple" styleClass="m-1"></p-chip>
                <p-chip label="Facebook" icon="pi pi-facebook" styleClass="m-1"></p-chip>
                <p-chip label="Google" icon="pi pi-google" styleClass="m-1"></p-chip>
                <p-chip label="Microsoft" icon="pi pi-microsoft" styleClass="m-1" [removable]="true"></p-chip>
            </div>

            <h5>Image</h5>
            <div class="flex flex-wrap align-items-center">
                <p-chip label="Amy Elsner" image="assets/demo/images/avatar/amyelsner.png" styleClass="m-1"></p-chip>
                <p-chip label="Asiya Javayant" image="assets/demo/images/avatar/asiyajavayant.png" styleClass="m-1"></p-chip>
                <p-chip label="Onyama Limba" image="assets/demo/images/avatar/onyamalimba.png" styleClass="m-1"></p-chip>
                <p-chip label="Xuxue Feng" image="assets/demo/images/avatar/xuxuefeng.png" styleClass="m-1" [removable]="true"></p-chip>
            </div>

            <h5>Styling</h5>
            <div class="flex flex-wrap align-items-center">
                <p-chip label="Action" styleClass="m-1 custom-chip"></p-chip>
                <p-chip label="Comedy" styleClass="m-1 custom-chip"></p-chip>
                <p-chip label="Onyama Limba" image="assets/demo/images/avatar/onyamalimba.png" styleClass="m-1 custom-chip"></p-chip>
                <p-chip label="Xuxue Feng" image="assets/demo/images/avatar/xuxuefeng.png" [removable]="true" styleClass="m-1 custom-chip"></p-chip>
            </div>
        </div>

        <div class="card">
            <h4>Skeleton</h4>
            <div class="border-round border-1 surface-border p-4">
                <div class="flex mb-3">
                    <p-skeleton shape="circle" size="4rem" styleClass="mr-2"></p-skeleton>
                    <div>
                        <p-skeleton width="10rem" styleClass="mb-2"></p-skeleton>
                        <p-skeleton width="5rem" styleClass="mb-2"></p-skeleton>
                        <p-skeleton height=".5rem"></p-skeleton>
                    </div>
                </div>
                <p-skeleton width="100%" height="150px"></p-skeleton>
                <div class="flex justify-content-between mt-3">
                    <p-skeleton width="4rem" height="2rem"></p-skeleton>
                    <p-skeleton width="4rem" height="2rem"></p-skeleton>
                </div>
            </div>
        </div>
    </div>
</div>

================
File: src/app/demo/components/uikit/misc/miscdemo.component.ts
================
import { Component, OnDestroy, OnInit } from '@angular/core';

@Component({
    templateUrl: './miscdemo.component.html'
})
export class MiscDemoComponent implements OnInit, OnDestroy {

    value = 0;

    interval: any;

    ngOnInit() {
        this.interval = setInterval(() => {
            this.value = this.value + Math.floor(Math.random() * 10) + 1;
            if (this.value >= 100) {
                this.value = 100;
                clearInterval(this.interval);
            }
        }, 2000);
    }

    ngOnDestroy() {
        clearInterval(this.interval);
    }
    
}

================
File: src/app/demo/components/uikit/misc/miscdemo.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MiscDemoComponent } from './miscdemo.component';
import { MiscDemoRoutingModule } from './miscdemo-routing.module';
import { ProgressBarModule } from 'primeng/progressbar';
import { BadgeModule } from 'primeng/badge';
import { AvatarModule } from 'primeng/avatar';
import { ScrollPanelModule } from 'primeng/scrollpanel';
import { TagModule } from 'primeng/tag';
import { ChipModule } from 'primeng/chip';
import { SkeletonModule } from 'primeng/skeleton';
import { ButtonModule } from 'primeng/button';
import { AvatarGroupModule } from 'primeng/avatargroup';
import { ScrollTopModule } from 'primeng/scrolltop';

@NgModule({
	imports: [
		CommonModule,
		MiscDemoRoutingModule,
		ProgressBarModule,
		BadgeModule,
		AvatarModule,
		ScrollPanelModule,
		TagModule,
		ChipModule,
		ButtonModule,
		SkeletonModule,
		AvatarGroupModule,
		ScrollTopModule
	],
	declarations: [MiscDemoComponent]
})
export class MiscDemoModule { }

================
File: src/app/demo/components/uikit/overlays/overlaysdemo-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { OverlaysDemoComponent } from './overlaysdemo.component';

@NgModule({
	imports: [RouterModule.forChild([
		{ path: '', component: OverlaysDemoComponent }
	])],
	exports: [RouterModule]
})
export class OverlaysDemoRoutingModule { }

================
File: src/app/demo/components/uikit/overlays/overlaysdemo.component.html
================
<div class="grid">
    <p-toast></p-toast>
    <div class="col-12 lg:col-6">
        <div class="card">
            <h5>Dialog</h5>
            <p-dialog header="Dialog" [(visible)]="display" [modal]="true" showEffect="fade" [style]="{width: '30vw'}" [breakpoints]="{'960px': '75vw'}">
                <p class="line-height-3 m-0">
                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
                    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit
                    in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
                    Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
                </p>
                <ng-template pTemplate="footer">
                        <button pButton icon="pi pi-check" (click)="display=false" label="Ok" class="p-button-outlined"></button>
                </ng-template>
            </p-dialog>
            <div class="grid">
                <div class="col-12">
                    <button (click)="display=true" pButton icon="pi pi-external-link" label="Show"></button>
                </div>
            </div>
        </div>

        <div class="card p-fluid">
            <h5>Overlay Panel</h5>
            <div class="flex flex-wrap gap-2">
                <div>
                    <button type="button" pButton label="Image" (click)="op1.toggle($event)" class="p-button-success"></button>
                    <p-overlayPanel #op1 [showCloseIcon]="true" [style]="{width: '450px'}">
                        <img src="assets/demo/images/nature/nature1.jpg" alt="Nature 1" style="width:100%"/>
                    </p-overlayPanel>
                </div>
                <div>
                    <button type="button" pButton label="DataTable" (click)="op2.toggle($event)" class="p-button-success"></button>
                    <p-overlayPanel #op2 [showCloseIcon]="true" [style]="{width: '450px'}">
                        <ng-template pTemplate>
                            <p-table [value]="products" selectionMode="single" [(selection)]="selectedProduct" [paginator]="true" [rows]="5" (onRowSelect)="op2.hide()" responsiveLayout="scroll">
                                <ng-template pTemplate="header">
                                    <tr>
                                        <th style="min-width:12rem" pSortableColumn="name">Name<p-sortIcon field="name"></p-sortIcon></th>
                                        <th style="min-width:5rem">Image</th>
                                        <th style="min-width:8rem" pSortableColumn="price">Price <p-sortIcon field="price"></p-sortIcon></th>
                                    </tr>
                                </ng-template>
                                <ng-template pTemplate="body" let-rowData let-product>
                                    <tr [pSelectableRow]="rowData">
                                        <td>{{product.name}}</td>
                                        <td><img src="assets/demo/images/product/{{product.image}}" [alt]="product.image" width="50" class="shadow-2"/></td>
                                        <td>{{formatCurrency(product.price)}}</td>
                                    </tr>
                                </ng-template>
                            </p-table>
                        </ng-template>
                    </p-overlayPanel>
                </div>
            </div>
        </div>
    </div>

    <div class="col-12 lg:col-6">
        <div class="card p-fluid">
            <h5>Confirmation</h5>
            <p-confirmDialog header="Confirmation" key="confirm1" icon="pi pi-exclamation-triangle" message="Are you sure you want to proceed?"
                             [style]="{width: '350px'}" acceptButtonStyleClass="p-button-text" rejectButtonStyleClass="p-button-text"></p-confirmDialog>
            <div class="grid">
                <div class="col-12">
                    <button type="text" (click)="confirm1()" pButton icon="pi pi-trash" label="Delete" class="p-button-danger" style="width:auto;"></button>
                </div>
            </div>
        </div>

        <div class="card">
            <h5>Sidebar</h5>
            <p-sidebar [(visible)]="visibleSidebar1" [baseZIndex]="10000">
                <h3 style="font-weight:normal">Left Sidebar</h3>
            </p-sidebar>

            <p-sidebar [(visible)]="visibleSidebar2" position="right" [baseZIndex]="10000">
                <h3 style="font-weight:normal">Right Sidebar</h3>
            </p-sidebar>

            <p-sidebar [(visible)]="visibleSidebar3" position="top" [baseZIndex]="10000">
                <h3 style="font-weight:normal">Top Sidebar</h3>
            </p-sidebar>

            <p-sidebar [(visible)]="visibleSidebar4" position="bottom" [baseZIndex]="10000">
                <h3 style="font-weight:normal">Bottom Sidebar</h3>
            </p-sidebar>

            <p-sidebar [(visible)]="visibleSidebar5" [fullScreen]="true" [baseZIndex]="10000">
                <h3 style="font-weight:normal">Full Screen Sidebar</h3>
            </p-sidebar>

            <div class="flex flex-wrap gap-2">
                <button pButton type="button" (click)="visibleSidebar1 = true" icon="pi pi-arrow-right" class="p-button-warning"></button>
                <button pButton type="button" (click)="visibleSidebar2 = true" icon="pi pi-arrow-left" class="p-button-warning"></button>
                <button pButton type="button" (click)="visibleSidebar3 = true" icon="pi pi-arrow-down" class="p-button-warning"></button>
                <button pButton type="button" (click)="visibleSidebar4 = true" icon="pi pi-arrow-up" class="p-button-warning"></button>
                <button pButton type="button" (click)="visibleSidebar5 = true" icon="pi pi-external-link" class="p-button-warning"></button>
            </div>
        </div>
    </div>

    <div class="col-12 lg:col-6">
        <div class="card">
            <h5>Tooltip</h5>
            <div class="flex align-items-center gap-2">
                <span>
                    <label for="firstname5" class="p-sr-only">Username</label>
                    <input id="firstname5" type="text" pInputText placeholder="Username" pTooltip="Enter your username">
                </span>
                <button pButton pRipple type="button" label="Save" icon="pi pi-check" pTooltip="Click to proceed"></button>
            </div>
        </div>
    </div>

    <div class="col-12 lg:col-6">
        <div class="card">
            <h5>ConfirmPopup</h5>

            <p-toast></p-toast>
            <button (click)="confirm2($event)" pButton icon="pi pi-check" label="Confirm"></button>
            <p-confirmPopup key="confirm2"></p-confirmPopup>
        </div>
    </div>
</div>

================
File: src/app/demo/components/uikit/overlays/overlaysdemo.component.ts
================
import { Component, OnInit } from '@angular/core';
import { ConfirmationService, MessageService } from 'primeng/api';
import { Product } from 'src/app/demo/api/product';
import { ProductService } from 'src/app/demo/service/product.service';

@Component({
    templateUrl: './overlaysdemo.component.html',
    providers: [ConfirmationService, MessageService]
})
export class OverlaysDemoComponent implements OnInit {

    images: any[] = [];

    display: boolean = false;

    products: Product[] = [];

    selectedProduct: Product = {};

    visibleSidebar1: boolean = false;

    visibleSidebar2: boolean = false;

    visibleSidebar3: boolean = false;

    visibleSidebar4: boolean = false;

    visibleSidebar5: boolean = false;

    constructor(private productService: ProductService, private confirmationService: ConfirmationService, private messageService: MessageService) { }

    ngOnInit() {
        this.productService.getProductsSmall().then(products => this.products = products);

        this.images = [];
        this.images.push({
            source: 'assets/demo/images/sopranos/sopranos1.jpg',
            thumbnail: 'assets/demo/images/sopranos/sopranos1_small.jpg', title: 'Sopranos 1'
        });
        this.images.push({
            source: 'assets/demo/images/sopranos/sopranos2.jpg',
            thumbnail: 'assets/demo/images/sopranos/sopranos2_small.jpg', title: 'Sopranos 2'
        });
        this.images.push({
            source: 'assets/demo/images/sopranos/sopranos3.jpg',
            thumbnail: 'assets/demo/images/sopranos/sopranos3_small.jpg', title: 'Sopranos 3'
        });
        this.images.push({
            source: 'assets/demo/images/sopranos/sopranos4.jpg',
            thumbnail: 'assets/demo/images/sopranos/sopranos4_small.jpg', title: 'Sopranos 4'
        });
    }

    confirm1() {
        this.confirmationService.confirm({
            key: 'confirm1',
            message: 'Are you sure to perform this action?'
        });
    }

    confirm2(event: Event) {
        this.confirmationService.confirm({
            key: 'confirm2',
            target: event.target || new EventTarget,
            message: 'Are you sure that you want to proceed?',
            icon: 'pi pi-exclamation-triangle',
            accept: () => {
                this.messageService.add({ severity: 'info', summary: 'Confirmed', detail: 'You have accepted' });
            },
            reject: () => {
                this.messageService.add({ severity: 'error', summary: 'Rejected', detail: 'You have rejected' });
            }
        });
    }

    formatCurrency(value: number) {
        return value.toLocaleString('en-US', { style: 'currency', currency: 'USD' });
    }
    
}

================
File: src/app/demo/components/uikit/overlays/overlaysdemo.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { OverlaysDemoComponent } from './overlaysdemo.component';
import { OverlaysDemoRoutingModule } from './overlaysdemo-routing.module';
import { ToastModule } from 'primeng/toast';
import { DialogModule } from 'primeng/dialog';
import { ButtonModule } from 'primeng/button';
import { OverlayPanelModule } from 'primeng/overlaypanel';
import { TableModule } from 'primeng/table';
import { ConfirmDialogModule } from 'primeng/confirmdialog';
import { SidebarModule } from 'primeng/sidebar';
import { RippleModule } from 'primeng/ripple';
import { ConfirmPopupModule } from 'primeng/confirmpopup';
import { TooltipModule } from 'primeng/tooltip';
import { InputTextModule } from 'primeng/inputtext';
@NgModule({
	imports: [
		CommonModule,
		OverlaysDemoRoutingModule,
		ToastModule,
		DialogModule,
		FormsModule,
		TooltipModule,
		InputTextModule,
		ButtonModule,
		OverlayPanelModule,
		TableModule,
		ConfirmDialogModule,
		SidebarModule,
		RippleModule,
		ConfirmPopupModule
	],
	declarations: [OverlaysDemoComponent]
})
export class OverlaysDemoModule { }

================
File: src/app/demo/components/uikit/panels/panelsdemo-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { PanelsDemoComponent } from './panelsdemo.component';

@NgModule({
	imports: [RouterModule.forChild([
		{ path: '', component: PanelsDemoComponent }
	])],
	exports: [RouterModule]
})
export class PanelsDemoRoutingModule { }

================
File: src/app/demo/components/uikit/panels/panelsdemo.component.html
================
<div class="grid">
    <div class="col-12">
        <div class="card">
            <h5>Toolbar</h5>
            <p-toolbar>
                <div class="p-toolbar-group-left flex flex-wrap">
                    <button pButton type="button" label="New" icon="pi pi-plus" class="mr-2"></button>
                    <button pButton type="button" label="Open" icon="pi pi-folder-open" class="p-button-secondary mr-2"></button>

                    <i class="pi pi-bars p-toolbar-separator"></i>

                    <button pButton type="button" icon="pi pi-check" class="p-button-success mr-2"></button>
                    <button pButton type="button" icon="pi pi-trash" class="p-button-warning mr-2"></button>
                    <button pButton type="button" icon="pi pi-print" class="p-button-danger"></button>
                </div>

                <div class="p-toolbar-group-right">
                    <p-splitButton label="Options" icon="pi pi-check" [model]="items"></p-splitButton>
                </div>
            </p-toolbar>
        </div>
    </div>

    <div class="col-12 md:col-6">
        <div class="card">
            <h5>AccordionPanel</h5>
            <p-accordion>
                <p-accordionTab header="Header I" [selected]="true" class="line-height-3 m-0">
                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore
                    et dolore magna aliqua.
                    Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
                    consequat.
                    Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
                    pariatur.
                    Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id
                    est laborum.
                </p-accordionTab>
                <p-accordionTab header="Header II" class="line-height-3 m-0">
                    Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,
                    totam rem aperiam, eaque
                    ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo
                    enim ipsam voluptatem quia
                    voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione
                    voluptatem sequi nesciunt.
                    Consectetur, adipisci velit, sed quia non numquam eius modi.
                </p-accordionTab>
                <p-accordionTab header="Header III" class="line-height-3 m-0">
                    At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum
                    deleniti atque corrupti quos dolores
                    et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui
                    officia deserunt mollitia animi, id est laborum et dolorum fuga.
                    Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est
                    eligendi optio cumque nihil impedit
                    quo minus.
                </p-accordionTab>
            </p-accordion>
        </div>

        <div class="card">
            <h5>TabView</h5>
            <p-tabView orientation="left">
                <p-tabPanel header="Header I" class="line-height-3 m-0">
                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore
                    et dolore magna aliqua.
                    Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
                    consequat.
                    Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
                    pariatur.
                    Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id
                    est laborum.
                </p-tabPanel>
                <p-tabPanel header="Header II" class="line-height-3 m-0">
                    Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,
                    totam rem aperiam, eaque
                    ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo
                    enim ipsam voluptatem quia
                    voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione
                    voluptatem sequi nesciunt.
                    Consectetur, adipisci velit, sed quia non numquam eius modi.
                </p-tabPanel>
                <p-tabPanel header="Header III" class="line-height-3 m-0">
                    At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum
                    deleniti atque corrupti quos dolores
                    et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui
                    officia deserunt mollitia animi, id est laborum et dolorum fuga.
                    Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est
                    eligendi optio cumque nihil impedit
                    quo minus.
                </p-tabPanel>
            </p-tabView>
        </div>
    </div>

    <div class="col-12 md:col-6">
        <div class="card">
            <h5>Panel</h5>
            <p-panel header="Header" [toggleable]="true" class="line-height-3 m-0">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et
                dolore magna aliqua.
                Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
                consequat.
                Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
                Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est
                laborum.
            </p-panel>
        </div>

        <div class="card">
            <h5>Fieldset</h5>
            <p-fieldset legend="Legend" [toggleable]="true" class="line-height-3 m-0">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et
                dolore magna aliqua.
                Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
                consequat.
                Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
                Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est
                laborum.
            </p-fieldset>
        </div>

        <div class="card">
            <div class="flex align-items-center justify-content-between mb-0">
                <h5>Card</h5>
                <p-menu #menu [popup]="true" [model]="cardMenu"></p-menu>
                <button pButton type="button" icon="pi pi-plus" class="p-button-text"
                        (click)="menu.toggle($event)"></button>
            </div>
            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et
                dolore magna aliqua.
                Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
                consequat.
                Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
                Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est
                laborum.</p>
        </div>
    </div>

    <div class="col-12">
        <div class="card">
            <h5>Divider</h5>
            <div class="grid">
                <div class="col-5 flex align-items-center justify-content-center">
                    <div class="p-fluid">
                        <div class="field">
                            <label for="username">Username</label>
                            <input pInputText id="username" type="text"/>
                        </div>
                        <div class="field">
                            <label for="password">Password</label>
                            <input pInputText id="password" type="password"/>
                        </div>
                        <p-button label="Login" class="mt-2"></p-button>
                    </div>
                </div>
                <div class="col-2">
                    <p-divider layout="vertical">
                        <b>OR</b>
                    </p-divider>
                </div>
                <div class="col-5 align-items-center justify-content-center">
                    <p class="line-height-3 m-0">Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,
                        totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi
                        architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit
                        aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione
                        voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.</p>

                    <p-divider layout="horizontal" align="center">
                        <span class="p-tag">Badge</span>
                    </p-divider>

                    <p class="line-height-3 m-0">At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum
                        deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati
                        cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est
                        laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio.
                        Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.</p>

                    <p-divider align="right">
                        <p-button label="Button" icon="pi pi-search" styleClass="p-button-outlined"></p-button>
                    </p-divider>

                    <p class="line-height-3 m-0">Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et
                        voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur
                        a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis
                        doloribus asperiores repellat.
                        Donec vel volutpat ipsum. Integer nunc magna, posuere ut tincidunt eget, egestas vitae sapien.
                        Morbi dapibus luctus odio.</p>
                </div>
            </div>
        </div>
    </div>

    <div class="col-12">
        <div class="card">
            <h5>Splitter</h5>
            <p-splitter [style]="{'height': '300px'}" [panelSizes]="[30,70]">
                <ng-template pTemplate>
                    <div class="col flex align-items-center justify-content-center">
                        Panel 1
                    </div>
                </ng-template>
                <ng-template pTemplate>
                    <p-splitter layout="vertical" [panelSizes]="[50,50]" [minSizes]="[10,10]">
                        <ng-template pTemplate>
                            <div class="col flex align-items-center justify-content-center">
                                Panel 2
                            </div>
                        </ng-template>
                        <ng-template pTemplate>
                            <div class="col flex align-items-center justify-content-center">
                                Panel 3
                            </div>
                        </ng-template>
                    </p-splitter>
                </ng-template>
            </p-splitter>
        </div>
    </div>
</div>

================
File: src/app/demo/components/uikit/panels/panelsdemo.component.ts
================
import { Component, OnInit } from '@angular/core';
import { MenuItem } from 'primeng/api';

@Component({
    templateUrl: './panelsdemo.component.html'
})
export class PanelsDemoComponent implements OnInit {

    items: MenuItem[] = [];

    cardMenu: MenuItem[] = [];

    ngOnInit() {
        this.items = [
            { label: 'Angular.io', icon: 'pi pi-external-link', url: 'http://angular.io' },
            { label: 'Theming', icon: 'pi pi-bookmark', routerLink: ['/theming'] }
        ];

        this.cardMenu = [
            {
                label: 'Save', icon: 'pi pi-fw pi-check'
            },
            {
                label: 'Update', icon: 'pi pi-fw pi-refresh'
            },
            {
                label: 'Delete', icon: 'pi pi-fw pi-trash'
            },
        ];
    }
    
}

================
File: src/app/demo/components/uikit/panels/panelsdemo.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { PanelsDemoComponent } from './panelsdemo.component';
import { PanelsDemoRoutingModule } from './panelsdemo-routing.module';
import { ToolbarModule } from 'primeng/toolbar';
import { ButtonModule } from 'primeng/button';
import { RippleModule } from 'primeng/ripple';
import { SplitButtonModule } from 'primeng/splitbutton';
import { AccordionModule } from 'primeng/accordion';
import { TabViewModule } from 'primeng/tabview';
import { FieldsetModule } from 'primeng/fieldset';
import { MenuModule } from 'primeng/menu';
import { InputTextModule } from 'primeng/inputtext';
import { DividerModule } from 'primeng/divider';
import { SplitterModule } from 'primeng/splitter';
import { PanelModule } from 'primeng/panel';

@NgModule({
	imports: [
		CommonModule,
		FormsModule,
		PanelsDemoRoutingModule,
		ToolbarModule,
		ButtonModule,
		RippleModule,
		SplitButtonModule,
		AccordionModule,
		TabViewModule,
		FieldsetModule,
		MenuModule,
		InputTextModule,
		DividerModule,
		SplitterModule,
		PanelModule
	],
	declarations: [PanelsDemoComponent]
})
export class PanelsDemoModule { }

================
File: src/app/demo/components/uikit/placeholder-card/placeholder-card.component.html
================
<div class="p-4 shadow-2 surface-card border-round text-center">
  <!-- Icon 
  <i class="pi pi-users text-4xl text-green-500 mb-3"></i>
  -->
  <!-- Title -->
  <h3 class="text-xl font-medium text-900 mb-2">
    Placeholder Card
  </h3>
  
  <!-- Sales Number -->
  <div>
    <p 
      class="text-5xl font-bold text-green-700 mb-2"
      style="line-height: 1.2;"
    >
      $0.00
    </p>
  </div>
</div>

================
File: src/app/demo/components/uikit/placeholder-card/placeholder-card.component.scss
================
.placeholder-card {
    background: var(--surface-b);
    border: 1px dashed var(--surface-d);
    display: flex;
    justify-content: center;
    align-items: center;
  }

================
File: src/app/demo/components/uikit/placeholder-card/placeholder-card.component.ts
================
import { CommonModule } from '@angular/common';
import { Component, Input } from '@angular/core';


@Component({
  selector: 'app-placeholder-card',
  standalone: true,
  templateUrl: './placeholder-card.component.html',
  styleUrls: ['./placeholder-card.component.scss'],
  imports: [CommonModule]
})

export class PlaceholderCardComponent {
  @Input() width: string = '100%';
  @Input() height: string = '150px';
  @Input() borderRadius: string = '8px';
}

================
File: src/app/demo/components/uikit/site-selector/site-selector.component.html
================
<p-dropdown 
  [(ngModel)]="selectedSite" 
  [options]="sites" 
  optionLabel="name" 
  [disabled]="loading" 
  placeholder="Select a site..."
  (onChange)="onSiteSelected($event.value)"
  id="siteSelector"
  [style]="{'width': '500px'}">
</p-dropdown>

================
File: src/app/demo/components/uikit/site-selector/site-selector.component.scss
================
#siteSelector {
    min-width: 800px; 
  }

================
File: src/app/demo/components/uikit/site-selector/site-selector.component.spec.ts
================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { SiteSelectorComponent } from './site-selector.component';

describe('SiteSelectorComponent', () => {
  let component: SiteSelectorComponent;
  let fixture: ComponentFixture<SiteSelectorComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [SiteSelectorComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(SiteSelectorComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

================
File: src/app/demo/components/uikit/site-selector/site-selector.component.ts
================
import { Component, EventEmitter, OnInit, Output } from '@angular/core';
import { Apollo, gql } from 'apollo-angular';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { DropdownModule } from 'primeng/dropdown';

@Component({
  selector: 'app-site-selector',
  standalone: true,
  imports: [CommonModule, FormsModule, DropdownModule],
  providers: [Apollo],
  templateUrl: './site-selector.component.html',
  styleUrls: ['./site-selector.component.scss'],
})
export class SiteSelectorComponent implements OnInit {
  @Output() siteSelected = new EventEmitter<number>();

  selectedSite: { id: number; name: string } | null = null; // Declare selectedSite
  sites: { id: number; name: string }[] = []; // Array to hold dropdown options
  loading = true;

  constructor(private apollo: Apollo) {}

  ngOnInit(): void {
    this.fetchSites();
  }

  fetchSites(): void {
    const SITE_QUERY = gql`
    query GetSites {
  rds_cloud_Sites(
    where: { 
      clientId: { _eq: 109 }, 
      statusId: { _eq: 2 } 
    },
    order_by: { name: asc }  
  ) {
    id
    name
  }
}
  `;
  

    this.apollo
      .watchQuery<{ rds_cloud_Sites: { id: number; name: string }[] }>({
        query: SITE_QUERY,
      })
      .valueChanges.subscribe({
        next: (result) => {
          this.sites = result.data.rds_cloud_Sites;
          if (this.sites.length > 0) {
            this.selectedSite = this.sites[0]; // Default to the first item
            this.onSiteSelected(this.selectedSite); // Emit the default selection
          }
          this.loading = false;
        },
        error: (error) => {
          console.error('Error fetching sites:', error);
          this.loading = false;
        },
      });
  }

  onSiteSelected(event: { id: number; name: string }): void {
    if (event && event.id) {
      this.siteSelected.emit(event.id); // Emit the siteId of the selected site
    }
  }
}

================
File: src/app/demo/components/uikit/table/tabledemo-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { TableDemoComponent } from './tabledemo.component';

@NgModule({
	imports: [RouterModule.forChild([
		{ path: '', component: TableDemoComponent }
	])],
	exports: [RouterModule]
})
export class TableDemoRoutingModule { }

================
File: src/app/demo/components/uikit/table/tabledemo.component.html
================
<div class="grid">
	<div class="col-12">
		<div class="card">
			<h5>Filter Menu</h5>
			<p-table #dt1 [value]="customers1" dataKey="id" [rows]="10" [loading]="loading" [rowHover]="true" styleClass="p-datatable-gridlines" [paginator]="true" [globalFilterFields]="['name','country.name','representative.name','status']" responsiveLayout="scroll">
				<ng-template pTemplate="caption">
					<div class="flex justify-content-between flex-column sm:flex-row">
						<button pButton label="Clear" class="p-button-outlined mb-2" icon="pi pi-filter-slash" (click)="clear(dt1)"></button>
						<span class="p-input-icon-left mb-2">
							<i class="pi pi-search"></i>
							<input pInputText type="text" #filter (input)="onGlobalFilter(dt1, $event)" placeholder="Search Keyword" class="w-full"/>
						</span>
					</div>
				</ng-template>
				<ng-template pTemplate="header">
					<tr>
						<th style="min-width: 12rem">
							<div class="flex justify-content-between align-items-center">
								Name
								<p-columnFilter type="text" field="name" display="menu" placeholder="Search by name"></p-columnFilter>
							</div>
						</th>
						<th style="min-width: 12rem">
							<div class="flex justify-content-between align-items-center">
								Country
								<p-columnFilter type="text" field="country.name" display="menu" placeholder="Search by country"></p-columnFilter>
							</div>
						</th>
						<th style="min-width: 14rem">
							<div class="flex justify-content-between align-items-center">
								Agent
								<p-columnFilter field="representative" matchMode="in" display="menu" [showMatchModes]="false" [showOperator]="false" [showAddButton]="false">
									<ng-template pTemplate="header">
										<div class="px-3 pt-3 pb-0">
											<span class="font-bold">Agent Picker</span>
										</div>
									</ng-template>
									<ng-template pTemplate="filter" let-value let-filter="filterCallback">
										<p-multiSelect [ngModel]="value" [options]="representatives" placeholder="Any" (onChange)="filter($event.value)" optionLabel="name">
											<ng-template let-option pTemplate="item">
												<div class="p-multiselect-representative-option">
													<img [alt]="option.label" src="assets/demo/images/avatar/{{option.image}}" width="32" style="vertical-align: middle" />
													<span class="ml-2">{{option.name}}</span>
												</div>
											</ng-template>
										</p-multiSelect>
									</ng-template>
								</p-columnFilter>
							</div>
						</th>
						<th style="min-width: 10rem">
							<div class="flex justify-content-between align-items-center">
								Date
								<p-columnFilter type="date" field="date" display="menu" placeholder="mm/dd/yyyy"></p-columnFilter>
							</div>
						</th>
						<th style="min-width: 10rem">
							<div class="flex justify-content-between align-items-center">
								Balance
								<p-columnFilter type="numeric" field="balance" display="menu" currency="USD"></p-columnFilter>
							</div>
						</th>
						<th style="min-width: 12rem">
							<div class="flex justify-content-between align-items-center">
								Status
								<p-columnFilter field="status" matchMode="equals" display="menu">
									<ng-template pTemplate="filter" let-value let-filter="filterCallback">
										<p-dropdown [ngModel]="value" [options]="statuses" (onChange)="filter($event.value)" placeholder="Any" [style]="{'min-width': '12rem'}" >
											<ng-template let-option pTemplate="item">
												<span [class]="'customer-badge status-' + option.value">{{option.label}}</span>
											</ng-template>
										</p-dropdown>
									</ng-template>
								</p-columnFilter>
							</div>
						</th>
						<th style="min-width: 12rem">
							<div class="flex justify-content-between align-items-center">
								Activity
								<p-columnFilter field="activity" matchMode="between" display="menu" [showMatchModes]="false" [showOperator]="false" [showAddButton]="false">
									<ng-template pTemplate="filter" let-filter="filterCallback">
										<p-slider [ngModel]="activityValues" [range]="true" (onSlideEnd)="filter($event.values)" styleClass="m-3" [style]="{'min-width': '12rem'}" ></p-slider>
										<div class="flex align-items-center justify-content-between px-2">
											<span>{{activityValues[0]}}</span>
											<span>{{activityValues[1]}}</span>
										</div>
									</ng-template>
								</p-columnFilter>
							</div>
						</th>
						<th style="min-width: 8rem">
							<div class="flex justify-content-between align-items-center">
								Verified
								<p-columnFilter type="boolean" field="verified" display="menu"></p-columnFilter>
							</div>
						</th>
					</tr>
				</ng-template>
				<ng-template pTemplate="body" let-customer>
					<tr>
						<td>
							{{customer.name}}
						</td>
						<td>
							<img src="assets/demo/images/flag/flag_placeholder.png" [class]="'flag flag-' + customer.country.code" width="30">
							<span class="image-text ml-2">{{customer.country.name}}</span>
						</td>
						<td>
							<img [alt]="customer.representative.name" src="assets/demo/images/avatar/{{customer.representative.image}}" width="32" style="vertical-align: middle"/>
							<span class="image-text ml-2">{{customer.representative.name}}</span>
						</td>
						<td>
							{{customer.date | date: 'MM/dd/yyyy'}}
						</td>
						<td>
							{{customer.balance | currency:'USD':'symbol'}}
						</td>
						<td>
							<span [class]="'customer-badge status-' + customer.status">{{customer.status}}</span>
						</td>
						<td>
							<p-progressBar [value]="customer.activity" [showValue]="false" [style]="{'height': '0.5rem'}"></p-progressBar>
						</td>
						<td class="text-center">
							<i class="pi" [ngClass]="{'true-icon pi-check-circle text-green-500': customer.verified, 'false-icon pi-times-circle text-pink-500': !customer.verified}"></i>
						</td>
					</tr>
				</ng-template>
				<ng-template pTemplate="emptymessage">
					<tr>
						<td colspan="8">No customers found.</td>
					</tr>
				</ng-template>
				<ng-template pTemplate="loadingbody">
					<tr>
						<td colspan="8">Loading customers data. Please wait.</td>
					</tr>
				</ng-template>
    		</p-table>
		</div>

	</div>

	<div class="col-12">
		<div class="card">
			<h5>Frozen Columns</h5>
			<p-toggleButton [(ngModel)]="idFrozen" [onIcon]="'pi pi-lock'" offIcon="pi pi-lock-open" [onLabel]="'Unfreeze Id'" offLabel="Freeze Id" [style]="{'width': '12rem'}"></p-toggleButton>

			<p-table [value]="customers3" scrollDirection="both" [scrollable]="true" scrollHeight="400px" styleClass="mt-3" responsiveLayout="scroll">
				<ng-template pTemplate="header">
					<tr>
						<th style="width:200px" pFrozenColumn>Name</th>
						<th style="width:200px" alignFrozen="left" pFrozenColumn [frozen]="idFrozen">Id</th>
						<th style="width:200px">Country</th>
						<th style="width:200px">Date</th>
						<th style="width:200px">Company</th>
						<th style="width:200px">Status</th>
						<th style="width:200px">Activity</th>
						<th style="width:200px">Representative</th>
						<th style="width:200px" pFrozenColumn alignFrozen="right">Balance</th>
					</tr>
				</ng-template>
				<ng-template pTemplate="body" let-customer>
					<tr>
						<td style="width:200px" pFrozenColumn class="font-bold">{{customer.name}}</td>
						<td style="width:200px" alignFrozen="left" pFrozenColumn [frozen]="idFrozen" [ngClass]="{'font-bold': idFrozen}">{{customer.id}}</td>
						<td style="width:200px">
							<img src="assets/demo/images/flag/flag_placeholder.png" [class]="'flag flag-' + customer.country.code" width="30">
							<span class="image-text ml-2">{{customer.country.name}}</span>
						</td>
						<td style="width:200px">{{customer.date}}</td>
						<td style="width:200px">{{customer.company}}</td>
						<td style="width:200px">
							<span [class]="'customer-badge status-' + customer.status">{{customer.status}}</span>
						</td>
						<td style="width:200px">{{customer.activity}}</td>
						<td style="width:200px">
							<img [alt]="customer.representative.name" src="assets/demo/images/avatar/{{customer.representative.image}}" width="32" style="vertical-align: middle"/>
							<span class="image-text ml-2">{{customer.representative.name}}</span>
						</td>
						<td style="width:200px" pFrozenColumn  class="font-bold" alignFrozen="right">{{formatCurrency(customer.balance)}}</td>
					</tr>
				</ng-template>
			</p-table>
		</div>
	</div>

	<div class="col-12">
		<div class="card">
			<h5>Row Expand</h5>
			<p-toast></p-toast>
			<p-table [value]="products" dataKey="name" [expandedRowKeys]="expandedRows" responsiveLayout="scroll">
				<ng-template pTemplate="caption">
					<button pButton icon="pi pi-fw {{isExpanded ? 'pi-minus' : 'pi-plus'}}" label="{{isExpanded ? 'Collapse All' : 'Expand All'}}" (click)="expandAll()"></button>
					<div class="flex table-header">
					</div>
				</ng-template>
				<ng-template pTemplate="header">
					<tr>
						<th style="width: 3rem"></th>
						<th pSortableColumn="name">Name <p-sortIcon field="name"></p-sortIcon></th>
						<th>Image</th>
						<th pSortableColumn="price">Price <p-sortIcon field="price"></p-sortIcon></th>
						<th pSortableColumn="category">Category <p-sortIcon field="category"></p-sortIcon></th>
						<th pSortableColumn="rating">Reviews <p-sortIcon field="rating"></p-sortIcon></th>
						<th pSortableColumn="inventoryStatus">Status <p-sortIcon field="inventoryStatus"></p-sortIcon></th>
					</tr>
				</ng-template>
				<ng-template pTemplate="body" let-product let-expanded="expanded">
					<tr>
						<td>
							<button type="button" pButton pRipple [pRowToggler]="product" class="p-button-text p-button-rounded p-button-plain" [icon]="expanded ? 'pi pi-chevron-down' : 'pi pi-chevron-right'"></button>
						</td>
						<td style="min-width: 12rem;">{{product.name}}</td>
						<td><img [src]="'assets/demo/images/product/' + product.image" [alt]="product.name" width="100" class="shadow-4" /></td>
						<td style="min-width: 8rem;">{{product.price | currency:'USD'}}</td>
						<td style="min-width: 10rem;">{{product.category}}</td>
						<td style="min-width: 10rem;"><p-rating [ngModel]="product.rating" [readonly]="true" [cancel]="false"></p-rating></td>
						<td><span [class]="'product-badge status-' + product.inventoryStatus.toLowerCase()">{{product.inventoryStatus}}</span></td>
					</tr>
				</ng-template>
				<ng-template pTemplate="rowexpansion" let-product>
					<tr>
						<td colspan="7">
							<div class="p-3">
								<p-table [value]="product.orders" dataKey="id" responsiveLayout="scroll">
									<ng-template pTemplate="header">
					<tr>
						<th pSortableColumn="id">Id <p-sortIcon field="price"></p-sortIcon></th>
						<th pSortableColumn="customer">Customer <p-sortIcon field="customer"></p-sortIcon></th>
						<th pSortableColumn="date">Date <p-sortIcon field="date"></p-sortIcon></th>
						<th pSortableColumn="amount">Amount <p-sortIcon field="amount"></p-sortIcon></th>
						<th pSortableColumn="status">Status <p-sortIcon field="status"></p-sortIcon></th>
						<th style="width: 4rem"></th>
					</tr>
				</ng-template>
				<ng-template pTemplate="body" let-order>
					<tr>
						<td>{{order.id}}</td>
						<td>{{order.customer}}</td>
						<td>{{order.date}}</td>
						<td>{{order.amount | currency:'USD'}}</td>
						<td><span [class]="'order-badge order-' + order.status.toLowerCase()">{{order.status}}</span></td>
						<td><p-button type="button" icon="pi pi-search"></p-button></td>
					</tr>
				</ng-template>
				<ng-template pTemplate="emptymessage">
					<tr>
						<td colspan="6">There are no order for this product yet.</td>
					</tr>
				</ng-template>
			</p-table>
		</div>
		</td>
		</tr>
		</ng-template>
		</p-table>
	</div>
	</div>

	<div class="col-12">
		<div class="card">
			<h5>Subheader Grouping</h5>
			<p-table [value]="customers3" rowGroupMode="subheader" groupRowsBy="representative.name" sortField="representative.name" sortMode="single" (onSort)="onSort()" responsiveLayout="scroll" [scrollable]="true" scrollHeight="400px">
				<ng-template pTemplate="header">
					<tr>
						<th>Name</th>
						<th>Country</th>
						<th>Company</th>
						<th>Status</th>
						<th>Date</th>
					</tr>
				</ng-template>
				<ng-template pTemplate="body" let-customer let-rowIndex="rowIndex">
					<tr pRowGroupHeader *ngIf="rowGroupMetadata[customer.representative.name].index === rowIndex">
						<td colspan="5" style="min-width: 200px;">
							<img [alt]="customer.representative.name" src="assets/demo/images/avatar/{{customer.representative.image}}" width="32" style="vertical-align: middle" />
							<span class="font-bold ml-2">{{customer.representative.name}}</span>
						</td>
					</tr>
					<tr>
						<td style="min-width: 200px;">
							{{customer.name}}
						</td>
						<td style="min-width: 200px;">
							<img src="assets/demo/images/flag/flag_placeholder.png" [class]="'flag flag-' + customer.country.code" width="30">
							<span class="image-text" style="margin-left: .5em">{{customer.country.name}}</span>
						</td>
						<td style="min-width: 200px;">
							{{customer.company}}
						</td>
						<td style="min-width: 200px;">
							<span [class]="'customer-badge status-' + customer.status">{{customer.status}}</span>
						</td>
						<td style="min-width: 200px;">
							{{customer.date}}
						</td>
					</tr>
				</ng-template>
			</p-table>
		</div>
	</div>
</div>

================
File: src/app/demo/components/uikit/table/tabledemo.component.ts
================
import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';
import { Customer, Representative } from 'src/app/demo/api/customer';
import { CustomerService } from 'src/app/demo/service/customer.service';
import { Product } from 'src/app/demo/api/product';
import { ProductService } from 'src/app/demo/service/product.service';
import { Table } from 'primeng/table';
import { MessageService, ConfirmationService } from 'primeng/api';

interface expandedRows {
    [key: string]: boolean;
}

@Component({
    templateUrl: './tabledemo.component.html',
    providers: [MessageService, ConfirmationService]
})
export class TableDemoComponent implements OnInit {

    customers1: Customer[] = [];

    customers2: Customer[] = [];

    customers3: Customer[] = [];

    selectedCustomers1: Customer[] = [];

    selectedCustomer: Customer = {};

    representatives: Representative[] = [];

    statuses: any[] = [];

    products: Product[] = [];

    rowGroupMetadata: any;

    expandedRows: expandedRows = {};

    activityValues: number[] = [0, 100];

    isExpanded: boolean = false;

    idFrozen: boolean = false;

    loading: boolean = true;

    @ViewChild('filter') filter!: ElementRef;

    constructor(private customerService: CustomerService, private productService: ProductService) { }

    ngOnInit() {
        this.customerService.getCustomersLarge().then(customers => {
            this.customers1 = customers;
            this.loading = false;

            // @ts-ignore
            this.customers1.forEach(customer => customer.date = new Date(customer.date));
        });
        this.customerService.getCustomersMedium().then(customers => this.customers2 = customers);
        this.customerService.getCustomersLarge().then(customers => this.customers3 = customers);
        this.productService.getProductsWithOrdersSmall().then(data => this.products = data);

        this.representatives = [
            { name: 'Amy Elsner', image: 'amyelsner.png' },
            { name: 'Anna Fali', image: 'annafali.png' },
            { name: 'Asiya Javayant', image: 'asiyajavayant.png' },
            { name: 'Bernardo Dominic', image: 'bernardodominic.png' },
            { name: 'Elwin Sharvill', image: 'elwinsharvill.png' },
            { name: 'Ioni Bowcher', image: 'ionibowcher.png' },
            { name: 'Ivan Magalhaes', image: 'ivanmagalhaes.png' },
            { name: 'Onyama Limba', image: 'onyamalimba.png' },
            { name: 'Stephen Shaw', image: 'stephenshaw.png' },
            { name: 'XuXue Feng', image: 'xuxuefeng.png' }
        ];

        this.statuses = [
            { label: 'Unqualified', value: 'unqualified' },
            { label: 'Qualified', value: 'qualified' },
            { label: 'New', value: 'new' },
            { label: 'Negotiation', value: 'negotiation' },
            { label: 'Renewal', value: 'renewal' },
            { label: 'Proposal', value: 'proposal' }
        ];
    }

    onSort() {
        this.updateRowGroupMetaData();
    }

    updateRowGroupMetaData() {
        this.rowGroupMetadata = {};

        if (this.customers3) {
            for (let i = 0; i < this.customers3.length; i++) {
                const rowData = this.customers3[i];
                const representativeName = rowData?.representative?.name || '';

                if (i === 0) {
                    this.rowGroupMetadata[representativeName] = { index: 0, size: 1 };
                }
                else {
                    const previousRowData = this.customers3[i - 1];
                    const previousRowGroup = previousRowData?.representative?.name;
                    if (representativeName === previousRowGroup) {
                        this.rowGroupMetadata[representativeName].size++;
                    }
                    else {
                        this.rowGroupMetadata[representativeName] = { index: i, size: 1 };
                    }
                }
            }
        }
    }

    expandAll() {
        if (!this.isExpanded) {
            this.products.forEach(product => product && product.name ? this.expandedRows[product.name] = true : '');

        } else {
            this.expandedRows = {};
        }
        this.isExpanded = !this.isExpanded;
    }

    formatCurrency(value: number) {
        return value.toLocaleString('en-US', { style: 'currency', currency: 'USD' });
    }

    onGlobalFilter(table: Table, event: Event) {
        table.filterGlobal((event.target as HTMLInputElement).value, 'contains');
    }

    clear(table: Table) {
        table.clear();
        this.filter.nativeElement.value = '';
    }
    
}

================
File: src/app/demo/components/uikit/table/tabledemo.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { TableDemoComponent } from './tabledemo.component';
import { TableDemoRoutingModule } from './tabledemo-routing.module';
import { TableModule } from 'primeng/table';
import { ButtonModule } from 'primeng/button';
import { InputTextModule } from 'primeng/inputtext';
import { ToggleButtonModule } from 'primeng/togglebutton';
import { RippleModule } from 'primeng/ripple';
import { MultiSelectModule } from 'primeng/multiselect';
import { DropdownModule } from 'primeng/dropdown';
import { ProgressBarModule } from 'primeng/progressbar';
import { ToastModule } from 'primeng/toast';
import { SliderModule } from 'primeng/slider';
import { RatingModule } from 'primeng/rating';

@NgModule({
	imports: [
		CommonModule,
		TableDemoRoutingModule,
		FormsModule,
		TableModule,
		RatingModule,
		ButtonModule,
		SliderModule,
		InputTextModule,
		ToggleButtonModule,
		RippleModule,
		MultiSelectModule,
		DropdownModule,
		ProgressBarModule,
		ToastModule
	],
	declarations: [TableDemoComponent]
})
export class TableDemoModule { }

================
File: src/app/demo/components/uikit/tree/treedemo-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { TreeDemoComponent } from './treedemo.component';

@NgModule({
	imports: [RouterModule.forChild([
		{ path: '', component: TreeDemoComponent }
	])],
	exports: [RouterModule]
})
export class TreeDemoRoutingModule { }

================
File: src/app/demo/components/uikit/tree/treedemo.component.html
================
<div class="grid">
	<div class="col-12">
		<div class="card">
			<h5>Tree</h5>
			<p-tree [value]="files1" selectionMode="checkbox" [(selection)]="selectedFiles1"></p-tree>
		</div>
	</div>
	<div class="col-12">
		<div class="card">
			<h5>TreeTable</h5>
			<p-treeTable [value]="files2" [columns]="cols" selectionMode="checkbox" [(selection)]="selectedFiles2">
				<ng-template pTemplate="header" let-columns>
					<tr>
						<th *ngFor="let col of columns">
							{{col.header}}
						</th>
					</tr>
				</ng-template>
				<ng-template pTemplate="body" let-rowNode let-rowData="rowData" let-columns="columns">
					<tr>
						<td *ngFor="let col of columns; let i = index">
							<p-treeTableToggler [rowNode]="rowNode" *ngIf="i === 0"></p-treeTableToggler>
							<p-treeTableCheckbox [value]="rowNode" *ngIf="i === 0"></p-treeTableCheckbox>
							{{rowData[col.field]}}
						</td>
					</tr>
				</ng-template>
			</p-treeTable>
		</div>
	</div>
	<div class="col-12">
		<div class="card">
			<h5>Horizontal Tree</h5>
			<p-tree [value]="files3" layout="horizontal" selectionMode="single" [(selection)]="selectedFiles3"></p-tree>
		</div>
	</div>
</div>

================
File: src/app/demo/components/uikit/tree/treedemo.component.ts
================
import { Component, OnInit } from '@angular/core';
import { NodeService } from 'src/app/demo/service/node.service';
import { TreeNode} from 'primeng/api';

@Component({
    templateUrl: './treedemo.component.html'
})
export class TreeDemoComponent implements OnInit {

    files1: TreeNode<any> | TreeNode<any>[] | any[] | any;

    files2: TreeNode<any> | TreeNode<any>[] | any[] | any;

    files3: TreeNode<any> | TreeNode<any>[] | any[] | any;

    selectedFiles1: TreeNode<any> | TreeNode<any>[] | any[] | any;

    selectedFiles2: TreeNode<any> | TreeNode<any>[] | any[] | any;

    selectedFiles3: TreeNode | any = {};

    cols: any[] = [];

    constructor(private nodeService: NodeService) {}

    ngOnInit() {
        this.nodeService.getFiles().then(files => this.files1 = files);
        this.nodeService.getFilesystem().then(files => this.files2 = files);
        this.nodeService.getFiles().then(files => {
            this.files3 = [{
                label: 'Root',
                children: files
            }];
        });

        this.cols = [
            { field: 'name', header: 'Name' },
            { field: 'size', header: 'Size' },
            { field: 'type', header: 'Type' }
        ];
    }
}

================
File: src/app/demo/components/uikit/tree/treedemo.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { TreeDemoComponent } from './treedemo.component';
import { TreeDemoRoutingModule } from './treedemo-routing.module';
import { TreeModule } from 'primeng/tree';
import { TreeTableModule } from 'primeng/treetable';

@NgModule({
	imports: [
		CommonModule,
		TreeDemoRoutingModule,
		FormsModule,
		TreeModule,
		TreeTableModule
	],
	declarations: [TreeDemoComponent],
})
export class TreeDemoModule { }

================
File: src/app/demo/components/uikit/uikit-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';

@NgModule({
    imports: [RouterModule.forChild([
        { path: 'button', data: { breadcrumb: 'Button' }, loadChildren: () => import('./button/buttondemo.module').then(m => m.ButtonDemoModule) },
        { path: 'charts', data: { breadcrumb: 'Charts' }, loadChildren: () => import('./charts/chartsdemo.module').then(m => m.ChartsDemoModule) },
        { path: 'file', data: { breadcrumb: 'File' }, loadChildren: () => import('./file/filedemo.module').then(m => m.FileDemoModule) },
        { path: 'floatlabel', data: { breadcrumb: 'Float Label' }, loadChildren: () => import('./floatlabel/floatlabeldemo.module').then(m => m.FloatlabelDemoModule) },
        { path: 'formlayout', data: { breadcrumb: 'Form Layout' }, loadChildren: () => import('./formlayout/formlayoutdemo.module').then(m => m.FormLayoutDemoModule) },
        { path: 'input', data: { breadcrumb: 'Input' }, loadChildren: () => import('./input/inputdemo.module').then(m => m.InputDemoModule) },
        { path: 'invalidstate', data: { breadcrumb: 'Invalid State' }, loadChildren: () => import('./invalid/invalidstatedemo.module').then(m => m.InvalidStateDemoModule) },
        { path: 'list', data: { breadcrumb: 'List' }, loadChildren: () => import('./list/listdemo.module').then(m => m.ListDemoModule) },
        { path: 'media', data: { breadcrumb: 'Media' }, loadChildren: () => import('./media/mediademo.module').then(m => m.MediaDemoModule) },
        { path: 'message', data: { breadcrumb: 'Message' }, loadChildren: () => import('./messages/messagesdemo.module').then(m => m.MessagesDemoModule) },
        { path: 'misc', data: { breadcrumb: 'Misc' }, loadChildren: () => import('./misc/miscdemo.module').then(m => m.MiscDemoModule) },
        { path: 'overlay', data: { breadcrumb: 'Overlay' }, loadChildren: () => import('./overlays/overlaysdemo.module').then(m => m.OverlaysDemoModule) },
        { path: 'panel', data: { breadcrumb: 'Panel' }, loadChildren: () => import('./panels/panelsdemo.module').then(m => m.PanelsDemoModule) },
        { path: 'table', data: { breadcrumb: 'Table' }, loadChildren: () => import('./table/tabledemo.module').then(m => m.TableDemoModule) },
        { path: 'tree', data: { breadcrumb: 'Tree' }, loadChildren: () => import('./tree/treedemo.module').then(m => m.TreeDemoModule) },
        { path: 'menu', data: { breadcrumb: 'Menu' }, loadChildren: () => import('./menus/menus.module').then(m => m.MenusModule) },
        { path: '**', redirectTo: '/notfound' }
    ])],
    exports: [RouterModule]
})
export class UIkitRoutingModule { }

================
File: src/app/demo/components/uikit/uikit.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { UIkitRoutingModule } from './uikit-routing.module';

@NgModule({
	imports: [
		CommonModule,
		UIkitRoutingModule
	]
})
export class UIkitModule { }

================
File: src/app/demo/components/utilities/colors/colors.component.html
================
<div class="card">
	<h2>Colors</h2>
	<p>Each PrimeNG theme exports its own color palette.</p>

	<h4>Getting Started</h4>
	<p>Colors are exported as CSS variables and used with the standard <span class="text-primary font-medium">var</span> syntax e.g. <span class="text-primary font-medium">var(--text-color)</span>.</p>
	
<pre class="app-code"><code>&lt;span [ngStyle]="&#123;color:'var(--text-color)'&#125;"&gt;&lt;/span&gt;</code></pre>

	<h4>PrimeFlex Integration</h4>
	<p>Color utility classes of PrimeFlex such as background, text and border use the exported CSS variables from the theme so PrimeFlex or PrimeBlocks
		are perfectly compatible with the provided themes.
	</p>

<pre class="app-code"><code>&lt;div class="bg-blue-500"&gt;&lt;/div&gt;</code></pre>

	<h4>Exported Colors</h4>
	<p>Following is the list of colors exported as CSS variables from the theme.</p>
	<div class="card">
		<table class="w-full">
			<thead>
				<tr>
					<th class="text-900 text-left p-2">Variable</th>
					<th class="text-900 text-left p-2">Description</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td class="border-bottom-1 surface-border p-2"><span class="font-medium">--text-color</span></td>
					<td class="border-bottom-1 surface-border p-2">Font text color.</td>
				</tr>
				<tr>
					<td class="border-bottom-1 surface-border p-2"><span class="font-medium">--text-color-secondary</span></td>
					<td class="border-bottom-1 surface-border p-2">Muted font text color with a secondary level.</td>
				</tr>
				<tr>
					<td class="border-bottom-1 surface-border p-2"><span class="font-medium">--primary-color</span></td>
					<td class="border-bottom-1 surface-border p-2">Primary color of the theme.</td>
				</tr>
				<tr>
					<td class="border-bottom-1 surface-border p-2"><span class="font-medium">--primary-color-text</span></td>
					<td class="border-bottom-1 surface-border p-2">Text color when background is primary color.</td>
				</tr>
				<tr>
					<td class="border-bottom-1 surface-border p-2"><span class="font-medium">--font-family</span></td>
					<td class="border-bottom-1 surface-border p-2">Font family of the theme.</td>
				</tr>
				<tr>
					<td class="border-bottom-1 surface-border p-2"><span class="font-medium">--surface-ground</span></td>
					<td class="border-bottom-1 surface-border p-2">Base ground color.</td>
				</tr>
				<tr>
					<td class="border-bottom-1 surface-border p-2"><span class="font-medium">--surface-section</span></td>
					<td class="border-bottom-1 surface-border p-2">Color of a section on a ground surface.</td>
				</tr>
				<tr>
					<td class="border-bottom-1 surface-border p-2"><span class="font-medium">--surface-card</span></td>
					<td class="border-bottom-1 surface-border p-2">Color of a surface used as a card.</td>
				</tr>
				<tr>
					<td class="border-bottom-1 surface-border p-2"><span class="font-medium">--surface-overlay</span></td>
					<td class="border-bottom-1 surface-border p-2">Color of overlay surfaces.</td>
				</tr>
				<tr>
					<td class="border-bottom-1 surface-border p-2"><span class="font-medium">--surface-border</span></td>
					<td class="border-bottom-1 surface-border p-2">Color of a divider.</td>
				</tr>
				<tr>
					<td class="border-bottom-1 surface-border p-2"><span class="font-medium">--surface-hover</span></td>
					<td class="border-bottom-1 surface-border p-2">Color of an element in hover state.</td>
				</tr>
				<tr>
					<td class="border-bottom-1 surface-border p-2"><span class="font-medium">--focus-ring</span></td>
					<td class="border-bottom-1 surface-border p-2">Box shadow of a focused item.</td>
				</tr>
				<tr>
					<td class="border-bottom-1 surface-border p-2"><span class="font-medium">--maskbg</span></td>
					<td class="border-bottom-1 surface-border p-2">Background color of an overlay mask.</td>
				</tr>
				<tr>
					<td class="p-2"><span class="font-medium">--border-radius</span></td>
					<td class="p-2">Border radius of an element.</td>
				</tr>
			</tbody>
		</table>
	</div>

	<h4>Color Palette</h4>
	<p>A palette consists of 9 colors where each color provides tints/shades from 50 to 900.</p>

	<div class="card">
		<div class="flex flex-wrap">
			<div *ngFor="let color of colors" class="flex flex-column mr-6 mb-6">
				<div *ngFor="let shade of shades">
					<div *ngIf="shade !== 0" class="flex align-items-center w-19rem  p-3 font-bold" [ngStyle]="{backgroundColor:'var(--'+color+'-'+shade, color: (shade > 500 ? '#fff': '#000')}">
						{{color}}-{{shade}}
					</div>
				</div>
			</div>
		</div>
	</div>
	
	<h4>Surfaces</h4>
	<p>In addition, a theme brings a special palette called surfaces that can be used as the base when designing the surface layers and separators.</p>
	<div class="card">
		<div class="flex flex-column">
			<div *ngFor="let shade of shades">
				<div class="flex align-items-center w-19rem  p-3 font-bold" [ngStyle]="{backgroundColor:'var(--surface-'+shade, color: (colorScheme ? (shade > 400 ? '#000': '#fff') : (shade > 500 ? '#fff' : '#000'))}">
					surface-{{shade}}
				</div>
			</div>
		</div>
	</div>
</div>

================
File: src/app/demo/components/utilities/colors/colors.component.ts
================
import { Component } from '@angular/core';
import { LayoutService } from 'src/app/layout/service/app.layout.service';

@Component({
    templateUrl: './colors.component.html',
})
export class ColorsComponent {
    colors: any[] = [
        'blue',
        'green',
        'yellow',
        'cyan',
        'pink',
        'indigo',
        'red',
        'teal',
        'orange',
        'bluegray',
        'purple',
        'gray',
        'primary',
    ];

    shades: any[] = [0, 50, 100, 200, 300, 400, 500, 600, 700, 800, 900];

    constructor(private layoutService: LayoutService) {}

    get colorScheme() {
        return this.layoutService.config().colorScheme === 'light'
            ? false
            : true;
    }
}

================
File: src/app/demo/components/utilities/icons/icons.component.html
================
<div class="card">
	<h2>Icons</h2>

	<h4>Download</h4>
<pre class="app-code"><code>npm install primeicons --save</code></pre>

	<h4>Getting Started</h4>
	<p>PrimeIcons use the <strong>pi pi-&#123;icon&#125;</strong> syntax such as <strong>pi pi-check</strong>.
		A standalone icon can be displayed using an element such as <i>i</i> or <i>span</i></p>

<pre class="app-code"><code>&lt;i class="pi pi-check"&gt;&lt;/i&gt;
&lt;i class="pi pi-times"&gt;&lt;/i&gt;</code></pre>

	<i class="pi pi-check" style="margin-right: .5rem"></i>
	<i class="pi pi-times"></i>

	<h4>Size</h4>
	<p>Size of the icons can easily be changed using font-size property.</p>

<pre class="app-code"><code>&lt;i class="pi pi-check"&gt;&lt;/i&gt;</code></pre>

	<i class="pi pi-check"></i>

<pre class="app-code"><code>&lt;i class="pi pi-check" style="font-size: 2rem"&gt;&lt;/i&gt;</code></pre>

	<i class="pi pi-check" style="font-size: 2rem"></i>

	<h4>Spinning Animation</h4>
	<p>Special pi-spin class applies infinite rotate to an icon.</p>

<pre class="app-code"><code>&lt;i class="pi pi-spin pi-spinner" style="font-size: 2rem"&gt;&lt;/i&gt;</code></pre>

	<i class="pi pi-spin pi-spinner" style="font-size: 2rem"></i>

	<h4>List of Icons</h4>
	<p>Here is the current list of PrimeIcons, more icons will be added periodically. You may also <a class="text-primary hover:underline" href="https://github.com/primefaces/primeicons/issues">request new icons</a> at the issue tracker.</p>
	<div>
		<input class="icon-filter" (input)="onFilter($event)" pInputText placeholder="Search an icon" class="w-full p-3 mt-3 mb-5 w-full p-3 mt-3 mb-5">
	</div>

	<div class="grid text-center">
		<div class="col-6 sm:col-4 lg:col-3 xl:col-2 pb-5" *ngFor="let icon of filteredIcons">
			<i class="text-2xl pi pi-{{icon.properties.name}}"></i>
			<div>pi-{{icon.properties.name}}</div>
		</div>
	</div>
</div>

================
File: src/app/demo/components/utilities/icons/icons.component.ts
================
import { Component, OnInit } from '@angular/core';
import { IconService } from 'src/app/demo/service/icon.service';

@Component({
    templateUrl: './icons.component.html',
})
export class IconsComponent implements OnInit {

    icons: any[] = [];

    filteredIcons: any[] = [];

    selectedIcon: any;

    constructor(private iconService: IconService) { }

    ngOnInit() {
        this.iconService.getIcons().subscribe(data => {
            data = data.filter(value => {
                return value.icon.tags.indexOf('deprecate') === -1;
            });

            let icons = data;
            icons.sort((icon1, icon2) => {
                if (icon1.properties.name < icon2.properties.name)
                    return -1;
                else if (icon1.properties.name < icon2.properties.name)
                    return 1;
                else
                    return 0;
            });

            this.icons = icons;
            this.filteredIcons = data;
        });
    }

    onFilter(event: Event): void {
        const searchText = (event.target as HTMLInputElement).value;

        if (!searchText) {
            this.filteredIcons = this.icons;
        }
        else {
            this.filteredIcons = this.icons.filter(it => {
                return it.icon.tags[0].includes(searchText);
            });
        }
    }
}

================
File: src/app/demo/components/utilities/utilities-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { ColorsComponent } from './colors/colors.component';
import { IconsComponent } from './icons/icons.component';

@NgModule({
    imports: [RouterModule.forChild([
        { path: 'icons', data: { breadcrumb: 'Prime Icons' }, component: IconsComponent },
        { path: 'colors', data: { breadcrumb: 'Colors' }, component: ColorsComponent },
        { path: '**', redirectTo: '/notfound' }
    ])],
    exports: [RouterModule]
})
export class UtilitiesRoutingModule { }

================
File: src/app/demo/components/utilities/utilities.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { IconsComponent } from './icons/icons.component';
import { UtilitiesRoutingModule } from './utilities-routing.module';
import { InputTextModule } from 'primeng/inputtext';
import { ColorsComponent } from './colors/colors.component';

@NgModule({
    imports: [
        CommonModule,
        UtilitiesRoutingModule,
        InputTextModule
    ],
    declarations: [IconsComponent, ColorsComponent]
})
export class UtilitiesModule { }

================
File: src/app/demo/models/product.model.ts
================
export interface Product {
    id: string;
    name: string;
    category: string;
    showInSupportTool: boolean;
    showInRegistration: boolean;
    showInDashboard: boolean;
    isActive: boolean;
  }

================
File: src/app/demo/service/auth.service.spec.ts
================
import { TestBed } from '@angular/core/testing';

import { AuthService } from './auth.service';

describe('AuthService', () => {
  let service: AuthService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(AuthService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});

================
File: src/app/demo/service/country.service.ts
================
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';

@Injectable({
	providedIn: 'root',
})
export class CountryService {

	constructor(private http: HttpClient) { }

	getCountries() {
		return this.http.get<any>('assets/demo/data/countries.json')
			.toPromise()
			.then(res => res.data as any[])
			.then(data => data);
	}
}

================
File: src/app/demo/service/customer.service.ts
================
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Customer } from 'src/app/demo/api/customer';

@Injectable({
    providedIn: 'root',
})
export class CustomerService {

    constructor(private http: HttpClient) { }

    getCustomersSmall() {
        return this.http.get<any>('assets/demo/data/customers-small.json')
            .toPromise()
            .then(res => res.data as Customer[])
            .then(data => data);
    }

    getCustomersMedium() {
        return this.http.get<any>('assets/demo/data/customers-medium.json')
            .toPromise()
            .then(res => res.data as Customer[])
            .then(data => data);
    }

    getCustomersLarge() {
        return this.http.get<any>('assets/demo/data/customers-large.json')
            .toPromise()
            .then(res => res.data as Customer[])
            .then(data => data);
    }

}

================
File: src/app/demo/service/event.service.ts
================
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';

@Injectable()
export class EventService {

    constructor(private http: HttpClient) { }

    getEvents() {
        return this.http.get<any>('assets/demo/data/scheduleevents.json')
            .toPromise()
            .then(res => res.data as any[])
            .then(data => data);
    }
}

================
File: src/app/demo/service/graphql.service.ts
================
import { Injectable } from '@angular/core';
import { Apollo, gql } from 'apollo-angular';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class GraphQlService {

  constructor(private apollo: Apollo) { }

}

================
File: src/app/demo/service/icon.service.ts
================
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map } from 'rxjs/operators';

@Injectable({
    providedIn: 'root',
})
export class IconService {

    constructor(private http: HttpClient) { }

    icons: any[] = [];

    selectedIcon: any;

    apiUrl = 'assets/demo/data/icons.json';

    getIcons() {
        return this.http.get(this.apiUrl).pipe(map((response: any) => {
            this.icons = response.icons;
            return this.icons;
        }));
    }
}

================
File: src/app/demo/service/member.service.ts
================
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Member } from 'src/app/demo/api/member';

@Injectable({
    providedIn: 'root',
})
export class MemberService {

    constructor(private http: HttpClient) { }

    getMembers() {
        return this.http.get<any>('assets/demo/data/members.json')
            .toPromise()
            .then(res => res.data as Member[])
            .then(data => data);
    }
}

================
File: src/app/demo/service/node.service.ts
================
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';

import { TreeNode } from 'primeng/api';

@Injectable({
	providedIn: 'root',
})
export class NodeService {

	constructor(private http: HttpClient) { }

	getFiles() {
		return this.http.get<any>('assets/demo/data/files.json')
			.toPromise()
			.then(res => res.data as TreeNode[]);
	}

	getLazyFiles() {
		return this.http.get<any>('assets/demo/data/files-lazy.json')
			.toPromise()
			.then(res => res.data as TreeNode[]);
	}

	getFilesystem() {
		return this.http.get<any>('assets/demo/data/filesystem.json')
			.toPromise()
			.then(res => res.data as TreeNode[]);
	}

	getLazyFilesystem() {
		return this.http.get<any>('assets/demo/data/filesystem-lazy.json')
			.toPromise()
			.then(res => res.data as TreeNode[]);
	}
}

================
File: src/app/demo/service/photo.service.ts
================
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';

import { Image } from 'src/app/demo/api/image';

@Injectable({
	providedIn: 'root',
})
export class PhotoService {

	constructor(private http: HttpClient) { }

	getImages() {
		return this.http.get<any>('assets/demo/data/photos.json')
			.toPromise()
			.then(res => res.data as Image[])
			.then(data => data);
	}
}

================
File: src/app/demo/service/repomix-output.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-08T21:47:56.818Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
auth.service.spec.ts
country.service.ts
customer.service.ts
event.service.ts
graphql.service.ts
icon.service.ts
member.service.ts
node.service.ts
photo.service.ts
urlparam.service.ts

================================================================
Repository Files
================================================================

================
File: auth.service.spec.ts
================
import { TestBed } from '@angular/core/testing';

import { AuthService } from './auth.service';

describe('AuthService', () => {
  let service: AuthService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(AuthService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});

================
File: country.service.ts
================
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';

@Injectable({
	providedIn: 'root',
})
export class CountryService {

	constructor(private http: HttpClient) { }

	getCountries() {
		return this.http.get<any>('assets/demo/data/countries.json')
			.toPromise()
			.then(res => res.data as any[])
			.then(data => data);
	}
}

================
File: customer.service.ts
================
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Customer } from 'src/app/demo/api/customer';

@Injectable({
    providedIn: 'root',
})
export class CustomerService {

    constructor(private http: HttpClient) { }

    getCustomersSmall() {
        return this.http.get<any>('assets/demo/data/customers-small.json')
            .toPromise()
            .then(res => res.data as Customer[])
            .then(data => data);
    }

    getCustomersMedium() {
        return this.http.get<any>('assets/demo/data/customers-medium.json')
            .toPromise()
            .then(res => res.data as Customer[])
            .then(data => data);
    }

    getCustomersLarge() {
        return this.http.get<any>('assets/demo/data/customers-large.json')
            .toPromise()
            .then(res => res.data as Customer[])
            .then(data => data);
    }

}

================
File: event.service.ts
================
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';

@Injectable()
export class EventService {

    constructor(private http: HttpClient) { }

    getEvents() {
        return this.http.get<any>('assets/demo/data/scheduleevents.json')
            .toPromise()
            .then(res => res.data as any[])
            .then(data => data);
    }
}

================
File: graphql.service.ts
================
import { Injectable } from '@angular/core';
import { Apollo, gql } from 'apollo-angular';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class GraphQlService {

  constructor(private apollo: Apollo) { }

}

================
File: icon.service.ts
================
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map } from 'rxjs/operators';

@Injectable({
    providedIn: 'root',
})
export class IconService {

    constructor(private http: HttpClient) { }

    icons: any[] = [];

    selectedIcon: any;

    apiUrl = 'assets/demo/data/icons.json';

    getIcons() {
        return this.http.get(this.apiUrl).pipe(map((response: any) => {
            this.icons = response.icons;
            return this.icons;
        }));
    }
}

================
File: member.service.ts
================
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Member } from 'src/app/demo/api/member';

@Injectable({
    providedIn: 'root',
})
export class MemberService {

    constructor(private http: HttpClient) { }

    getMembers() {
        return this.http.get<any>('assets/demo/data/members.json')
            .toPromise()
            .then(res => res.data as Member[])
            .then(data => data);
    }
}

================
File: node.service.ts
================
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';

import { TreeNode } from 'primeng/api';

@Injectable({
	providedIn: 'root',
})
export class NodeService {

	constructor(private http: HttpClient) { }

	getFiles() {
		return this.http.get<any>('assets/demo/data/files.json')
			.toPromise()
			.then(res => res.data as TreeNode[]);
	}

	getLazyFiles() {
		return this.http.get<any>('assets/demo/data/files-lazy.json')
			.toPromise()
			.then(res => res.data as TreeNode[]);
	}

	getFilesystem() {
		return this.http.get<any>('assets/demo/data/filesystem.json')
			.toPromise()
			.then(res => res.data as TreeNode[]);
	}

	getLazyFilesystem() {
		return this.http.get<any>('assets/demo/data/filesystem-lazy.json')
			.toPromise()
			.then(res => res.data as TreeNode[]);
	}
}

================
File: photo.service.ts
================
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';

import { Image } from 'src/app/demo/api/image';

@Injectable({
	providedIn: 'root',
})
export class PhotoService {

	constructor(private http: HttpClient) { }

	getImages() {
		return this.http.get<any>('assets/demo/data/photos.json')
			.toPromise()
			.then(res => res.data as Image[])
			.then(data => data);
	}
}

================
File: urlparam.service.ts
================
import { Injectable } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

@Injectable({
  providedIn: 'root',
})
export class UrlParamService {
  constructor(private route: ActivatedRoute, private router: Router) {}

  // Get a single query parameter by key
  getQueryParam(key: string): string | null {
    return this.route.snapshot.queryParamMap.get(key);
  }

  // Get all query parameters as an object
  getAllQueryParams(): { [key: string]: string } {
    return this.route.snapshot.queryParams;
  }

  // Get a query parameter as an Observable
  getQueryParamAsObservable(key: string): Observable<string | null> {
    return this.route.queryParamMap.pipe(map((params) => params.get(key)));
  }

  // Navigate and update a query parameter
  setQueryParam(key: string, value: string): void {
    const queryParams = { ...this.route.snapshot.queryParams, [key]: value };
    this.router.navigate([], {
      relativeTo: this.route,
      queryParams,
      queryParamsHandling: 'merge', // Merge with existing parameters
    });
  }
}

================
File: src/app/demo/service/urlparam.service.ts
================
import { Injectable } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

@Injectable({
  providedIn: 'root',
})
export class UrlParamService {
  constructor(private route: ActivatedRoute, private router: Router) {}

  // Get a single query parameter by key
  getQueryParam(key: string): string | null {
    return this.route.snapshot.queryParamMap.get(key);
  }

  // Get all query parameters as an object
  getAllQueryParams(): { [key: string]: string } {
    return this.route.snapshot.queryParams;
  }

  // Get a query parameter as an Observable
  getQueryParamAsObservable(key: string): Observable<string | null> {
    return this.route.queryParamMap.pipe(map((params) => params.get(key)));
  }

  // Navigate and update a query parameter
  setQueryParam(key: string, value: string): void {
    const queryParams = { ...this.route.snapshot.queryParams, [key]: value };
    this.router.navigate([], {
      relativeTo: this.route,
      queryParams,
      queryParamsHandling: 'merge', // Merge with existing parameters
    });
  }
}

================
File: src/app/environment.ts
================
export const environment = {
    production: false,
    aws: {
      Auth: {
        Cognito: {
          userPoolId: 'us-east-1_p82n11FBH',
          userPoolClientId: '74m56ch6bgqq20jt87caslsvuo',
        }
      }
    },
    graphqlWsUri: 'wss://rds-cloud.hasura.app/v1/graphql',
    graphqlUri: 'https://rds-cloud.hasura.app/v1/graphql',
    authorizationToken: 'Y263c8aP946LCNodCNDkdEi3AyZD0HGACw3QUwqQ59nnsk9Lk815zDAjLg1LvIha',     
  };

================
File: src/app/graphql.module.ts
================
import { split } from '@apollo/client/core';
import { HttpLink } from 'apollo-angular/http';
import { getMainDefinition } from '@apollo/client/utilities';

import { NgModule } from '@angular/core';
import { ApolloModule, APOLLO_OPTIONS } from 'apollo-angular';
import { InMemoryCache } from '@apollo/client/core';
import { WebSocketLink } from '@apollo/client/link/ws';
import { HttpHeaders } from '@angular/common/http';
import { environment } from './environment';


@NgModule({
  exports: [ApolloModule],
  providers: [
    {
      provide: APOLLO_OPTIONS,
      useFactory: (httpLink: HttpLink) => {
        const token = localStorage.getItem('token');

        const http = httpLink.create({
          uri: environment.graphqlUri, // todo: store as env vars
          headers: new HttpHeaders().set('X-Hasura-Admin-Secret', environment.authorizationToken), 
        });

        const ws = new WebSocketLink({
          uri: environment.graphqlWsUri,
          options: {
            reconnect: true,
            connectionParams: {
              headers: {
                Authorization: token ? `Bearer ${token}` : '',
              },
            },
            lazy: true, // Only connect when a subscription is initiated
            inactivityTimeout: 60000, // Disconnect if no active subscriptions for 60 seconds
          },
        });

        const link = split(
          ({ query }) => {
            const definition = getMainDefinition(query);
            return (
              definition.kind === 'OperationDefinition' &&
              definition.operation === 'subscription'
            );
          },
          ws,
          http,
        );

        return {
          link,
          cache: new InMemoryCache(),
        };
      },
      deps: [HttpLink],
    },
  ],
})
export class GraphQLModule {}

================
File: src/app/layout/api/menuchangeevent.ts
================
export interface MenuChangeEvent {
    key: string;
    routeEvent?: boolean;
}

================
File: src/app/layout/app.breadcrumb.component.html
================
<nav class="layout-breadcrumb">
    <ol>
        <ng-template ngFor let-item let-last="last" [ngForOf]="breadcrumbs$ | async">
            <li>{{item.label}}</li>
            <li *ngIf="!last" class="layout-breadcrumb-chevron"> / </li>
        </ng-template>
    </ol>
</nav>

================
File: src/app/layout/app.breadcrumb.component.ts
================
import { Component } from '@angular/core';
import { ActivatedRouteSnapshot, NavigationEnd, Router } from '@angular/router';
import { BehaviorSubject } from 'rxjs';
import { filter } from 'rxjs/operators';

interface Breadcrumb {
    label: string;
    url?: string;
}

@Component({
    selector: 'app-breadcrumb',
    templateUrl: './app.breadcrumb.component.html'
})
export class AppBreadcrumbComponent {

    private readonly _breadcrumbs$ = new BehaviorSubject<Breadcrumb[]>([]);

    readonly breadcrumbs$ = this._breadcrumbs$.asObservable();

    constructor(private router: Router) {
        this.router.events.pipe(filter((event) => event instanceof NavigationEnd)).subscribe(event => {
            const root = this.router.routerState.snapshot.root;
            const breadcrumbs: Breadcrumb[] = [];
            this.addBreadcrumb(root, [], breadcrumbs);

            this._breadcrumbs$.next(breadcrumbs);
        });
    }

    private addBreadcrumb(route: ActivatedRouteSnapshot, parentUrl: string[], breadcrumbs: Breadcrumb[]) {
        const routeUrl = parentUrl.concat(route.url.map(url => url.path));
        const breadcrumb = route.data['breadcrumb'];
        const parentBreadcrumb = route.parent && route.parent.data ? route.parent.data['breadcrumb'] : null;

        if (breadcrumb && breadcrumb !== parentBreadcrumb) {
            breadcrumbs.push({
                label: route.data['breadcrumb'],
                url: '/' + routeUrl.join('/')
            });
        }

        if (route.firstChild) {
            this.addBreadcrumb(route.firstChild, routeUrl, breadcrumbs);
        }
    }

}

================
File: src/app/layout/app.layout.component.html
================
<div class="layout-container" [ngClass]="containerClass">
    <app-sidebar></app-sidebar>
    <div class="layout-content-wrapper">
        <app-topbar></app-topbar>
        <app-breadcrumb class="content-breadcrumb"></app-breadcrumb>
        <div class="layout-content">
            <router-outlet></router-outlet>
        </div>
    </div>
    <app-profilemenu></app-profilemenu>
    <app-config></app-config>
    <div class="layout-mask"></div>
</div>

================
File: src/app/layout/app.layout.component.ts
================
import { Component, OnDestroy, Renderer2, ViewChild } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { filter, Subscription } from 'rxjs';
import { MenuService } from './app.menu.service';
import { AppSidebarComponent } from './app.sidebar.component';
import { AppTopbarComponent } from './app.topbar.component';
import { LayoutService } from './service/app.layout.service';

@Component({
    selector: 'app-layout',
    templateUrl: './app.layout.component.html',
})
export class AppLayoutComponent implements OnDestroy {
    overlayMenuOpenSubscription: Subscription;

    menuOutsideClickListener: any;

    menuScrollListener: any;

    @ViewChild(AppSidebarComponent) appSidebar!: AppSidebarComponent;

    @ViewChild(AppTopbarComponent) appTopbar!: AppTopbarComponent;

    constructor(
        private menuService: MenuService,
        public layoutService: LayoutService,
        public renderer: Renderer2,
        public router: Router
    ) {
        this.overlayMenuOpenSubscription =
            this.layoutService.overlayOpen$.subscribe(() => {
                if (!this.menuOutsideClickListener) {
                    this.menuOutsideClickListener = this.renderer.listen(
                        'document',
                        'click',
                        (event) => {
                            const isOutsideClicked = !(
                                this.appSidebar.el.nativeElement.isSameNode(
                                    event.target
                                ) ||
                                this.appSidebar.el.nativeElement.contains(
                                    event.target
                                ) ||
                                this.appTopbar.menuButton.nativeElement.isSameNode(
                                    event.target
                                ) ||
                                this.appTopbar.menuButton.nativeElement.contains(
                                    event.target
                                )
                            );
                            if (isOutsideClicked) {
                                this.hideMenu();
                            }
                        }
                    );
                }

                if (
                    (this.layoutService.isHorizontal() ||
                        this.layoutService.isSlim() ||
                        this.layoutService.isSlimPlus()) &&
                    !this.menuScrollListener
                ) {
                    this.menuScrollListener = this.renderer.listen(
                        this.appSidebar.menuContainer.nativeElement,
                        'scroll',
                        (event) => {
                            if (this.layoutService.isDesktop()) {
                                this.hideMenu();
                            }
                        }
                    );
                }

                if (this.layoutService.state.staticMenuMobileActive) {
                    this.blockBodyScroll();
                }
            });

        this.router.events
            .pipe(filter((event) => event instanceof NavigationEnd))
            .subscribe(() => {
                this.hideMenu();
            });
    }

    blockBodyScroll(): void {
        if (document.body.classList) {
            document.body.classList.add('blocked-scroll');
        } else {
            document.body.className += ' blocked-scroll';
        }
    }

    unblockBodyScroll(): void {
        if (document.body.classList) {
            document.body.classList.remove('blocked-scroll');
        } else {
            document.body.className = document.body.className.replace(
                new RegExp(
                    '(^|\\b)' +
                        'blocked-scroll'.split(' ').join('|') +
                        '(\\b|$)',
                    'gi'
                ),
                ' '
            );
        }
    }

    hideMenu() {
        this.layoutService.state.overlayMenuActive = false;
        this.layoutService.state.staticMenuMobileActive = false;
        this.layoutService.state.menuHoverActive = false;
        this.menuService.reset();

        if (this.menuOutsideClickListener) {
            this.menuOutsideClickListener();
            this.menuOutsideClickListener = null;
        }

        if (this.menuScrollListener) {
            this.menuScrollListener();
            this.menuScrollListener = null;
        }

        this.unblockBodyScroll();
    }

    get containerClass() {
        return {
            'layout-light': this.layoutService.config().colorScheme === 'light',
            'layout-dim': this.layoutService.config().colorScheme === 'dim',
            'layout-dark': this.layoutService.config().colorScheme === 'dark',
            'layout-colorscheme-menu':
                this.layoutService.config().menuTheme === 'colorScheme',
            'layout-primarycolor-menu':
                this.layoutService.config().menuTheme === 'primaryColor',
            'layout-transparent-menu':
                this.layoutService.config().menuTheme === 'transparent',
            'layout-overlay':
                this.layoutService.config().menuMode === 'overlay',
            'layout-static': this.layoutService.config().menuMode === 'static',
            'layout-slim': this.layoutService.config().menuMode === 'slim',
            'layout-slim-plus':
                this.layoutService.config().menuMode === 'slim-plus',
            'layout-horizontal':
                this.layoutService.config().menuMode === 'horizontal',
            'layout-reveal': this.layoutService.config().menuMode === 'reveal',
            'layout-drawer': this.layoutService.config().menuMode === 'drawer',
            'layout-static-inactive':
                this.layoutService.state.staticMenuDesktopInactive &&
                this.layoutService.config().menuMode === 'static',
            'layout-overlay-active': this.layoutService.state.overlayMenuActive,
            'layout-mobile-active':
                this.layoutService.state.staticMenuMobileActive,
            'p-input-filled':
                this.layoutService.config().inputStyle === 'filled',
            'p-ripple-disabled': !this.layoutService.config().ripple,
            'layout-sidebar-active': this.layoutService.state.sidebarActive,
            'layout-sidebar-anchored': this.layoutService.state.anchored,
        };
    }

    ngOnDestroy() {
        if (this.overlayMenuOpenSubscription) {
            this.overlayMenuOpenSubscription.unsubscribe();
        }

        if (this.menuOutsideClickListener) {
            this.menuOutsideClickListener();
        }
    }
}

================
File: src/app/layout/app.layout.module.ts
================
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { InputTextModule } from 'primeng/inputtext';
import { SidebarModule } from 'primeng/sidebar';
import { BadgeModule } from 'primeng/badge';
import { RadioButtonModule } from 'primeng/radiobutton';
import { InputSwitchModule } from 'primeng/inputswitch';
import { TooltipModule } from 'primeng/tooltip';
import { RippleModule } from 'primeng/ripple';
import { AppConfigModule } from './config/app.config.module';
import { AppLayoutComponent } from './app.layout.component';
import { AppBreadcrumbComponent } from './app.breadcrumb.component';
import { AppSidebarComponent } from './app.sidebar.component';
import { AppTopbarComponent } from './app.topbar.component';
import { AppProfileSidebarComponent } from './app.profilesidebar.component';
import { AppMenuComponent } from './app.menu.component';
import { AppMenuitemComponent } from './app.menuitem.component';
import { RouterModule } from '@angular/router';
import { ButtonModule } from 'primeng/button';

@NgModule({
    declarations: [
        AppLayoutComponent,
        AppBreadcrumbComponent,
        AppSidebarComponent,
        AppTopbarComponent,
        AppProfileSidebarComponent,
        AppMenuComponent,
        AppMenuitemComponent
    ],
    imports: [
        BrowserModule,
        FormsModule,
        HttpClientModule,
        BrowserAnimationsModule,
        InputTextModule,
        SidebarModule,
        BadgeModule,
        RadioButtonModule,
        InputSwitchModule,
        ButtonModule,
        TooltipModule,
        RippleModule,
        RouterModule,
        AppConfigModule
    ]
})
export class AppLayoutModule { }

================
File: src/app/layout/app.menu.component.html
================
<ul class="layout-menu">
    <ng-container *ngFor="let item of model; let i = index;">
        <li app-menuitem *ngIf="!item.separator" [item]="item" [index]="i" [root]="true"></li>
        <li *ngIf="item.separator" class="menu-separator"></li>
    </ng-container>
</ul>

================
File: src/app/layout/app.menu.component.ts
================
import { OnInit } from '@angular/core';
import { Component } from '@angular/core';

@Component({
    selector: 'app-menu',
    templateUrl: './app.menu.component.html'
})
export class AppMenuComponent implements OnInit {

    model: any[] = [];

    ngOnInit() {
        this.model = [
            {
                label: 'Dashboards',
                icon: 'pi pi-home',
                items: [
                    {
                        label: 'Home',
                        icon: 'pi pi-fw pi-home',
                        routerLink: ['/']
                    }
                ]
            }
        ];
    }
}

================
File: src/app/layout/app.menu.service.ts
================
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { MenuChangeEvent } from './api/menuchangeevent';

@Injectable({
    providedIn: 'root'
})
export class MenuService {

    private menuSource = new Subject<MenuChangeEvent>();
    private resetSource = new Subject();

    menuSource$ = this.menuSource.asObservable();
    resetSource$ = this.resetSource.asObservable();

    onMenuStateChange(event: MenuChangeEvent) {
        this.menuSource.next(event);
    }

    reset() {
        this.resetSource.next(true);
    }
}

================
File: src/app/layout/app.menuitem.component.ts
================
import { ChangeDetectorRef, Component, ElementRef, HostBinding, Input, OnDestroy, OnInit, SimpleChanges, ViewChild } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { animate, state, style, transition, trigger,AnimationEvent } from '@angular/animations';
import { Subscription } from 'rxjs';
import { filter } from 'rxjs/operators';
import { MenuService } from './app.menu.service';
import { LayoutService } from './service/app.layout.service';
import { AppSidebarComponent } from './app.sidebar.component';
import {DomHandler} from 'primeng/dom';

@Component({
    // eslint-disable-next-line @angular-eslint/component-selector
    selector: '[app-menuitem]',
    template: `
    <ng-container>
    <div *ngIf="root && item.visible !== false" class="layout-menuitem-root-text">{{ item.label }}</div>
    <a
        *ngIf="(!item.routerLink || item.items) && item.visible !== false"
        [attr.href]="item.url"
        (click)="itemClick($event)"
        (mouseenter)="onMouseEnter()"
        [ngClass]="item.class"
        [attr.target]="item.target"
        tabindex="0"
        pRipple
        [pTooltip]="item.label"
        [tooltipDisabled]="!(isSlim && root && !active)"
    >
        <i [ngClass]="item.icon" class="layout-menuitem-icon"></i>
        <span class="layout-menuitem-text">{{ item.label }}</span>
        <i class="pi pi-fw pi-angle-down layout-submenu-toggler" *ngIf="item.items"></i>
    </a>
    <a
        *ngIf="item.routerLink && !item.items && item.visible !== false"
        (click)="itemClick($event)"
        (mouseenter)="onMouseEnter()"
        [ngClass]="item.class"
        [routerLink]="item.routerLink"
        routerLinkActive="active-route"
        [routerLinkActiveOptions]="item.routerLinkActiveOptions || { paths: 'exact', queryParams: 'ignored', matrixParams: 'ignored', fragment: 'ignored' }"
        [fragment]="item.fragment"
        [queryParamsHandling]="item.queryParamsHandling"
        [preserveFragment]="item.preserveFragment"
        [skipLocationChange]="item.skipLocationChange"
        [replaceUrl]="item.replaceUrl"
        [state]="item.state"
        [queryParams]="item.queryParams"
        [attr.target]="item.target"
        tabindex="0"
        pRipple
        [pTooltip]="item.label"
        [tooltipDisabled]="!(isSlim && root)"
    >
        <i [ngClass]="item.icon" class="layout-menuitem-icon"></i>
        <span class="layout-menuitem-text">{{ item.label }}</span>
        <i class="pi pi-fw pi-angle-down layout-submenu-toggler" *ngIf="item.items"></i>
    </a>

    <ul #submenu *ngIf="item.items && item.visible !== false" [@children]="submenuAnimation" (@children.done)="onSubmenuAnimated($event)">
    <ng-template ngFor let-child let-i="index" [ngForOf]="item.items">
        <li app-menuitem [item]="child" [index]="i" [parentKey]="key" [class]="child.badgeClass"></li>
    </ng-template>
</ul>
</ng-container>
    `,
    animations: [
        trigger('children', [
            state('collapsed', style({
                height: '0'
            })),
            state('expanded', style({
                height: '*'
            })),
            state('hidden', style({
                display: 'none'
            })),
            state('visible', style({
                display: 'block'
            })),
            transition('collapsed <=> expanded', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))
        ])
    ]
})
export class AppMenuitemComponent implements OnInit, OnDestroy {

    @Input() item: any;

    @Input() index!: number;

    @Input() @HostBinding('class.layout-root-menuitem') root!: boolean;

    @Input() parentKey!: string;

    @ViewChild('submenu') submenu!: ElementRef;

    active = false;

    menuSourceSubscription: Subscription;

    menuResetSubscription: Subscription;

    key: string = "";

    constructor(public layoutService: LayoutService, private cd: ChangeDetectorRef, public router: Router,private appSidebar: AppSidebarComponent, private menuService: MenuService) {
        this.menuSourceSubscription = this.menuService.menuSource$.subscribe(value => {
            Promise.resolve(null).then(() => {
                if (value.routeEvent) {
                    this.active = (value.key === this.key || value.key.startsWith(this.key + '-')) ? true : false;
                }
                else {
                    if (value.key !== this.key && !value.key.startsWith(this.key + '-')) {
                        this.active = false;
                    }
                }
            });
        });

        this.menuResetSubscription = this.menuService.resetSource$.subscribe(() => {
            this.active = false;
        });

        this.router.events.pipe(filter(event => event instanceof NavigationEnd))
            .subscribe(params => {
                if (this.isSlimPlus || this.isSlim || this.isHorizontal) {
                    this.active = false;
                }
                else {
                    if (this.item.routerLink) {
                        this.updateActiveStateFromRoute();
                    }
                }
            });
    }

    ngOnInit() {
        this.key = this.parentKey ? this.parentKey + '-' + this.index : String(this.index);

        if (!(this.isSlimPlus || this.isSlim || this.isHorizontal) && this.item.routerLink) {
            this.updateActiveStateFromRoute();
        }
    }

    ngAfterViewChecked() {
        if (this.root && this.active && this.layoutService.isDesktop() && (this.layoutService.isHorizontal() || this.layoutService.isSlim()|| this.layoutService.isSlimPlus())) {
            this.calculatePosition(this.submenu?.nativeElement, this.submenu?.nativeElement.parentElement);
        }
    }

    updateActiveStateFromRoute() {
        let activeRoute = this.router.isActive(this.item.routerLink[0], { paths: 'exact', queryParams: 'ignored', matrixParams: 'ignored', fragment: 'ignored' });

        if (activeRoute) {
            this.menuService.onMenuStateChange({key: this.key, routeEvent: true});
        }
    }
    
    onSubmenuAnimated(event: AnimationEvent) {
        if (event.toState === 'visible' && this.layoutService.isDesktop() && (this.layoutService.isHorizontal() || this.layoutService.isSlim()|| this.layoutService.isSlimPlus())) {
            const el = <HTMLUListElement> event.element;
            const elParent = <HTMLUListElement> el.parentElement;
            this.calculatePosition(el, elParent);
        }
    }

    calculatePosition(overlay: HTMLElement, target: HTMLElement) {
        if (overlay) {
            const { left, top } = target.getBoundingClientRect();
            const [vWidth, vHeight] = [window.innerWidth, window.innerHeight];
            const [oWidth, oHeight] = [overlay.offsetWidth, overlay.offsetHeight];
            const scrollbarWidth = DomHandler.calculateScrollbarWidth();
            // reset
            overlay.style.top = '';
            overlay.style.left = '';
      
            if (this.layoutService.isHorizontal()) {
                const width = left + oWidth + scrollbarWidth;
                overlay.style.left = vWidth < width ? `${left - (width - vWidth)}px` : `${left}px`;
            } else if ( this.layoutService.isSlim() || this.layoutService.isSlimPlus()) {
                const height = top + oHeight;
                overlay.style.top = vHeight < height ? `${top - (height - vHeight)}px` : `${top}px`;
            }
        }
      }
    
    itemClick(event: Event) {
        // avoid processing disabled items
        if (this.item.disabled) {
            event.preventDefault();
            return;
        }

        // navigate with hover
        if (this.root && this.isSlim || this.isHorizontal || this.isSlimPlus) {
            this.layoutService.state.menuHoverActive = !this.layoutService.state.menuHoverActive;
        }

        // execute command
        if (this.item.command) {
            this.item.command({ originalEvent: event, item: this.item });
        }

        // toggle active state
        if (this.item.items) {
            this.active = !this.active;

            if (this.root && this.active && (this.isSlim || this.isHorizontal || this.isSlimPlus)) {
                this.layoutService.onOverlaySubmenuOpen();
            }
        }
        else {
            if (this.layoutService.isMobile()) {
                this.layoutService.state.staticMenuMobileActive = false;
            }

            if (this.isSlim || this.isHorizontal || this.isSlimPlus) {
                this.menuService.reset();
                this.layoutService.state.menuHoverActive = false;
            }
        }

        this.menuService.onMenuStateChange({key: this.key});
    }

    onMouseEnter() {
        // activate item on hover
        if (this.root && (this.isSlim || this.isHorizontal || this.isSlimPlus) && this.layoutService.isDesktop()) {
            if (this.layoutService.state.menuHoverActive) {
                this.active = true;
                this.menuService.onMenuStateChange({key: this.key});
            }
        }
    }

    get submenuAnimation() {
        if (this.layoutService.isDesktop() && (this.layoutService.isHorizontal() || this.layoutService.isSlim() || this.layoutService.isSlimPlus())){
            return this.active ? 'visible' : 'hidden';
        }
          
        else
            return this.root ? 'expanded' : (this.active ? 'expanded' : 'collapsed');
    }

    get isHorizontal() {
        return this.layoutService.isHorizontal();
    }

    get isSlim() {
        return this.layoutService.isSlim();
    }

    get isSlimPlus() {
        return this.layoutService.isSlimPlus();
    }

    @HostBinding('class.active-menuitem') 
    get activeClass() {
        return this.active && !this.root;
    }

    ngOnDestroy() {
        if (this.menuSourceSubscription) {
            this.menuSourceSubscription.unsubscribe();
        }

        if (this.menuResetSubscription) {
            this.menuResetSubscription.unsubscribe();
        }
    }
}

================
File: src/app/layout/app.profilesidebar.component.html
================
<p-sidebar [(visible)]="visible" position="right" [transitionOptions]="'.3s cubic-bezier(0, 0, 0.2, 1)'" styleClass="layout-profile-sidebar w-full sm:w-25rem">
    <div class="flex flex-column mx-auto md:mx-0">
        <span class="mb-2 font-semibold">Welcome</span>
        <span class="text-color-secondary font-medium mb-5">Isabella Andolini</span>

        <ul class="list-none m-0 p-0">
            <li>
                <a class="cursor-pointer flex surface-border mb-3 p-3 align-items-center border-1 surface-border border-round hover:surface-hover transition-colors transition-duration-150">
                    <span>
                        <i class="pi pi-user text-xl text-primary"></i>
                    </span>
                    <div class="ml-3">
                        <span class="mb-2 font-semibold">Profile</span>
                        <p class="text-color-secondary m-0">Lorem ipsum date visale</p>
                    </div>
                </a>
            </li>
            <li>
                <a class="cursor-pointer flex surface-border mb-3 p-3 align-items-center border-1 surface-border border-round hover:surface-hover transition-colors transition-duration-150">
                    <span>
                        <i class="pi pi-user text-xl text-primary"></i>
                    </span>
                    <div class="ml-3">
                        <span class="mb-2 font-semibold">Billing</span>
                        <p class="text-color-secondary m-0">Amet mimin mıollit</p>
                    </div>
                </a>
            </li>
            <li>
                <a class="cursor-pointer flex surface-border mb-3 p-3 align-items-center border-1 surface-border border-round hover:surface-hover transition-colors transition-duration-150">
                    <span>
                        <i class="pi pi-cog text-xl text-primary"></i>
                    </span>
                    <div class="ml-3">
                        <span class="mb-2 font-semibold">Settings</span>
                        <p class="text-color-secondary m-0">Exercitation veniam</p>
                    </div>
                </a>
            </li>
            <li>
                <a class="cursor-pointer flex surface-border mb-3 p-3 align-items-center border-1 surface-border border-round hover:surface-hover transition-colors transition-duration-150">
                    <span>
                        <i class="pi pi-power-off text-xl text-primary"></i>
                    </span>
                    <div class="ml-3">
                        <span class="mb-2 font-semibold">Sign Out</span>
                        <p class="text-color-secondary m-0">Sed ut perspiciatis</p>
                    </div>
                </a>
            </li>
        </ul>
    </div>

    <div class="flex flex-column mt-5 mx-auto md:mx-0">
        <span class="mb-2 font-semibold">Notifications</span>
        <span class="text-color-secondary font-medium mb-5">You have 3 notifications</span>

        <ul class="list-none m-0 p-0">
            <li>
                <a class="cursor-pointer flex surface-border mb-3 p-3 align-items-center border-1 surface-border border-round hover:surface-hover transition-colors transition-duration-150">
                    <span>
                        <i class="pi pi-comment text-xl text-primary"></i>
                    </span>
                    <div class="ml-3">
                        <span class="mb-2 font-semibold">Your post has new comments</span>
                        <p class="text-color-secondary m-0">5 min ago</p>
                    </div>
                </a>
            </li>
            <li>
                <a class="cursor-pointer flex surface-border mb-3 p-3 align-items-center border-1 surface-border border-round hover:surface-hover transition-colors transition-duration-150">
                    <span>
                        <i class="pi pi-trash text-xl text-primary"></i>
                    </span>
                    <div class="ml-3">
                        <span class="mb-2 font-semibold">Your post has been deleted</span>
                        <p class="text-color-secondary m-0">15min ago</p>
                    </div>
                </a>
            </li>
            <li>
                <a class="cursor-pointer flex surface-border mb-3 p-3 align-items-center border-1 surface-border border-round hover:surface-hover transition-colors transition-duration-150">
                    <span>
                        <i class="pi pi-folder text-xl text-primary"></i>
                    </span>
                    <div class="ml-3">
                        <span class="mb-2 font-semibold">Post has been updated</span>
                        <p class="text-color-secondary m-0">3h ago</p>
                    </div>
                </a>
            </li>
        </ul>
    </div>

    <div class="flex flex-column mt-5 mx-auto md:mx-0">
        <span class="mb-2 font-semibold">Messages</span>
        <span class="text-color-secondary font-medium mb-5">You have new messages</span>

        <ul class="list-none m-0 p-0">
            <li>
                <a class="cursor-pointer flex surface-border mb-3 p-3 align-items-center border-1 surface-border border-round hover:surface-hover transition-colors transition-duration-150">
                    <span>
                        <img src="assets/demo/images/avatar/circle/avatar-m-8.png" alt="Avatar" class="w-2rem h-2rem" />
                    </span>
                    <div class="ml-3">
                        <span class="mb-2 font-semibold">James Robinson</span>
                        <p class="text-color-secondary m-0">10 min ago</p>
                    </div>
                    <p-badge value="3" class="ml-auto"></p-badge>
                </a>
            </li>
            <li>
                <a class="cursor-pointer flex surface-border mb-3 p-3 align-items-center border-1 surface-border border-round hover:surface-hover transition-colors transition-duration-150">
                    <span>
                        <img src="assets/demo/images/avatar/circle/avatar-f-8.png" alt="Avatar" class="w-2rem h-2rem" />
                    </span>
                    <div class="ml-3">
                        <span class="mb-2 font-semibold">Mary Watson</span>
                        <p class="text-color-secondary m-0">15min ago</p>
                    </div>
                    <p-badge value="1" class="ml-auto"></p-badge>
                </a>
            </li>
            <li>
                <a class="cursor-pointer flex surface-border mb-3 p-3 align-items-center border-1 surface-border border-round hover:surface-hover transition-colors transition-duration-150">
                    <span>
                        <img src="assets/demo/images/avatar/circle/avatar-f-4.png" alt="Avatar" class="w-2rem h-2rem" />
                    </span>
                    <div class="ml-3">
                        <span class="mb-2 font-semibold">Aisha Webb</span>
                        <p class="text-color-secondary m-0">3h ago</p>
                    </div>
                    <p-badge value="2" class="ml-auto"></p-badge>
                </a>
            </li>
        </ul>
    </div>
</p-sidebar>

================
File: src/app/layout/app.profilesidebar.component.ts
================
import { Component } from '@angular/core';
import { LayoutService } from './service/app.layout.service';

@Component({
    selector: 'app-profilemenu',
    templateUrl: './app.profilesidebar.component.html'
})
export class AppProfileSidebarComponent {

    constructor(public layoutService: LayoutService) { }

    get visible(): boolean {
        return this.layoutService.state.profileSidebarVisible;
    }

    set visible(_val: boolean) {
        this.layoutService.state.profileSidebarVisible = _val;
    }
}

================
File: src/app/layout/app.sidebar.component.html
================
<div class="layout-sidebar" (mouseenter)="onMouseEnter()" (mouseleave)="onMouseLeave()">
    <div class="sidebar-header">
        <a [routerLink]="['/']" class="app-logo">
            <svg viewBox="0 0 150 150" fill="none" xmlns="http://www.w3.org/2000/svg" class="app-logo-normal" preserveAspectRatio="xMidYMid meet" width="100" height="100">
                <g transform="translate(0.000000,166.000000) scale(0.100000,-0.100000)"
fill="#000000" stroke="none">
<path d="M711 1539 c-77 -13 -184 -52 -249 -91 -32 -18 -95 -71 -142 -118
-144 -144 -213 -308 -213 -510 0 -128 20 -217 73 -325 93 -193 277 -342 480
-389 95 -23 268 -21 364 4 235 60 427 241 506 478 30 89 33 108 34 222 0 142
-15 211 -70 327 -88 185 -269 334 -469 387 -74 20 -242 28 -314 15z m279 -95
c116 -27 205 -79 300 -174 133 -132 190 -268 190 -452 0 -118 -14 -176 -67
-287 -161 -336 -587 -462 -910 -269 -72 42 -179 149 -221 221 -114 190 -121
423 -21 627 78 156 248 294 416 334 78 19 233 19 313 0z"/>
<path d="M705 1369 c-118 -40 -184 -76 -191 -106 -4 -14 5 -56 22 -103 l29
-81 -38 -35 c-80 -76 -85 -118 -20 -150 30 -15 61 -19 149 -19 l111 0 -19 -37
-20 -38 32 -52 c18 -29 41 -64 52 -77 19 -25 19 -25 -4 -38 -13 -7 -27 -12
-33 -12 -5 0 0 5 12 12 22 12 22 12 -24 92 -42 72 -45 82 -35 109 7 16 11 30
9 31 -10 5 -107 -9 -107 -16 0 -5 4 -9 8 -9 5 0 6 -14 4 -31 -3 -20 -1 -30 6
-25 11 7 25 -21 17 -35 -4 -5 2 -6 11 -2 14 5 16 1 12 -25 -4 -30 -4 -31 14
-15 17 15 18 15 18 0 0 -9 -13 -23 -28 -31 l-28 -14 13 -114 c6 -62 12 -140
13 -173 0 -33 5 -78 11 -100 8 -29 8 -40 0 -43 -16 -5 -14 -19 5 -26 8 -3 25
3 37 15 12 11 30 18 39 15 10 -2 16 -1 13 4 -2 4 9 10 26 14 49 9 137 7 144
-4 3 -5 -2 -10 -12 -11 -13 -1 -11 -3 7 -9 23 -7 23 -8 3 -9 -12 -1 -25 -6
-29 -13 -5 -8 0 -9 17 -5 13 4 30 7 38 7 8 0 11 6 7 16 -5 14 -4 15 9 4 13
-11 21 -11 43 0 28 14 35 17 52 19 6 0 15 11 20 23 5 13 9 17 9 11 1 -7 6 -13
12 -13 7 0 9 10 5 26 -6 24 -6 25 9 10 23 -22 25 -20 20 17 -5 30 -5 30 6 9 7
-12 17 -21 23 -19 18 6 14 60 -6 90 -11 15 -15 27 -10 27 5 0 15 -11 22 -25 7
-13 17 -22 21 -19 4 2 12 -3 17 -13 9 -14 13 -15 26 -4 9 7 16 20 16 27 0 8 6
14 12 14 7 0 2 7 -10 16 -12 8 -20 20 -17 25 4 5 1 9 -4 9 -6 0 -11 4 -11 9 0
6 8 9 18 8 18 -1 27 -27 10 -27 -5 0 -6 -5 -2 -11 4 -8 9 -7 15 2 4 7 5 17 3
21 -3 4 0 8 6 8 6 0 1 15 -12 32 -42 59 -48 76 -30 80 10 2 -6 12 -35 23 -29
10 -50 22 -47 26 6 10 -24 18 -68 17 -33 0 -37 -3 -42 -31 -15 -89 -27 -207
-29 -287 -1 -50 -4 -89 -7 -87 -3 1 -17 9 -31 16 -30 15 -30 -8 -3 254 15 152
15 159 -3 172 -10 7 -21 12 -24 9 -3 -2 -6 10 -5 25 1 16 4 27 9 24 4 -2 7 4
7 15 0 10 11 31 25 46 13 14 22 33 19 41 -7 18 12 20 20 3 3 -7 3 2 0 20 -4
24 -2 34 10 38 11 4 16 18 16 43 0 63 -8 64 -98 17 l-83 -42 19 -25 c11 -13
27 -39 36 -57 16 -32 16 -34 -9 -80 -14 -26 -40 -63 -56 -82 -36 -41 -29 -24
17 40 60 86 60 85 20 146 -20 29 -36 56 -36 59 0 2 28 19 63 36 147 74 247
156 247 204 0 43 -27 58 -94 52 -34 -3 -68 -8 -78 -12 -12 -5 -18 1 -23 24 -4
17 -11 33 -16 37 -5 3 -20 27 -34 54 -13 26 -31 55 -40 64 -26 25 -108 20
-210 -15z m172 13 c13 -8 -52 -64 -104 -91 -30 -16 -63 -14 -63 4 0 16 67 65
89 65 8 0 12 3 8 6 -10 11 -73 -16 -96 -40 -13 -13 -21 -32 -19 -43 4 -18 22
-20 103 -10 44 6 59 -1 43 -21 -11 -13 -10 -15 10 -10 18 5 21 4 12 -7 -16
-19 11 -26 41 -9 29 16 65 18 74 4 4 -6 10 -24 15 -41 8 -28 7 -30 -48 -59
-31 -16 -77 -43 -102 -60 -53 -36 -156 -70 -211 -70 -36 0 -39 2 -49 41 -6 23
-10 42 -8 44 2 2 61 24 131 50 134 50 165 68 58 35 -75 -24 -85 -24 -78 -6 3
8 -2 17 -11 21 -13 5 -14 8 -3 14 10 7 8 11 -10 16 -23 8 -23 8 -4 16 16 6 13
8 -14 8 l-33 1 23 20 c14 11 18 19 11 20 -7 0 -11 4 -8 9 4 5 0 11 -6 14 -17
5 61 45 132 68 60 20 98 23 117 11z m12 -309 c-4 -23 3 -32 18 -26 10 4 14 2
9 -5 -4 -8 6 -9 34 -6 22 3 40 1 40 -4 0 -19 -258 -132 -261 -114 -1 4 -1 10
0 15 0 4 -7 7 -17 7 -13 1 -11 4 8 16 15 9 18 13 6 9 -17 -5 -17 -4 -5 12 13
15 12 16 -6 9 -13 -4 -16 -4 -10 2 6 5 28 15 50 22 22 7 55 21 73 31 19 11 38
17 43 13 5 -3 9 -2 8 3 -2 13 1 23 6 23 3 0 4 -3 4 -7z m21 -219 l29 -46 -30
-46 c-16 -26 -37 -57 -47 -70 -21 -27 -27 -23 -66 50 -23 43 -23 47 -8 63 13
14 13 16 2 10 -12 -7 -11 -4 2 11 9 10 17 24 18 29 5 30 13 10 23 -55 3 -14 5
1 6 32 1 52 7 65 34 67 4 1 21 -20 37 -45z"/>
<path d="M532 643 c-6 -2 -10 -9 -6 -14 3 -5 1 -9 -4 -9 -5 0 -27 -7 -47 -16
-26 -11 -34 -18 -26 -24 10 -5 10 -9 2 -14 -6 -4 -9 -11 -6 -16 3 -5 -4 -19
-16 -31 -13 -13 -23 -36 -23 -55 -1 -18 -5 -36 -8 -40 -4 -4 -2 -16 3 -27 9
-16 13 -17 20 -6 7 12 9 11 9 -1 0 -8 10 0 21 18 12 18 24 30 27 27 3 -2 -3
-14 -13 -25 -10 -11 -15 -23 -12 -26 3 -4 2 -16 -4 -26 -9 -16 -7 -24 5 -37
15 -15 17 -14 22 7 4 12 10 22 15 22 12 0 11 -7 -1 -31 -7 -13 -7 -19 0 -19 5
0 10 4 10 9 0 5 7 11 15 14 11 5 12 1 5 -19 -9 -22 -8 -25 9 -19 13 4 20 0 24
-16 4 -16 11 -20 26 -16 13 3 25 -1 31 -11 8 -14 9 -12 10 11 0 18 4 26 11 21
8 -4 9 20 4 82 -8 118 -26 277 -32 287 -5 8 -51 8 -71 0z"/>
<path d="M1892 1214 c-114 -118 -131 -224 -62 -395 58 -145 51 -220 -28 -310
l-31 -36 57 -56 58 -57 41 30 c51 38 107 113 129 171 34 93 19 230 -39 344
-46 91 -40 154 19 223 l33 39 -52 51 c-29 29 -57 52 -62 52 -5 0 -33 -25 -63
-56z"/>
<path d="M6839 1220 c-29 -29 -63 -77 -81 -116 -28 -59 -30 -72 -26 -137 4
-54 15 -93 42 -154 56 -125 49 -213 -23 -295 -17 -20 -31 -40 -31 -45 0 -5 24
-32 53 -61 l53 -53 40 29 c85 62 139 156 150 258 8 76 -7 146 -51 245 -45 98
-46 148 -6 211 16 25 34 49 41 53 8 5 -5 25 -41 61 -29 30 -57 54 -62 54 -4 0
-30 -23 -58 -50z"/>
<path d="M2935 1231 c-49 -23 -88 -63 -112 -116 -16 -35 -18 -80 -21 -382 l-4
-343 91 0 91 0 0 333 c0 285 2 336 16 355 18 27 36 28 57 4 15 -17 17 -56 17
-355 l0 -337 90 0 90 0 0 338 c0 316 1 340 18 355 25 23 38 21 56 -5 14 -19
16 -70 16 -355 l0 -333 91 0 91 0 -4 343 c-4 374 -6 386 -66 451 -60 64 -167
84 -249 46 -42 -19 -44 -19 -85 0 -54 25 -131 25 -183 1z"/>
<path d="M4008 1236 c-61 -22 -86 -43 -118 -99 -43 -76 -60 -164 -60 -319 0
-208 29 -309 108 -380 46 -41 128 -64 192 -53 l40 7 0 69 0 69 -41 0 c-89 0
-124 85 -124 295 1 199 36 275 127 275 l39 0 -3 73 -3 72 -60 2 c-33 2 -77 -4
-97 -11z"/>
<path d="M5156 1236 c-49 -18 -92 -59 -121 -116 -39 -79 -50 -145 -50 -310 0
-131 4 -166 22 -226 39 -125 99 -183 206 -198 26 -4 61 -4 77 -1 30 7 30 7 30
76 l0 69 -34 0 c-42 0 -82 31 -102 78 -36 85 -33 341 5 426 22 51 44 66 96 66
l36 0 -3 73 -3 72 -60 2 c-33 2 -77 -4 -99 -11z"/>
<path d="M5947 1235 c-22 -7 -50 -24 -64 -37 -46 -42 -56 -82 -61 -245 -4
-141 -6 -153 -23 -153 -17 0 -19 -8 -19 -70 0 -61 2 -70 18 -70 15 0 20 -14
29 -81 12 -92 30 -123 91 -157 34 -19 62 -24 152 -29 l110 -6 0 77 0 76 -68 0
c-89 0 -112 15 -112 76 l0 44 70 0 70 0 0 70 0 70 -70 0 -70 0 0 133 c0 164 2
167 108 167 l72 0 0 75 0 75 -97 0 c-57 -1 -114 -7 -136 -15z"/>
<path d="M6418 1234 c-11 -11 -18 -13 -18 -6 0 8 -24 12 -80 12 l-80 0 0 -425
0 -425 85 0 85 0 0 328 c0 348 4 374 48 380 18 3 26 -4 37 -32 12 -29 15 -96
15 -356 l0 -320 85 0 86 0 -3 353 -3 352 -25 45 c-35 61 -92 100 -161 106 -44
5 -57 2 -71 -12z"/>
<path d="M2140 815 l0 -425 170 0 170 0 0 75 0 75 -85 0 -85 0 0 350 0 350
-85 0 -85 0 0 -425z"/>
<path d="M2530 815 l0 -425 90 0 90 0 0 425 0 425 -90 0 -90 0 0 -425z"/>
<path d="M4240 1020 l0 -220 -25 0 c-24 0 -25 -2 -25 -75 0 -73 1 -75 25 -75
l25 0 0 -130 0 -130 85 0 85 0 0 130 0 130 50 0 50 0 0 -130 0 -130 85 0 85 0
0 425 0 425 -85 0 -85 0 0 -220 0 -220 -50 0 -50 0 0 220 0 220 -85 0 -85 0 0
-220z"/>
<path d="M4770 815 l0 -425 90 0 90 0 0 425 0 425 -90 0 -90 0 0 -425z"/>
<path d="M5390 815 l0 -425 90 0 90 0 0 106 c0 91 2 105 14 95 23 -20 55 -95
62 -150 l7 -51 85 0 85 0 -6 75 c-6 78 -34 156 -84 227 l-25 37 56 238 c31
131 59 246 62 256 5 16 -2 18 -82 15 l-88 -3 -41 -180 -40 -180 -3 183 -2 182
-90 0 -90 0 0 -425z"/>
</g>
</svg>
            <svg width="21" height="22" viewBox="0 0 21 22" fill="none" xmlns="http://www.w3.org/2000/svg" class="app-logo-small">
                <path d="M10.4851 0L0 20.9465H3.53702L10.4856 6.07843L17.2944 20.9465H20.9715L10.4851 0Z" fill="var(--logo-color)"/>
                <path d="M13.8399 15.793L16.2076 21.0019H11.7681L13.8399 15.793Z" fill="var(--logo-color)"/>
                <path d="M9.04637 21.0019L6.67867 15.793L4.60693 21.0019H9.04637Z" fill="var(--logo-color)"/>
            </svg>
        </a>
        <button class="layout-sidebar-anchor p-link z-2 mb-2" type="button" (click)="anchor()"></button>
    </div>
 

    <div #menuContainer class="layout-menu-container">
        <app-menu></app-menu>
    </div>
</div>

================
File: src/app/layout/app.sidebar.component.ts
================
import { Component, ElementRef, ViewChild } from '@angular/core';
import { LayoutService } from './service/app.layout.service';

@Component({
    selector: 'app-sidebar',
    templateUrl: './app.sidebar.component.html'
})
export class AppSidebarComponent {
    timeout: any = null;

    @ViewChild('menuContainer') menuContainer!: ElementRef;
    constructor(public layoutService: LayoutService, public el: ElementRef) {}
    

    onMouseEnter() {
        if (!this.layoutService.state.anchored) {
            if (this.timeout) {
                clearTimeout(this.timeout);
                this.timeout = null;
            }
            this.layoutService.state.sidebarActive = true;
           
    
        }
    }

    onMouseLeave() {
        if (!this.layoutService.state.anchored) {
            if (!this.timeout) {
                this.timeout = setTimeout(() => this.layoutService.state.sidebarActive = false, 300);
            }
        }
    }

    anchor() {
        this.layoutService.state.anchored = !this.layoutService.state.anchored;
    }

}

================
File: src/app/layout/app.topbar.component.html
================
<div class="layout-topbar">
    <div class="topbar-start">
        <!-- <button #menubutton type="button" class="topbar-menubutton p-link p-trigger" (click)="onMenuButtonClick()">
            <i class="pi pi-bars"></i>
        </button> -->

        <!-- <app-breadcrumb class="topbar-breadcrumb"></app-breadcrumb> -->
    </div>

    <div class="topbar-end">
        <!-- <ul class="topbar-menu">
            <li class="topbar-search">
                <span class="p-input-icon-left">
                    <i class="pi pi-search"></i>
                    <input type="text" pInputText placeholder="Search" class="w-12rem sm:w-full">
                </span>
            </li>
            <li class="ml-3">
                <button pButton type="button" icon="pi pi-cog" class="p-button-text p-button-secondary p-button-rounded flex-shrink-0" (click)="onConfigButtonClick()"></button>
            </li>
            <li class="topbar-profile">
                <button type="button" class="p-link" (click)="onProfileButtonClick()">
                    <img src="assets/layout/images/avatar.png" alt="Profile" />
                </button>
            </li>
        </ul> -->
    </div>
</div>

================
File: src/app/layout/app.topbar.component.ts
================
import { Component, ElementRef, ViewChild } from '@angular/core';
import { LayoutService } from 'src/app/layout/service/app.layout.service';

@Component({
    selector: 'app-topbar',
    templateUrl: './app.topbar.component.html'
})
export class AppTopbarComponent {

    @ViewChild('menubutton') menuButton!: ElementRef;

    constructor(public layoutService: LayoutService) { }
    
    ngOnInit() {
        // Call onMenuToggle when the component initializes
        this.layoutService.onMenuToggle();
    }

    onMenuButtonClick() {
        this.layoutService.onMenuToggle();
    }

    onProfileButtonClick() {
        this.layoutService.showProfileSidebar();
    }
    onConfigButtonClick() {
        this.layoutService.showConfigSidebar();
    }
    
}

================
File: src/app/layout/config/app.config.component.html
================
<!-- <button class="layout-config-button p-link" type="button" (click)="onConfigButtonClick()">
    <i class="pi pi-cog"></i>
</button> -->

<p-sidebar [(visible)]="visible" position="right" [transitionOptions]="'.3s cubic-bezier(0, 0, 0.2, 1)'" styleClass="layout-config-sidebar w-18rem">
    <h5>Themes</h5>
    <div class="flex flex-wrap row-gap-3">
        <div class="w-3" *ngFor="let theme of componentThemes">
            <button type="button" 
                class="cursor-pointer p-link w-2rem h-2rem border-circle flex-shrink-0 flex align-items-center justify-content-center" 
                (click)="changeTheme(theme.name)" 
                [ngStyle]="{'background-color': theme.color}"><i *ngIf="theme.name == this.layoutService.config().theme " class="pi pi-check text-white"></i></button>
        </div>
    </div>
    
    <h5>Scale</h5>
    <div class="flex align-items-center">
        <button icon="pi pi-minus" type="button" pButton (click)="decrementScale()" class="p-button-text p-button-rounded w-2rem h-2rem mr-2" [disabled]="scale === scales[0]"></button>
        <div class="flex gap-2 align-items-center">
            <i class="pi pi-circle-fill text-300" *ngFor="let s of scales" [ngClass]="{'text-primary-500': s === scale}"></i>
        </div>
        <button icon="pi pi-plus"  type="button" pButton (click)="incrementScale()" class="p-button-text p-button-rounded w-2rem h-2rem ml-2" [disabled]="scale === scales[scales.length - 1]"></button>
    </div>

    <ng-container *ngIf="!minimal">
        <h5>Menu Type</h5>
        <div class="flex flex-wrap row-gap-3">
            <div class="flex align-items-center gap-2 w-6">
                <p-radioButton name="menuMode" value="static" [(ngModel)]="menuMode" inputId="mode1"></p-radioButton>
                <label for="mode1">Static</label>
            </div>
            <div class="flex align-items-center gap-2 w-6">
                <p-radioButton name="menuMode" value="overlay" [(ngModel)]="menuMode" inputId="mode2"></p-radioButton>
                <label for="mode2">Overlay</label>
            </div>
            <div class="flex align-items-center gap-2 w-6">
                <p-radioButton name="menuMode" value="slim" [(ngModel)]="menuMode" inputId="mode3"></p-radioButton>
                <label for="mode3">Slim</label>
            </div>
            <div class="flex align-items-center gap-2 w-6">
                <p-radioButton name="menuMode" value="slim-plus" [(ngModel)]="menuMode" inputId="mode4"></p-radioButton>
                <label for="mode3">Slim +</label>
            </div>
            <div class="flex align-items-center gap-2 w-6">
                <p-radioButton name="menuMode" value="reveal" [(ngModel)]="menuMode" inputId="mode6"></p-radioButton>
                <label for="mode5">Reveal</label>
            </div>
            <div class="flex align-items-center gap-2 w-6">
                <p-radioButton name="menuMode" value="drawer" [(ngModel)]="menuMode" inputId="mode7"></p-radioButton>
                <label for="mode6">Drawer</label>
            </div>
            <div class="flex align-items-center gap-2 w-6">
                <p-radioButton name="menuMode" value="horizontal" [(ngModel)]="menuMode" inputId="mode5"></p-radioButton>
                <label for="mode4">Horizontal</label>
            </div>
        </div>

        <h5>Menu Theme</h5>
        <div class="field-radiobutton">
            <p-radioButton name="menuTheme" value="colorScheme" [(ngModel)]="menuTheme" inputId="menutheme-colorscheme"></p-radioButton>
            <label for="menutheme-colorscheme">Color Scheme</label>
        </div>
        <div class="field-radiobutton">
            <p-radioButton name="menuTheme" value="primaryColor" [(ngModel)]="menuTheme" inputId="menutheme-primarycolor"></p-radioButton>
            <label for="menutheme-primarycolor">Primary Color</label>
        </div>
        <div class="field-radiobutton">
            <p-radioButton name="menuTheme" value="transparent" [(ngModel)]="menuTheme" inputId="menutheme-transparent"></p-radioButton>
            <label for="menutheme-transparent">Transparent</label>
        </div>
    </ng-container>
    
    <h5>Color Scheme</h5>
    <div class="field-radiobutton">
        <p-radioButton name="colorScheme" value="light" [(ngModel)]="colorScheme" inputId="mode-light"></p-radioButton>
        <label for="mode-light">Light</label>
    </div>
    <div class="field-radiobutton">
        <p-radioButton name="colorScheme" value="dim" [(ngModel)]="colorScheme" inputId="mode-dim"></p-radioButton>
        <label for="mode-dim">Dim</label>
    </div>
    <div class="field-radiobutton">
        <p-radioButton name="colorScheme" value="dark" [(ngModel)]="colorScheme" inputId="mode-dark"></p-radioButton>
        <label for="mode-dark">Dark</label>
    </div>

    <ng-container *ngIf="!minimal">
        <h5>Input Style</h5>
        <div class="flex">
            <div class="field-radiobutton flex-1">
                <p-radioButton name="inputStyle" value="outlined" [(ngModel)]="inputStyle" inputId="outlined_input"></p-radioButton>
                <label for="outlined_input">Outlined</label>
            </div>
            <div class="field-radiobutton flex-1">
                <p-radioButton name="inputStyle" value="filled" [(ngModel)]="inputStyle" inputId="filled_input"></p-radioButton>
                <label for="filled_input">Filled</label>
            </div>
        </div>
    
        <h5>Ripple Effect</h5>
        <p-inputSwitch [(ngModel)]="ripple"></p-inputSwitch>
    </ng-container>
</p-sidebar>

================
File: src/app/layout/config/app.config.component.ts
================
import { Component, Input, OnInit } from '@angular/core';
import { MenuService } from '../app.menu.service';
import {
    ColorScheme,
    LayoutService,
    MenuColorScheme,
    MenuMode,
} from '../service/app.layout.service';

@Component({
    selector: 'app-config',
    templateUrl: './app.config.component.html',
})
export class AppConfigComponent implements OnInit {
    @Input() minimal: boolean = false;

    componentThemes: any[] = [];

    scales: number[] = [12, 13, 14, 15, 16];

    constructor(
        public layoutService: LayoutService,
        public menuService: MenuService
    ) {}

    get visible(): boolean {
        return this.layoutService.state.configSidebarVisible;
    }
    set visible(_val: boolean) {
        this.layoutService.state.configSidebarVisible = _val;
    }

    get scale(): number {
        return this.layoutService.config().scale;
    }
    set scale(_val: number) {
        this.layoutService.config.update((config) => ({
            ...config,
            scale: _val,
        }));
    }

    get menuMode(): MenuMode {
        return this.layoutService.config().menuMode;
    }
    set menuMode(_val: MenuMode) {
        this.layoutService.config.update((config) => ({
            ...config,
            menuMode: _val,
        }));
        if (
            this.layoutService.isSlimPlus() ||
            this.layoutService.isSlim() ||
            this.layoutService.isHorizontal()
        ) {
            this.menuService.reset();
        }
    }

    get colorScheme(): ColorScheme {
        return this.layoutService.config().colorScheme;
    }
    set colorScheme(_val: ColorScheme) {
        this.layoutService.config.update((config) => ({
            ...config,
            colorScheme: _val,
        }));
    }

    get inputStyle(): string {
        return this.layoutService.config().inputStyle;
    }
    set inputStyle(_val: string) {
        this.layoutService.config.update((config) => ({
            ...config,
            inputStyle: _val,
        }));
    }

    get ripple(): boolean {
        return this.layoutService.config().ripple;
    }
    set ripple(_val: boolean) {
        this.layoutService.config.update((config) => ({
            ...config,
            ripple: _val,
        }));
    }

    get menuTheme(): MenuColorScheme {
        return this.layoutService.config().menuTheme;
    }
    set menuTheme(_val: MenuColorScheme) {
        this.layoutService.config.update((config) => ({
            ...config,
            menuTheme: _val,
        }));
    }

    get theme(): string {
        return this.layoutService.config().theme;
    }
    set theme(_val: string) {
        this.layoutService.config.update((config) => ({
            ...config,
            theme: _val,
        }));
    }

    ngOnInit() {
        this.componentThemes = [
            { name: 'indigo', color: '#6366F1' },
            { name: 'blue', color: '#3B82F6' },
            { name: 'purple', color: '#8B5CF6' },
            { name: 'teal', color: '#14B8A6' },
            { name: 'cyan', color: '#06b6d4' },
            { name: 'green', color: '#10b981' },
            { name: 'orange', color: '#f59e0b' },
            { name: 'pink', color: '#d946ef' },
        ];
    }

    onConfigButtonClick() {
        this.layoutService.showConfigSidebar();
    }

    changeColorScheme(colorScheme: ColorScheme) {
        this.colorScheme = colorScheme;
    }

    changeTheme(theme: string) {
        this.theme = theme;
    }

    decrementScale() {
        this.scale--;
    }

    incrementScale() {
        this.scale++;
    }
}

================
File: src/app/layout/config/app.config.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { SidebarModule } from 'primeng/sidebar';
import { RadioButtonModule } from 'primeng/radiobutton';
import { ButtonModule } from 'primeng/button';
import { InputSwitchModule } from 'primeng/inputswitch';
import { AppConfigComponent } from './app.config.component';

@NgModule({
    imports: [
        CommonModule,
        FormsModule,
        SidebarModule,
        RadioButtonModule,
        ButtonModule,
        InputSwitchModule
    ],
    declarations: [
        AppConfigComponent
    ],
    exports: [
        AppConfigComponent
    ]
})
export class AppConfigModule { }

================
File: src/app/layout/service/app.layout.service.ts
================
import { Injectable, effect, signal } from '@angular/core';
import { Subject } from 'rxjs';

export type MenuMode =
    | 'static'
    | 'overlay'
    | 'horizontal'
    | 'slim'
    | 'slim-plus'
    | 'reveal'
    | 'drawer';

export type ColorScheme = 'light' | 'dark' | 'dim';

export type MenuColorScheme = 'colorScheme' | 'primaryColor' | 'transparent';

export interface AppConfig {
    inputStyle: string;
    colorScheme: ColorScheme;
    theme: string;
    ripple: boolean;
    menuMode: MenuMode;
    scale: number;
    menuTheme: MenuColorScheme;
}

interface LayoutState {
    staticMenuDesktopInactive: boolean;
    overlayMenuActive: boolean;
    profileSidebarVisible: boolean;
    configSidebarVisible: boolean;
    staticMenuMobileActive: boolean;
    menuHoverActive: boolean;
    sidebarActive: boolean;
    anchored: boolean;
}

@Injectable({
    providedIn: 'root',
})
export class LayoutService {
    _config: AppConfig = {
        ripple: false,
        inputStyle: 'outlined',
        menuMode: 'static',
        colorScheme: 'light',
        theme: 'indigo',
        scale: 14,
        menuTheme: 'colorScheme',
    };

    config = signal<AppConfig>(this._config);

    state: LayoutState = {
        staticMenuDesktopInactive: false,
        overlayMenuActive: false,
        profileSidebarVisible: false,
        configSidebarVisible: false,
        staticMenuMobileActive: false,
        menuHoverActive: false,
        sidebarActive: false,
        anchored: false,
    };

    private configUpdate = new Subject<AppConfig>();

    private overlayOpen = new Subject<any>();

    configUpdate$ = this.configUpdate.asObservable();

    overlayOpen$ = this.overlayOpen.asObservable();

    constructor() {
        effect(() => {
            const config = this.config();
            if (this.updateStyle(config)) {
                this.changeTheme();
            }
            this.changeScale(config.scale);
            this.onConfigUpdate();
        });
    }

    updateStyle(config: AppConfig) {
        return (
            config.theme !== this._config.theme ||
            config.colorScheme !== this._config.colorScheme
        );
    }

    onMenuToggle() {
        if (this.isOverlay()) {
            this.state.overlayMenuActive = !this.state.overlayMenuActive;

            if (this.state.overlayMenuActive) {
                this.overlayOpen.next(null);
            }
        }

        if (this.isDesktop() || this.isMobile()) {
            this.state.staticMenuDesktopInactive =
                !this.state.staticMenuDesktopInactive;
        } else {
            this.state.staticMenuMobileActive =
                !this.state.staticMenuMobileActive;

            if (this.state.staticMenuMobileActive) {
                this.overlayOpen.next(null);
            }
        }
    }

    onOverlaySubmenuOpen() {
        this.overlayOpen.next(null);
    }

    showProfileSidebar() {
        this.state.profileSidebarVisible = true;
    }

    showConfigSidebar() {
        this.state.configSidebarVisible = true;
    }

    isOverlay() {
        return this.config().menuMode === 'overlay';
    }

    isDesktop() {
        return window.innerWidth > 991;
    }

    isSlim() {
        return this.config().menuMode === 'slim';
    }

    isSlimPlus() {
        return this.config().menuMode === 'slim-plus';
    }

    isHorizontal() {
        return this.config().menuMode === 'horizontal';
    }

    isMobile() {
        return !this.isDesktop();
    }

    onConfigUpdate() {
        this._config = { ...this.config() };
        this.configUpdate.next(this.config());
    }

    changeTheme() {
        const config = this.config();
        const themeLink = <HTMLLinkElement>(
            document.getElementById('theme-link')
        );
        const themeLinkHref = themeLink.getAttribute('href')!;
        const newHref = themeLinkHref
            .split('/')
            .map((el) =>
                el == this._config.theme
                    ? (el = config.theme)
                    : el == `theme-${this._config.colorScheme}`
                    ? (el = `theme-${config.colorScheme}`)
                    : el
            )
            .join('/');

        this.replaceThemeLink(newHref);
    }

    replaceThemeLink(href: string) {
        const id = 'theme-link';
        let themeLink = <HTMLLinkElement>document.getElementById(id);
        const cloneLinkElement = <HTMLLinkElement>themeLink.cloneNode(true);

        cloneLinkElement.setAttribute('href', href);
        cloneLinkElement.setAttribute('id', id + '-clone');

        themeLink.parentNode!.insertBefore(
            cloneLinkElement,
            themeLink.nextSibling
        );
        cloneLinkElement.addEventListener('load', () => {
            themeLink.remove();
            cloneLinkElement.setAttribute('id', id);
        });
    }

    changeScale(value: number) {
        document.documentElement.style.fontSize = `${value}px`;
    }
}

================
File: src/index.html
================
<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <title>RDS Dashboard</title>
    <base href="./">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" type="image/x-icon" href="favicon.ico">
    <link rel="stylesheet" type="text/css" href="assets/layout/styles/layout/preloading.css">
    <link id="theme-link" rel="stylesheet" type="text/css" href="assets/layout/styles/theme/theme-light/indigo/theme.css">
</head>

<body>
    <app-root>
        <div class="layout-preloader-container">
            <div class="layout-preloader">
                <span></span>
            </div>
        </div>
    </app-root>
    <script src="https://static.elfsight.com/platform/platform.js" async></script>
</body>

</html>

================
File: src/main.ts
================
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';
import { Amplify } from 'aws-amplify';
import { environment } from './app/environment';

Amplify.configure(environment.aws);


platformBrowserDynamic()
    .bootstrapModule(AppModule)
    .catch((err) => console.error(err));

================
File: src/styles.scss
================
/* You can add global styles to this file, and also import other style files */
$gutter: 1rem; //for primeflex grid system

/* Layout */
@import "assets/layout/styles/layout/layout.scss";

/* PrimeNG */
@import "../node_modules/primeng/resources/primeng.min.css";
@import "../node_modules/primeflex/primeflex.scss";
@import "../node_modules/primeicons/primeicons.css";

/* Quill Text Editor for p-editor */
@import "../node_modules/quill/dist/quill.core.css";
@import "../node_modules/quill/dist/quill.snow.css";

/* Demos */
@import "assets/demo/styles/flags/flags.css";
@import "assets/demo/styles/badges.scss";
@import "assets/demo/styles/code.scss";

================
File: src/upload.php
================
<?php echo '<p>Fake Upload Process</p>'; ?>

================
File: tsconfig.app.json
================
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/app",
    "types": []
  },
  "files": [
    "src/main.ts"
  ],
  "include": [
    "src/**/*.d.ts"
  ]
}

================
File: tsconfig.json
================
{
  "compileOnSave": false,
  "compilerOptions": {
    "baseUrl": "./",
    "outDir": "./dist/out-tsc",
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "sourceMap": true,
    "declaration": false,
    "downlevelIteration": true,
    "experimentalDecorators": true,
    "moduleResolution": "node",
    "importHelpers": true,
    "target": "ES2022",
    "module": "ES2022",
    "useDefineForClassFields": false,
    "lib": [
      "ES2022",
      "dom",
      "esnext.asynciterable"
    ],
    "allowSyntheticDefaultImports": true,
    "resolveJsonModule": true,
    "esModuleInterop": true,
  },
  "exclude": [
    "node_modules",
    "**/node_modules/*"
  ],
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true
  }
}

================
File: tsconfig.spec.json
================
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/spec",
    "types": [
      "jasmine"
    ]
  },
  "files": [
    "src/test.ts",
  ],
  "include": [
    "src/**/*.spec.ts",
    "src/**/*.d.ts"
  ]
}

================
File: user-import-example.csv
================
profile,address,birthdate,gender,preferred_username,updated_at,website,picture,phone_number,phone_number_verified,zoneinfo,custom:license_key,locale,email,email_verified,given_name,family_name,middle_name,name,nickname,cognito:mfa_enabled,cognito:username
,,,,,,,,,,,,,user1@example.com,TRUE,,,,,,FALSE,user1
,,,,,,,,,,,,,user2@example.com,TRUE,,,,,,FALSE,user2

================
File: user-import-template.csv
================
profile,address,birthdate,gender,preferred_username,updated_at,website,picture,phone_number,phone_number_verified,zoneinfo,custom:license_key,locale,email,email_verified,given_name,family_name,middle_name,name,nickname,cognito:mfa_enabled,cognito:username
